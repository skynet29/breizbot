$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <button bn-event="click: onSave" class="w3-btn w3-blue">Save</button>\n    <button bn-event="click: onGenerate" class="w3-btn w3-blue">Generate</button>\n\n</div>\n<div id="blocklyDiv"></div>\n<div class="logPanel" bn-html="getLogs"></div>\n\n<xml id="toolbox" style="display: none;">\n    <category name="Logic" categorystyle="logic_category">\n        <block type="controls_if"></block>\n        <block type="logic_compare"></block>\n        <block type="logic_operation"></block>\n        <block type="logic_negate"></block>\n        <block type="logic_boolean"></block>\n        <block type="logic_ternary"></block>\n    </category>\n    <category name="Loop" categorystyle="loop_category">\n        <block type="controls_repeat_ext">\n            <value name="TIMES">\n            <shadow type="math_number">\n            <field name="NUM">10</field>\n            </shadow>\n            </value>\n            </block>        <block type="controls_whileUntil"></block>\n        <block type="controls_for">\n            <value name="FROM">\n                <shadow type="math_number">\n                    <field name="NUM">1</field>\n                </shadow>\n            </value>\n            <value name="TO">\n                <shadow type="math_number">\n                    <field name="NUM">10</field>\n                </shadow>\n            </value>\n            <value name="BY">\n                <shadow type="math_number">\n                    <field name="NUM">1</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="controls_forEach"></block>\n        <block type="controls_flow_statements"></block>\n    </category>\n    <category name="Math" categorystyle="math_category">\n        <block type="math_number"></block>\n        <block type="math_arithmetic"></block>\n        <block type="math_random_int">\n            <value name="FROM">\n                <shadow type="math_number">\n                    <field name="NUM">1</field>\n                </shadow>\n            </value>\n            <value name="TO">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n    </category>\n    <category name="Text" categorystyle="text_category">\n        <block type="text"></block>\n        <block type="text_print"></block>\n        <block type="text_length"></block>\n        <block type="text_indexOf"></block>\n        <block type="text_charAt"></block>\n        <block type="text_getSubstring"></block>\n    </category>\n    <category name="Lists" categorystyle="list_category">\n        <block type="lists_create_with">\n            <mutation items="0"></mutation>\n        </block>\n        <block type="lists_create_with"></block>\n        <block type="lists_repeat">\n            <value name="NUM">\n                <shadow type="math_number">\n                    <field name="NUM">5</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="lists_length"></block>\n        <block type="lists_isEmpty"></block>\n        <block type="lists_indexOf">\n            <value name="VALUE">\n                <block type="variables_get">\n                    <field name="VAR">list</field>\n                </block>\n            </value>\n        </block>\n        <block type="lists_getIndex">\n            <value name="VALUE">\n                <block type="variables_get">\n                    <field name="VAR">list</field>\n                </block>\n            </value>\n        </block>\n        <block type="lists_setIndex">\n            <value name="LIST">\n                <block type="variables_get">\n                    <field name="VAR">list</field>\n                </block>\n            </value>\n        </block>\n        <block type="lists_getSublist">\n            <value name="LIST">\n                <block type="variables_get">\n                    <field name="VAR">list</field>\n                </block>\n            </value>\n        </block>\n        <block type="lists_split">\n            <value name="DELIM">\n                <shadow type="text">\n                    <field name="TEXT">,</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="lists_sort"></block>\n        <block type="lists_reverse"></block>\n    </category>\n    <category name="Variables" custom="VARIABLE" categorystyle="variable_category"></category>\n    <category name="Functions" custom="PROCEDURE" categorystyle="procedure_category"></category>\n    <category name="Music" colour="355">\n        <block type="play_sound"></block>\n    </category>\n\n</xml>',deps:["breizbot.pager"],props:{},init:function(e,n){Blockly.Blocks.play_sound={init:function(){this.appendDummyInput().appendField("Play").appendField(new Blockly.FieldDropdown([["C4","sounds/c4.m4a"],["D4","sounds/d4.m4a"],["E4","sounds/e4.m4a"]]),"NAME"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(355),this.setTooltip(""),this.setHelpUrl("")}},javascript.javascriptGenerator.forBlock.play_sound=function(e,n){var t=e.getFieldValue("NAME");console.log("value",t);return"...\n"};Blockly.inject("blocklyDiv",{media:"../lib/blockly/media/",toolbox:document.getElementById("toolbox")});let t;const o={math_number:function(e){return e.fields.NUM},text:function(e){return e.fields.TEXT},variables_set:function(e){const n=e.fields.VAR.id,o=a(e.inputs.VALUE);console.log({varId:n,value:o}),t[n]=o},variables_get:function(e){const n=e.fields.VAR.id;return t[n]},math_arithmetic:function(e){const n=e.fields.OP,t=a(e.inputs.A),o=a(e.inputs.B);switch(console.log({operator:n,val1:t,val2:o}),n){case"ADD":return t+o;case"MINUS":return t-o;case"MULTIPLY":return t*o;case"DIVIDE":return t/o;case"POWER":return Math.pow(t,o);default:throw`Unknown operator '${n}'`}},controls_repeat_ext:function(e){const n=a(e.inputs.TIMES);console.log("TIMES",n);for(let t=0;t<n;t++)a(e.inputs.DO)},text_print:function(e){var n;n=a(e.inputs.TEXT),s.model.logs.push(n),s.update()},logic_compare:function(e){const n=e.fields.OP,t=a(e.inputs.A),o=a(e.inputs.B);switch(console.log({operator:n,val1:t,val2:o}),n){case"EQ":return t===o;case"NEQ":return t!==o;case"LT":return t<o;case"LTE":return t<=o;case"GT":return t>o;case"GTE":return t>=o;default:throw`Unknown operator '${n}'`}},logic_operation:function(e){const n=e.fields.OP,t=a(e.inputs.A),o=a(e.inputs.B);switch(console.log({operator:n,val1:t,val2:o}),n){case"AND":return t&&o;case"OR":return t||o;default:throw`Unknown operator '${n}'`}},logic_boolean:function(e){const n=e.fields.BOOL;return console.log("test",n),"TRUE"==n},logic_negate:function(e){return!a(e.inputs.BOOL)},logic_ternary:function(e){const n=a(e.inputs.IF);return a(n?e.inputs.THEN:e.inputs.ELSE)},controls_if:function(e){let n=!1,t=1;const{extraState:o}=e;null!=o&&(null!=o.hasElse&&(n=o.hasElse),null!=o.elseIfCount&&(t+=o.elseIfCount)),console.log({hasElse:n,nbIf:t});let l=!1;for(let n=0;n<t;n++){const t=`IF${n}`,o=`DO${n}`;if(l=a(e.inputs[t]),console.log(t,l),l){a(e.inputs[o]);break}}n&&!l&&a(e.inputs.ELSE)},controls_whileUntil:function(e){const n=e.fields.MODE;if(console.log({mode:n}),"WHILE"==n){let n=a(e.inputs.BOOL);for(;n;)a(e.inputs.DO),n=a(e.inputs.BOOL)}else{if("UNTIL"!=n)throw`Unknown mode '${n}'`;{let n=a(e.inputs.BOOL);for(;!n;)a(e.inputs.DO),n=a(e.inputs.BOOL)}}},controls_for:function(e){const n=e.fields.VAR.id,o=a(e.inputs.FROM),l=a(e.inputs.TO),c=a(e.inputs.BY);console.log({from:o,to:l,by:c});for(let s=o;s<=l;s+=c)t[n]=s,a(e.inputs.DO)}};function l(e,n){return n.find(n=>n.id==e).name}function a(e){if(null==e)return;if(null==e.type)if(null!=e.block)e=e.block;else{if(null==e.shadow)throw"Missig parameter block or shadow";e=e.shadow}console.log("evalCode",e.type);const n=o[e.type];if("function"!=typeof n)throw`function '${e.type}' not implemented yet`;const t=n(e);return null==t&&a(e.next),t}function c({blocks:e,variables:n}){console.log("startCode",e,n),s.setData({logs:[]}),t={};for(let n of e.blocks)a(n);!function(e){console.log("dumpVariables:");for(const[n,o]of Object.entries(t)){const t=l(n,e);console.log(`${t}=${o}`)}}(n)}const s=$$.viewController(e,{data:{logs:[],getLogs:function(){return this.logs.join("<br>")}},events:{onSave:function(){console.log("onSave"),c(Blockly.serialization.workspaces.save(Blockly.getMainWorkspace()))},onGenerate:function(){const e=Blockly.JavaScript.workspaceToCode(Blockly.getMainWorkspace());console.log("code",e)}}})}});