$$.control.registerControl("FileChoice",{template:'<p>Select a file system</p>\n<ul class="w3-ul w3-border w3-white">\n\t<li class="w3-bar" bn-event="click: onHome">\n\t\t<div class="w3-bar-item">\n\t\t\t<i class="fa fa-home fa-2x fa-fw w3-text-blue"></i>\n\t\t\t<span>Your home files</span>\n\t\t</div>\n\t</li>\n\n\t<li class="w3-bar" bn-event="click: onShare">\n\t\t<div class="w3-bar-item">\n\t\t\t<i class="fa fa-share-alt fa-2x fa-fw w3-text-blue"></i>\n\t\t\t<span>Files shared by your friends</span>\n\t\t</div>\n\t</li>\n</ul>\t',deps:["breizbot.pager","breizbot.files"],init:function(t,n,e){function i(t,i){n.pushPage("breizbot.files",{title:t,props:{filterExtension:"mp4",friendUser:i},events:{fileclick:function(t,a){console.log("fileclick",a);const{rootDir:o,fileName:s}=a,l=e.fileUrl(o+s,i);n.popPage(l)}},onReturn:function(t){n.popPage(t)}})}$$.viewController(t,{data:{},events:{onHome:function(){i("Home files","")},onShare:function(){n.pushPage("breizbot.friends",{title:"Shared files",props:{showConnectionState:!1},events:{friendclick:function(t,n){const{userName:e}=n;i(e,e)}},onReturn:function(t){n.popPage(t)}})}}})}}),$$.control.registerControl("rootPage",{template:'<div class="header">\n\t<div class="item">\n\t\t<label>Audio Input</label>\n\t\t<div bn-control="brainjs.combobox" bn-data="{items: audioDevices}"\n\t\t\tbn-event="comboboxchange: onAudioDeviceChange"></div>\n\t</div>\n\t<div class="item">\n\t\t<label>Analyser</label>\n\t\t<div bn-control="brainjs.flipswitch" bn-event="flipswitchchange: onAnalyserChange" bn-val="showAnalyser"></div>\n\t</div>\n\t<div class="item">\n\t\t<label>Status:</label>\n\t\t<span bn-text="status"></span>\n\t</div>\n\t<div class="item">\n\t\t<button class="w3-btn w3-blue" bn-icon="fa fa-folder-open" bn-event="click: onChooseFile"\n\t\t\ttitle="Choose video file"></button>\n\t</div>\n\t<div class="item" bn-show="showStartRecord">\n\t\t<button class="w3-btn w3-blue" bn-event="click: onRecord"  bn-icon="fas fa-circle" title="Start Record"></button>\n\n\t</div>\n\t<div class="item" bn-show="recording">\n\t\t<button class="w3-btn w3-blue" bn-event="click: onStop" bn-icon="fa fa-stop" title="Stop Record"></button>\n\t</div>\n\t<div class="item" bn-show="isDisplayAvailable">\n\t\t<button class="w3-btn w3-blue" bn-event="click: onCast" bn-icon="fab fa-chromecast" title="Cast"></button>\n\t</div>\n\t<div class="item" bn-show="isDisplayStarted">\n\t\t<button class="w3-btn w3-blue" bn-event="click: onSend" bn-icon="fa fa-paper-plane" title="Cast"></button>\n\t</div>\n\n\t\n\n</div>\n<div class="top">\n\t<div class="video">\n\t\t<video bn-attr="{src: url}" controls="" controlsList=nodownload bn-bind="video"></video>\n\t</div>\n\t<div class="gain">\n\t\t<div class="gainItem">\n\t\t\t<label>Micro</label>\n\t\t\t<div bn-control="brainjs.slider" bn-data="{min: 0, max: 1, step:0.1, orientation: \'vertical\'}"\n\t\t\t\tbn-val="micGain" bn-event="input: onMicGainChange"></div>\n\t\t</div>\n\t\t<div class="gainItem">\n\t\t\t<label>Video</label>\n\t\t\t<div bn-control="brainjs.slider" bn-data="{min: 0, max: 1, step:0.1, orientation: \'vertical\'}"\n\t\t\t\tbn-val="videoGain" bn-event="input: onVideoGainChange"></div>\n\t\t</div>\n\t</div>\n\n</div>\n</div>\n\n\n<canvas class="visualizer" bn-bind="canvas" bn-show="showAnalyser"></canvas>',deps:["breizbot.files","breizbot.pager","breizbot.display"],init:function(t,n,e,i){let a=null,o=null;const s=$$.viewController(t,{data:{micGain:.5,videoGain:.5,url:"#",audioDevices:[],showAnalyser:!1,status:"KO",recording:!1,showStartRecord:function(){return"OK"==this.status&&!this.recording},isDisplayAvailable:!1,isDisplayStarted:!1},events:{onCast:async function(){i.isStarted()?i.close():await i.start()},onSend:function(){i.setUrl(s.model.url)},onRecord:async function(t){r.currentTime=0,await r.play(),s.setData({recording:!0}),w.start()},onStop:function(t){r.pause(),s.setData({recording:!1}),w.stop()},onMicGainChange:function(t,n){b.gain.value=n},onVideoGainChange:function(t,n){r.volume=n},onAudioDeviceChange:async function(){const t=$(this).getValue();await D(l(t))},onAnalyserChange:function(t,n){console.log("onAnalyserChange",n),s.setData({showAnalyser:n}),0==n?cancelAnimationFrame(o):"OK"==s.model.status&&C()},onChooseFile:function(){e.pushPage("FileChoice",{title:"Choose File",onReturn:function(t){console.log("url",t),s.setData({url:t}),r.volume=s.model.videoGain}})}}});function l(t){return{audio:{deviceId:{exact:t}}}}i.on("availability",t=>{s.setData({isDisplayAvailable:t})}),i.on("ready",()=>{s.setData({isDisplayStarted:!0}),i.setUrl(s.model.url)}),i.on("close",()=>{s.setData({isDisplayStarted:!1})});const c=s.scope.canvas.get(0),r=s.scope.video.get(0),d=c.getContext("2d"),u=new AudioContext,b=u.createGain();b.gain.value=s.model.micGain;const v=u.createMediaElementSource(r),f=u.createAnalyser();f.fftSize=2048;const p=u.createChannelSplitter(),m=u.createChannelMerger(),h=f.frequencyBinCount,g=new Uint8Array(h);let w=null,y=[];function C(){const t=c.width,n=c.height;o=requestAnimationFrame(C),f.getByteTimeDomainData(g),d.fillStyle="rgb(200, 200, 200)",d.fillRect(0,0,t,n),d.lineWidth=2,d.strokeStyle="rgb(0, 0, 0)",d.beginPath();const e=t/h;let i=0;for(let t=0;t<h;t++){const a=g[t]/128*n/2;0==t?d.moveTo(i,a):d.lineTo(i,a),i+=e}d.lineTo(t,n/2),d.stroke()}async function D(t){console.log("initNodes",t);try{a=await navigator.mediaDevices.getUserMedia(t);const e=u.createMediaStreamSource(a),i=u.createMediaStreamDestination();e.connect(f),e.connect(b),b.connect(m,0,0),b.connect(m,0,1),v.connect(p),p.connect(m,0,0),p.connect(m,1,1),m.connect(u.destination),m.connect(i),(w=new MediaRecorder(i.stream)).ondataavailable=function(t){y.push(t.data)},w.onstop=async function(t){const e=await $$.ui.showPrompt({title:"Sound Clip Title",label:"Enter a name:"});if(null!=e){console.log("clipName",e);const t=new Blob(y,{type:"audio/ogg; codecs=opus"});await n.saveFile(t,e+".ogg")}y=[]},s.setData({status:"OK"}),s.model.showAnalyser&&C()}catch(t){s.setData({status:"KO"}),console.error(t)}}this.dispose=function(){console.log("dispose"),a&&(a.getTracks().forEach(function(t){t.stop()}),a=null)},async function(){await async function(){const t=await $$.media.getAudioInputDevices();s.setData({audioDevices:t.map(t=>({value:t.id,label:t.label}))})}(),await D(l(s.model.audioDevices[0].value))}()}});