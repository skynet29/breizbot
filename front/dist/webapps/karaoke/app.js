$$.control.registerControl("FileChoice",{template:'<p>Select a file system</p>\n<ul class="w3-ul w3-border w3-white">\n\t<li class="w3-bar" bn-event="click: onHome">\n\t\t<div class="w3-bar-item">\n\t\t\t<i class="fa fa-home fa-2x fa-fw w3-text-blue"></i>\n\t\t\t<span>Your home files</span>\n\t\t</div>\n\t</li>\n\n\t<li class="w3-bar" bn-event="click: onShare">\n\t\t<div class="w3-bar-item">\n\t\t\t<i class="fa fa-share-alt fa-2x fa-fw w3-text-blue"></i>\n\t\t\t<span>Files shared by your friends</span>\n\t\t</div>\n\t</li>\n</ul>\t',deps:["breizbot.pager","breizbot.files"],init:function(t,n,e){function i(t,i){n.pushPage("breizbot.files",{title:t,props:{filterExtension:"mp4",friendUser:i},events:{fileclick:function(t,a){console.log("fileclick",a);const{rootDir:o,fileName:s}=a,l=e.fileUrl(o+s,i);n.popPage(l)}},onReturn:function(t){n.popPage(t)}})}$$.viewController(t,{data:{},events:{onHome:function(){i("Home files","")},onShare:function(){n.pushPage("breizbot.friends",{title:"Shared files",props:{showConnectionState:!1},events:{friendclick:function(t,n){const{userName:e}=n;i(e,e)}},onReturn:function(t){n.popPage(t)}})}}})}}),$$.control.registerControl("rootPage",{template:'<div class="header">\n\t<div class="item">\n\t\t<label>Audio Input</label>\n\t\t<div bn-control="brainjs.combobox" bn-data="{items: audioDevices}"\n\t\t\tbn-event="comboboxchange: onAudioDeviceChange"></div>\n\t</div>\n\t<div class="item">\n\t\t<label>Status:</label>\n\t\t<span bn-text="status"></span>\n\t</div>\n\t<div class="item">\n\t\t<button class="w3-btn w3-blue" bn-icon="fa fa-folder-open" bn-event="click: onChooseFile"\n\t\t\ttitle="Choose video file"></button>\n\t</div>\n\t<div class="item" bn-show="isDisplayAvailable">\n\t\t<button class="w3-btn w3-blue" bn-event="click: onCast" bn-icon="fab fa-chromecast"\n\t\t\ttitle="Open display"></button>\n\t</div>\n\t<div class="item" bn-show="isDisplayStarted">\n\t\t<button class="w3-btn w3-blue" bn-event="click: onSend" bn-icon="fa fa-paper-plane" title="Cast"></button>\n\t</div>\n\t<div class="item" bn-show="isDisplayStarted">\n\t\t<button class="w3-btn w3-blue" bn-event="click: onPlay" bn-icon="fa fa-play" title="Play"\n\t\t\tbn-show="!isPlaying"></button>\n\t\t<button class="w3-btn w3-blue" bn-event="click: onPause" bn-icon="fa fa-pause" title="Play"\n\t\t\tbn-show="isPlaying"></button>\n\t</div>\n\t<div class="item" bn-show="isDisplayStarted">\n\t\t<button class="w3-btn w3-blue" bn-event="click: onSyncMainWithDisplay" bn-icon="fas fa-level-down-alt"\n\t\t\ttitle="Sync main with display"></button>\n\t</div>\n\t<div class="item" bn-show="isDisplayStarted">\n\t\t<button class="w3-btn w3-blue" bn-event="click: onSyncDisplayWithMain" bn-icon="fas fa-level-up-alt"\n\t\t\ttitle="Sync display with main"></button>\n\t</div>\n\t<div class="item" bn-show="isDisplayStarted">\n\t\t<label>Karaoke</label>\n\t\t<div bn-control="brainjs.flipswitch" bn-val="karaokeEnabled" bn-event="flipswitchchange: onKaraokeChange"></div>\n\t</div>\n</div>\n\n<div class="slider" bn-show="isDisplayStarted">\n\t<label bn-text="getDuration"></label>\n\t\t<div bn-control="brainjs.slider" bn-data="{max: duration}" bn-event="input: onSliderChange" bn-val="curTime">\n\t\t</div>\n</div>\n\n<div class="top">\n\t<div class="video">\n\t\t<video bn-attr="{src: url}" controls="" controlsList=nodownload bn-bind="video"></video>\n\t</div>\n\t<div class="gain">\n\t\t<div class="gainItem">\n\t\t\t<label>Micro</label>\n\t\t\t<div bn-control="brainjs.slider" bn-data="{min: 0, max: 1, step:0.1, orientation: \'vertical\'}"\n\t\t\t\tbn-val="micGain" bn-event="input: onMicGainChange"></div>\n\t\t</div>\n\t\t<div class="gainItem">\n\t\t\t<label>Video</label>\n\t\t\t<div bn-control="brainjs.slider" bn-data="{min: 0, max: 1, step:0.1, orientation: \'vertical\'}"\n\t\t\t\tbn-val="videoGain" bn-event="input: onVideoGainChange"></div>\n\t\t</div>\n\t</div>\n\n</div>',deps:["breizbot.files","breizbot.pager","breizbot.display"],init:function(t,n,e,i){let a=null;function o(t){const n=new Date(1e3*t);return(n.getMinutes()+n.getSeconds()/100).toFixed(2).replace(".",":")}const s=$$.viewController(t,{data:{micGain:.5,videoGain:.5,url:"#",audioDevices:[],showAnalyser:!1,status:"KO",recording:!1,showStartRecord:function(){return"OK"==this.status&&!this.recording},isDisplayAvailable:!1,isDisplayStarted:!1,isPlaying:!1,karaokeEnabled:!1,duration:0,curTime:0,getDuration:function(){return o(this.curTime)+" / "+o(this.duration)}},events:{onSyncMainWithDisplay:function(){c.currentTime=s.model.curTime},onSyncDisplayWithMain:function(){i.setCurrentTime(c.currentTime)},onKaraokeChange:function(t,n){console.log("onKaraokeChange",n),i.enableKaraoke(n)},onPlay:function(){i.play()},onPause:function(){i.pause()},onCast:async function(){i.isStarted()?i.close():await i.start()},onSend:function(){i.setUrl(s.model.url),s.setData({duration:c.duration,isPlaying:!1})},onMicGainChange:function(t,n){d.gain.value=n},onVideoGainChange:function(t,n){i.isStarted()?i.setVolume(n):c.volume=n},onAudioDeviceChange:async function(){const t=$(this).getValue();await b(l(t))},onChooseFile:function(){e.pushPage("FileChoice",{title:"Choose File",onReturn:function(t){console.log("url",t),s.setData({url:t}),c.volume=s.model.videoGain}})}}});function l(t){return{audio:{deviceId:{exact:t}}}}i.on("availability",t=>{s.setData({isDisplayAvailable:t})}),i.on("ready",()=>{s.setData({isDisplayStarted:!0})}),i.on("close",()=>{s.setData({isDisplayStarted:!1})}),i.on("playing",()=>{s.setData({isPlaying:!0})}),i.on("paused",()=>{s.setData({isPlaying:!1})}),i.on("timeUpdate",t=>{s.setData({curTime:t})});const c=s.scope.video.get(0),r=new AudioContext,d=r.createGain();async function b(t){console.log("initNodes",t);try{a=await navigator.mediaDevices.getUserMedia(t);const n=r.createMediaStreamSource(a);r.createMediaStreamDestination();n.connect(d),d.connect(r.destination),s.setData({status:"OK"})}catch(t){s.setData({status:"KO"}),console.error(t)}}d.gain.value=s.model.micGain,this.dispose=function(){console.log("dispose"),a&&(a.getTracks().forEach(function(t){t.stop()}),a=null)},async function(){await async function(){const t=await $$.media.getAudioInputDevices();s.setData({audioDevices:t.map(t=>({value:t.id,label:t.label}))})}(),s.model.audioDevices.length>0&&await b(l(s.model.audioDevices[0].value))}()}});