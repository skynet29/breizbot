$$.control.registerControl("rootPage",{template:'<div>\n    <canvas width="512" height="512" bn-bind="canvas"></canvas>\n</div>',deps:["breizbot.pager"],props:{},init:function(e,t){const r=$$.viewController(e,{data:{},events:{}}).scope.canvas.get(0);!async function(){if(!navigator.gpu)throw new Error("WebGPU not supported on this browser.");const e=await navigator.gpu.requestAdapter();if(!e)throw new Error("No appropriate GPUAdapter found.");const t=await e.requestDevice(),n=new Float32Array([4,4]),o=t.createBuffer({label:"Grid Uniforms",size:n.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});t.queue.writeBuffer(o,0,n);const a=r.getContext("webgpu"),i=navigator.gpu.getPreferredCanvasFormat();a.configure({device:t,format:i});const u=new Float32Array([-.8,-.8,.8,-.8,.8,.8,-.8,-.8,.8,.8,-.8,.8]),l=t.createBuffer({label:"Cell vertices",size:u.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});t.queue.writeBuffer(l,0,u);const s=t.createShaderModule({label:"Cell shader",code:"@group(0) @binding(0) var<uniform> grid: vec2f;\n\nstruct VertexInput {\n  @location(0) pos: vec2f,\n  @builtin(instance_index) instance: u32,\n};\n\nstruct VertexOutput {\n  @builtin(position) pos: vec4f,\n};\n\n@vertex\nfn vertexMain(input: VertexInput) -> VertexOutput {\n    //return vec4f(pos.x, pos.y, 0, 1);\n    //return vec4f(pos / grid, 0, 1);\n\n    // let cell = vec2f(1, 1); // Cell(1,1) in the image above\n    // let cellOffset = cell / grid * 2; // Compute the offset to cell\n    // let gridPos = (input.pos + 1) / grid - 1 + cellOffset; // Add it here!\n\n  let i = f32(input.instance);\n  let cell = vec2f(i % grid.x, floor(i / grid.x));\n  let cellOffset = cell / grid * 2;\n  let gridPos = (input.pos + 1) / grid - 1 + cellOffset;  \n\n    //return vec4f(gridPos, 0, 1);\n    var output: VertexOutput;\n    output.pos = vec4f(gridPos, 0, 1);\n    return output;\n}\n\n@fragment\nfn fragmentMain() -> @location(0) vec4f {\n    return vec4f(1, 0, 0, 1); // (Red, Green, Blue, Alpha)\n}"}),f=t.createRenderPipeline({label:"Cell pipeline",layout:"auto",vertex:{module:s,entryPoint:"vertexMain",buffers:[{arrayStride:8,attributes:[{format:"float32x2",offset:0,shaderLocation:0}]}]},fragment:{module:s,entryPoint:"fragmentMain",targets:[{format:i}]}}),c=t.createBindGroup({label:"Cell renderer bind group",layout:f.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:o}}]}),d=t.createCommandEncoder(),p=d.beginRenderPass({colorAttachments:[{view:a.getCurrentTexture().createView(),loadOp:"clear",storeOp:"store",clearValue:{r:0,g:0,b:.4,a:1}}]});p.setPipeline(f),p.setBindGroup(0,c),p.setVertexBuffer(0,l),p.draw(u.length/2,16),p.end(),t.queue.submit([d.finish()])}()}});