$$.control.registerControl("rootPage",{deps:["breizbot.broker","breizbot.appData","breizbot.pager","breizbot.radar","breizbot.files","breizbot.http"],template:'<div class="toolbar">\n\t<div class="location">\n\t\t<label>Geolocation</label>\n\t\t<div \n\t\t\tbn-control="brainjs.flipswitch"\n\t\t\tbn-event="flipswitchchange: onLocationChange"\n\t\t\t>\n\t\t\t\n\t\t</div>\t\t\n\t</div>\n\n\t<div bn-style="{visibility: show1}">\n\t\t<button class="w3-button" bn-event="click: onSearch" title="Search city" bn-icon="fa fa-search-location">\n\t\t</button>\t\n\t\t<button class="w3-button" bn-event="click: onAddMarker" title="Add Marker" bn-icon="fa-solid fa-location-dot">\n\t\t</button>\t\n\t\t<button class="w3-button" bn-event="click: onImportKml" title="Import KML file" bn-icon="fa-solid fa-globe">\n\t\t</button>\t\t\n\t\t<button class="w3-button" bn-event="click: onImportOSMObject" title="Import OSM Object" bn-icon="fa-solid fa-draw-polygon">\n\t\t</button>\t\t\n\t\t<button class="w3-button" bn-event="click: onImportObjectFromDatabase" title="Import Object from database" bn-icon="fa-solid fa-database">\n\t\t</button>\t\n\t</div>\n\n</div>\n\n\n<div bn-control="brainjs.map" \n\tstyle="height: 100%"\n\tbn-iface="map"\n\tclass="map" \n\tbn-data="{\n\t\tcenter, \n\t\tzoom, \n\t\tscale: true, \n\t\tcoordinates: true,\n\t\tcontextMenu: {\n\t\t\taddMarker: {\n\t\t\t\tname: \'Add Marker\'\n\t\t\t}\n\t\t},\n\t\tlayers: {\n\t\t\tfriends: {label: \'Friends\', visible: true},\n\t\t\tmarkers: {label: \'Markers\', visible: true},\n\t\t\tradar: {label: \'Radar\', visible: false, cluster: true}\n\t\t}\n\t}"\n\tbn-event="mapcontextmenu: onMapContextMenu, mapshapecontextmenu: onShapeContextMenu"\n\t></div>\t\n',init:function(t,e,n,o,a,l,r){let{zoom:i,center:s,markers:c,layers:p}=n.getData();console.log("appData",n.getData()),c=c||{},p=p||{};const u=$$.viewController(t,{data:{center:s||{lat:48.39,lng:-4.486},zoom:i||13,watchID:null,show1:function(){return null==this.watchID?"visible":"hidden"}},events:{onShapeContextMenu:function(t,e){const{id:n,cmd:o}=e;if("remove"==o)b.removeShape(n),delete c[n];else if("zoom"==o){const t=b.getShapeInfo(n);b.flyTo(t.latlng,18)}else if("edit"==o){const t=b.getShapeInfo(n);console.log({id:n,info:t}),$$.ui.showForm({title:"Edit Marker",fields:{label:{label:"Label:",input:"input",value:t.popup.content,attrs:{type:"text"}},color:{label:"Color:",input:"select",value:t.icon.color,items:["Red","Green","Blue"]}}},e=>{console.log(e);const{label:o,color:a}=e;if($.extend(t.icon,t.icon,{color:a}),t.popup.content=o,b.updateShape(n,t),"markers"==t.layer)c[n].tooltip=o,c[n].color=a;else{console.log(p[t.layer]);const e=p[t.layer].find(t=>t.shapeId==n);console.log({saveInfo:e}),e.label=o,e.color=a}f()})}},onMapContextMenu:async function(t,e){const{latlng:n}=e;$$.ui.showForm({title:"Add Marker",fields:{label:{label:"Label:",input:"input",attrs:{type:"text"}},color:{label:"Color:",input:"select",items:["Red","Green","Blue"],value:"Green"}}},t=>{console.log(t);const{label:e,color:o}=t,a="ID"+Date.now();m(a,n,e,null,o),c[a]={latlng:n,tooltip:e,color:o},f()})},onAddMarker:function(){console.log("Add Marker"),$$.ui.showForm({title:"Add Marker",fields:{lat:{label:"Latitude: ",input:"input",attrs:{type:"number",step:"any"}},lng:{label:"Longitude: ",input:"input",attrs:{type:"number",step:"any"}},label:{label:"Label:",input:"input",attrs:{type:"text"}},color:{label:"Color:",input:"select",items:["Red","Green","Blue"],value:"Green"}}},t=>{console.log(t)})},onImportKml:function(){console.log("onInportKml"),l.openFile("Import KML",{filterExtension:"kml"},async t=>{console.log("data",t);try{const e=await r.post("/importKml",t);console.log("kml",e),o.pushPage("importKml",{title:"Import KML",props:{kml:e},onReturn:function({indexes:t,layerLabel:n}){console.log({indexes:t,layerLabel:n}),b.addLayer(n,{label:n,visible:!0,openPopupOnActivate:!0}),p[n]=[];for(const o of t){const{Point:t,name:a}=e[o],[l,r]=t.coordinates.split(",").map(t=>parseFloat(t));console.log({name:a,lng:l,lat:r}),m("ID"+Date.now(),{lat:r,lng:l},a,n),p[n].push({lat:r,lng:l,label:a})}f()}})}catch(t){console.log("Error",t),$$.ui.showAlert({title:"Error",content:t})}})},onImportOSMObject:function(){console.log("onImportOSMObject"),$$.ui.showForm({title:"Import OSM Object",fields:{objectId:{label:"ObjectID",input:"input",attrs:{type:"number"}},type:{label:"Type",input:"select",value:"relation",items:["relation","way"]},color:{label:"Color",input:"select",value:"Green",items:["Red","Green","Blue"]}}},t=>{console.log({data:t});const{objectId:e,color:n,type:o}=t;!async function(t,e,n){console.log("addObjectToDatabase",{objectId:t,type:e});try{let o=await r.post("/importOSMObject",{objectId:t,type:e});console.log({geoData:o}),b.addGeoData(o,"markers",{style:{color:n},onPopup:t=>t.properties.name})}catch(t){console.error(t)}}(e,o,n)})},onImportObjectFromDatabase:async function(){let t=await r.get("/osmObject");t=t.map(t=>({label:t.name,value:t._id})).sort((t,e)=>t.label.localeCompare(e.label)),console.log("onImportObjectFromDatabase",t),0!=t.length?$$.ui.showForm({title:"Import OSM Object",fields:{id:{label:"Object Name:",input:"select",items:t},color:{label:"Color",input:"select",value:"Green",items:["Red","Green","Blue"]}}},t=>{console.log({data:t});const{id:e,color:n}=t;!async function(t,e){try{let{geoData:n}=await r.get(`/osmObject/${t}`);console.log({geoData:n}),b.addGeoData(n,"markers",{style:{color:e},onPopup:t=>t.properties.name})}catch(t){console.error(t)}}(e,n)}):$$.ui.showAlert({content:"The database is empty!"})},onSearch:function(){o.pushPage("searchPage",{title:"Search City",onReturn:function(t){const e={lat:t.lat,lng:t.lon};try{b.updateShape("marker",{latlng:e})}catch(t){b.addShape("marker",{type:"marker",latlng:e})}b.flyTo(e,13)}})},onLocationChange:function(t,e){if(e){navigator.geolocation.getCurrentPosition(g);const t=navigator.geolocation.watchPosition(g,h,{enableHighAccuracy:!0});u.setData({watchID:t})}else navigator.geolocation.clearWatch(u.model.watchID),u.setData({watchID:null}),b.removeShape("location")}}}),b=u.scope.map,d={"Radar fixe":l.assetsUrl("radar_fixe.png"),"Radar feu rouge":l.assetsUrl("radar_feu_rouge.png"),"Radar discriminant":l.assetsUrl("radar_discriminant.png"),"Radar Vitesse Moyenne":l.assetsUrl("radar_vitesse_moyenne.png")};function m(t,e,n,o,a){const l={type:"marker",layer:o||"markers",latlng:e,icon:{type:"font",className:"far fa-dot-circle",color:a||"green",fontSize:20},popup:{content:n,className:"myToolTip",closeButton:!1},contextMenu:{remove:{name:"Remove",iconCls:"fas fa-trash-alt w3-text-blue"},zoom:{name:"Zoom",iconCls:"fas fa-search-plus w3-text-blue"},edit:{name:"Edit",iconCls:"fa-solid fa-pen w3-text-blue"}}};b.addShape(t,l)}function h(){console.log("geolocation error")}function g(t){const e={lat:t.coords.latitude,lng:t.coords.longitude};try{b.updateShape("location",{latlng:e})}catch(t){b.addShape("location",{type:"marker",icon:{type:"font",className:"far fa-dot-circle",color:"red",fontSize:20},latlng:e})}b.panTo(e)}function f(){return n.saveData({zoom:b.getZoom(),center:b.getCenter(),markers:c,layers:p})}!async function(){for(const[t,e]of Object.entries(c))m(t,e.latlng,e.tooltip,null,e.color);for(const[t,e]of Object.entries(p)){b.addLayer(t,{label:t,visible:!1,openPopupOnActivate:!0});for(const n of e){const{lat:e,lng:o,label:a,color:l}=n,r="ID_"+a.toUpperCase().replaceAll(" ","_");m(r,{lat:e,lng:o},a,t,l),n.shapeId=r}}const t=await a.getRadar();console.log({radars:t}),b.addGeoData(t,"radar",{pointToLayer:(t,e)=>{const n=d[t.properties.type];if(null!=n){const t={iconSize:[91,99],iconAnchor:[40,99],popupAnchor:[20,-85],iconUrl:n};return b.createMarkerIcon(e,t)}},onPopup:t=>{let e=[];t.properties.route&&e.push(t.properties.route),e.push(t.properties.type);const{speed:n}=t.properties;if("number"==typeof n){const t=l.assetsUrl(`vitesse-${n}.png`);e.push(`<img src="${t}" style="margin-top: 10px">`)}return`<b>${e.join("<br>")}</b>`}})}(),e.register("breizbot.friendPosition",t=>{if(t.hist)return;const e=t.data,n=new Date(t.time).toLocaleTimeString("fr-FR"),o="friends."+e.userName,a=e.userName+"<br>"+n;try{b.updateShape(o,{latlng:e.coords,popupContent:a})}catch(t){b.addShape(o,{type:"marker",layer:"friends",latlng:e.coords,icon:{type:"font",className:"far fa-user",color:"blue",fontSize:20},popup:{content:a,className:"myToolTip",closeButton:!1}})}}),e.register("homebox.map.updateShape.*",t=>{const e=t.topic.split(".").pop(),n=t.data;if(null!=n)try{b.updateShape(e,n)}catch(t){b.addShape(e,n)}else b.removeShape(e)}),this.onAppExit=function(){return f()}}}),$$.control.registerControl("searchPage",{template:'<form bn-event="submit: onSubmit" bn-show="show1">\n\t<div class="inputgroup">\n\t\t<label>Country:</label>\n\t\t<span \n\t\t\tbn-control="brainjs.combobox"\n\t\t\tbn-data="{items: countries}"\n\t\t\tbn-val="currentCountry"\n\t\t\tbn-update="comboboxchange"\n\t\t></span>\t\t\t\n\t</div>\n\t<div bn-control="brainjs.inputgroup" class="inputgroup">\n\t\t<label>City</label>\n\t\t<input type="text" name="search" required="">\n\t</div>\n\t<div>\n\t\t<button class="w3-button w3-blue" type="submit">\n\t\t\t<i class="fa fa-search"></i>\n\t\t</button>\n\t</div>\n\n</form>\n\n<div>\n\t<strong bn-text="message"></strong>\n</div>\n\n<div bn-show="running">\n\t<i class="fa fa-spinner fa-pulse"></i> Running...\n</div>\n\n<div class="scrollPanel" bn-show="show2">\n\t<ul class="w3-ul w3-border w3-white" \n\t\tbn-event="click.w3-bar: onItemClick"\n\t\tbn-each="cities"\n\t\tbn-show="show3"\n\t\t>\n\t\t<li class="w3-bar">\n\n\t\t\t<div class="w3-bar-item">\n\t\t\t\t<span bn-text="$scope.$i.name"></span>\n\t\t\t</div>\n\t\t</li>\n\t</ul>\t\n</div>\n\t',deps:["breizbot.cities","breizbot.pager"],init:function(t,e,n){const o=$$.viewController(t,{data:{countries:[],currentCountry:"",cities:[],message:"",running:!1,show1:function(){return this.countries.length>0},show2:function(){return this.countries.length>0&&this.cities.length>0},show3:function(){return this.cities.length>0}},events:{onSubmit:async function(t){t.preventDefault(),console.log("onSubmit");const{search:n}=$(this).getFormData();o.setData({message:"",running:!0});const a=await e.getCities(o.model.currentCountry,n);console.log("cities",a);const l=a.length;o.setData({running:!1,cities:a,message:0==l?"No result":`${l} match`})},onItemClick:function(t){const e=$(this).index(),a=o.model.cities[e];console.log("onItemClick",a),n.popPage(a.coord)}}});!async function(){const t=await e.getCountries();o.setData({countries:t,currentCountry:"FR"})}()}}),$$.control.registerControl("importKml",{template:'<form bn-event="submit: onSubmit">\n    <label>Layer Name</label>\n    <input type="text" name="text" required>\n    <input type="submit"  value="Submit" hidden bn-bind="submit"> \n</form>\n<div class="scrollPanel">\n    <table class="w3-table-all w3-small">\n        <thead>\n            <tr>\n                <th>\n                    <input type="checkbox" checked bn-event="click: onSelectChange">\n                </th>\n                <th>Name</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody bn-each="kml">\n            <tr>\n                <td>\n                    <input type="checkbox" checked class="check">\n                </td>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.description"></td>\n\n            </tr>\n        </tbody>\n    </table>\n</div>\n',deps:["breizbot.pager"],props:{kml:null},init:function(t,e){const{kml:n}=this.props,o=$$.viewController(t,{data:{kml:n},events:{onSelectChange:function(){const e=$(this).prop("checked");console.log("onSelectChange",e),t.find(".check").prop("checked",e)},onSubmit:function(n){n.preventDefault();const o=$(this).getFormData();console.log("onSubmit",o);const a=[];t.find(".check").each(function(t){$(this).prop("checked")&&a.push(t)}),e.popPage({indexes:a,layerLabel:o.text})}}});this.getButtons=function(){return{apply:{title:"Apply",icon:"fas fa-check",onClick:function(){o.scope.submit.click()}}}}}});