$$.control.registerControl("rootPage",{template:'<div class="scrollPanel">\n\t<ul class="w3-ul w3-border w3-white" \n        bn-each="accounts"\n        bn-event="contextmenuchange.w3-bar: onContextMenu, click.w3-bar: onItemClick"\n\t\tbn-show="hasAccounts"\n\t\t>\n\t\t<li class="w3-bar" bn-control="brainjs.contextmenu" bn-data="{items: {\n\t\t\t\tedit: {\n\t\t\t\t\tname: \'Edit\',\n\t\t\t\t\ticon: \'fas fa-edit\'\n\t\t\t\t},\n\t\t\t\tdelete: {\n\t\t\t\t\tname: \'Delete\',\n\t\t\t\t\ticon: \'fas fa-trash-alt\'\n\t\t\t\t},\n\t\t\t\trecurringTrans: {\n\t\t\t\t\tname: \'Recurring Transactions\',\n\t\t\t\t\ticon: \'fas fa-history\'\n\t\t\t\t},\n\t\t\t\tsyntheses: {\n\t\t\t\t\tname: \'Syntheses\',\n\t\t\t\t\ticon: \'fas fa-th\'\n\t\t\t\t},\n\t\t\t\tbalance: {\n\t\t\t\t\tname: \'Last Statement Balance\',\n\t\t\t\t\ticon: \'fas fa-handshake\'\n\t\t\t\t}\n\t\t}}">\n\n\n\t\t\t<div class="w3-bar-item">\n\t\t\t\t<div class="info">\n\t\t\t\t\t<strong bn-text="$scope.$i.name"></strong><br>\n\t\t\t\t\t<span class="w3-right" bn-text="formatAmount"></span>\t\n\t\t\t\t</div>\n\t\t\t\t<div class="synthesis">\n\t\t\t\t\t<div class="w3-text-grey">Current Month Synthesis</div>\n\t\t\t\t\t<div class="w3-text-green">\n\t\t\t\t\t\t<label>Income</label>\n\t\t\t\t\t\t<span bn-text="formatIncome"></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="w3-text-red">\n\t\t\t\t\t\t<label>Expenses</label>\n\t\t\t\t\t\t<span bn-text="formatExpenses"></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label>Difference</label>\n\t\t\t\t\t\t<span bn-text="getDifference"></span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</li>\n\t</ul>\t\t\n\n</div>',deps:["breizbot.pager","breizbot.http"],init:function(t,n,e){const a={delete:function(t){const n=t._id.toString();$$.ui.showConfirm({title:"Delete Account",content:"Are you sure ?"},async()=>{await e.delete(`/account/${n}`),i()})},edit:function(t){const a=t._id.toString();n.pushPage("addAccount",{title:"Edit Account",props:{formData:t},onReturn:async function(n){const o=$.extend(t,n);delete o._id,delete o.synthesis,await e.put(`/account/${a}`,o),i()}})},recurringTrans:function(t){const e=t._id.toString();n.pushPage("recurringTransactions",{title:`Recurring Transactions: ${t.name}`,props:{accountId:e},onBack:function(){i()}})},syntheses:async function(t){const a=t._id.toString(),o=await e.get(`/account/${a}/syntheses`,{year:(new Date).getFullYear()});n.pushPage("syntheses",{title:"Syntheses",props:{syntheses:o}})},balance:async function(t){const a=t._id.toString(),o=await e.get(`/account/${a}/unclearedTransactions`);n.pushPage("unclearedTransactions",{title:"Last Statement Balance Transactions",props:{transactions:o,accountId:a}})}},o=$$.viewController(t,{data:{accounts:[],formatAmount:function(t){return t.$i.finalBalance.toFixed(2)},hasAccounts:function(){return this.accounts.length>0},getDifference:function(t){const{income:n,expenses:e}=t.$i.synthesis;return(n-e).toFixed(2)},formatIncome:function(t){return t.$i.synthesis.income.toFixed(2)},formatExpenses:function(t){return t.$i.synthesis.expenses.toFixed(2)}},events:{onAddAccount:function(){console.log("onAddAccount"),n.pushPage("addAccount",{title:"Add Account",onReturn:async function(t){await e.post("/account",t),i()}})},onContextMenu:async function(t,n){const e=$(this).index(),i=o.model.accounts[e],s=a[n.cmd];"function"==typeof s&&s(i)},onItemClick:function(t){const e=$(this).index(),a=o.model.accounts[e];n.pushPage("transactions",{title:`Transactions: ${a.name}`,props:{accountId:a._id.toString()},onBack:function(){i()}})}}});async function i(){const t=await e.get("/account",{synthesis:1});o.setData({accounts:t})}i()}}),$$.control.registerControl("addAccount",{template:'<div>\n    <form bn-event="submit: onSubmit" bn-form="formData">\n        <label>Account Name</label>\n        <input type="text" name="name" required>\n    \n        <label>Currency</label>\n        <div bn-control="brainjs.combobox" bn-data="{\n            items: [\'euro\', \'dollar\']\n        }" name="currency"></div>\n    \n        <label>Initial Balance</label>\n        <input type="number" required name="initialBalance" step="0.01">\n\n        <label>Held at</label>\n        <input type="text" name="heldAt">\n        \n    \n    \n        <input type="submit" bn-bind="submit" hidden>\n    </form>\n</div>\n',deps:["breizbot.pager"],props:{formData:{currency:"euro"}},init:function(t,n){const{formData:e}=this.props,a=$$.viewController(t,{data:{formData:e},events:{onSubmit:function(t){t.preventDefault();const e=$(this).getFormData();n.popPage(e)}}});this.getButtons=function(){return{apply:{icon:"fa fa-check",title:"Apply",onClick:function(){a.scope.submit.click()}}}}}}),$$.control.registerControl("addTransaction",{template:'<div class="scrollPanel">\n    <form bn-form="formData" bn-event="submit: onSubmit">\n\n        <div class="group">\n            <label bn-text="getDateLabel"></label>\n            <div>\n                <input bn-control="brainjs.datepicker" name="date">    \n            </div>\n    \n        </div>\n\n        <div class="group" bn-show="isRecurring">\n            <label>Periodicity</label>\n            <div>\n                <div bn-control="brainjs.combobox" name="period" bn-prop="{required: isReccuring}" bn-data="{items: [\n                \'Monthly\', \'Yearly\']}"> </div>   \n            </div>\n    \n        </div>\n\n        <div class="group">\n            <label>Transaction Type</label>\n            <div bn-control="brainjs.radiogroup" bn-update="radiogroupchange" bn-val="type">\n                <div bn-control="brainjs.inputgroup">\n                    <input type="radio" value="debit"><label>Debit</label>\n                </div>\n                <div bn-control="brainjs.inputgroup">\n                    <input type="radio" value="credit"><label>Credit</label>\n                </div>\n                <div bn-control="brainjs.inputgroup" bn-show="isAdd">\n                    <input type="radio" value="transfer"><label>Transfer</label>\n                </div>\n            </div>    \n        </div>\n\n        <div class="group">\n            <label>Amount</label>\n            <div>\n                <input type="number" required name="amount" step=0.01>\n            </div>\n        </div>\n\n        <div class="group" bn-show="isTransfer">\n            <label>To Account</label>\n            <div>\n                <div bn-control="brainjs.combobox" bn-data="{items: accounts}" bn-val="toAccount" bn-update="comboboxchange"></div>\n            </div>\n        </div>      \n\n        <div class="group" bn-show="!isTransfer">\n            <label>Payee</label>\n            <div>\n                <input type="text" bn-prop="{required: !isTransfer}" name="payee" bn-control="brainjs.autocomplete" bn-data="{source: payees}">\n            </div>\n        </div>\n\n        <div class="group" bn-show="hasNumber">\n            <label>Number</label>\n            <div>\n                <input type="number" name="number" step="1" bn-bind="number">\n                <button type="button" class="w3-btn w3-blue" bn-event="click: onFindNextNumber">Next</button>\n            </div>\n        </div>\n\n        <div class="group" bn-show="!isTransfer">\n            <label>Category</label>\n            <div>\n                <input type="text" bn-prop="{required: !isTransfer}" name="category" bn-control="brainjs.autocomplete" bn-data="{source: categories}" bn-event="autocompleteselect: onCategoryChange">\n            </div>\n        </div>\n\n        <div class="group" bn-show="!isTransfer">\n            <label>Subcategory</label>\n            <div>\n                <input type="text" name="subcategory" bn-control="brainjs.autocomplete" bn-data="{source: subcategories}">\n            </div>\n        </div>\n\n        <div class="group">\n            <label>Note</label>\n            <div>\n                \x3c!-- <i class="fa fa-clipboard"></i> --\x3e\n                <input type="text" name="memo">\n            </div>\n        </div>\n\n        <input type="submit" hidden bn-bind="submit">\n    </form>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{accountId:null,isAdd:!1,isRecurring:!1,formData:null},init:function(t,n,e){const{accountId:a,formData:o,isAdd:i,isRecurring:s}=this.props;let c="credit",r=$.extend({},o);null!=o?r.amount<0&&(r.amount*=-1,c="debit"):(c="debit",r.period="Monthly");const l=$$.viewController(t,{data:{formData:r,categories:[],payees:[],subcategories:[],type:c,isAdd:i,isRecurring:s,toAccount:"",isTransfer:function(){return"transfer"===this.type},getDateLabel:function(){return this.isRecurring?"Next Occurence":"Date"},hasNumber:function(){return!this.isRecurring&&!this.isTransfer()}},events:{onSubmit:function(t){t.preventDefault();const e=$(this).getFormData(),{date:a}=e,{type:o,toAccount:i}=l.model;"transfer"==o&&(e.payee=i,e.category="virement",e.amount*=-1),"debit"==o&&(e.amount*=-1),s||delete e.period;let c=a.getMonth()+1;c<10&&(c="0"+c);let r=a.getDate();r<10&&(r="0"+r),e.date=`${a.getFullYear()}-${c}-${r}T00:00:00`,isNaN(e.number)&&delete e.number,n.popPage(e)},onCategoryChange:async function(t,n){const o=await e.get(`/account/${a}/subcategories`,{category:n.item.value});l.setData({subcategories:o})},onFindNextNumber:async function(){const{number:t}=await e.get(`/account/${a}/lastNumber`);l.scope.number.val(t+1)}}});!async function(){const t=await e.get(`/account/${a}/categories`),n=await e.get(`/account/${a}/payees`);let o=await e.get("/account");o=o.filter(t=>t._id.toString()!=a).map(t=>t.name),l.setData({toAccount:o[0]}),console.log("accounts",o),l.setData({payees:n,categories:t,accounts:o})}(),this.getButtons=function(){return{apply:{title:"Appply",icon:"fa fa-check",onClick:function(){l.scope.submit.click()}}}}}}),$$.control.registerControl("recurringTransactions",{template:'<div class="scrollPanelTable">\n\t<table class="w3-table-all w3-hoverable w3-small">\n\t\t<thead>\n\t\t\t<tr>\n                <th>Payee</th>\n                <th>Category</th>\n\t\t\t\t<th>Next Occurence</th>\n\t\t\t\t<th>Periodicity</th>\n                <th>Amount</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody bn-each="transactions" bn-event="contextmenuchange.item: onItemContextMenu">\n\t\t\t<tr class="item" bn-control="brainjs.contextmenu" bn-data="{items: {\n\t\t\t\tdel: {\n\t\t\t\t\tname: \'Delete\',\n\t\t\t\t\ticon: \'fas fa-trash-alt\'\n\t\t\t\t},\n\t\t\t\tedit: {\n\t\t\t\t\tname: \'Edit\',\n\t\t\t\t\ticon: \'fas fa-edit\'\n\t\t\t\t},\n\t\t\t\tenterNextOccur: {\n\t\t\t\t\tname: \'Enter Next Occurence\',\n\t\t\t\t\ticon: \'fas fa-external-link-alt\'\n\t\t\t\t},\n\t\t\t\tignoreNextOccur: {\n\t\t\t\t\tname: \'Skip Next Occurence\',\n\t\t\t\t\ticon: \'fas fa-forward\'\n\t\t\t\t}\n\t\t\t}}">\n                <td bn-text="$scope.$i.payee"></td>\n                <td>\n\t\t\t\t\t<span bn-text="$scope.$i.category"></span><br>\n\t\t\t\t\t<span bn-text="$scope.$i.subcategory"></span>\n\t\t\t\t</td>\n\t\t\t\t<td bn-text="formatDate" class="date"></td>\n\t\t\t\t<td bn-text="$scope.$i.period"></td>\n\t\t\t\t<td bn-text="formatAmount" class="amount" bn-style="{color: getAmountColor}"></td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{accountId:null},init:function(t,n,e){const{accountId:a}=this.props,o=$$.viewController(t,{data:{transactions:[],formatAmount:function(t){return t.$i.amount.toFixed(2)},formatDate:function(t){return new Date(t.$i.date).toLocaleDateString()},getAmountColor:function(t){return t.$i.amount<0?"red":"black"}},events:{onItemContextMenu:async function(t,s){const c=$(this).index(),{cmd:r}=s,l=o.model.transactions[c],u=l._id.toString();"del"==r?$$.ui.showConfirm({title:"Delete Transaction",content:"Are you sure ?"},async()=>{await e.delete("/transaction/",l),i()}):"edit"==r?n.pushPage("addTransaction",{title:"Edit Recurring Transaction",props:{formData:l,accountId:a,isRecurring:!0},onReturn:async function(t){console.log("onReturn",t),await e.put(`/account/${a}/recurringTransactions/${u}`,t),i()}}):"enterNextOccur"==r?(await e.post(`/account/${a}/recurringTransactions/${u}/enterNextOccurence`),i()):"ignoreNextOccur"==r&&(await e.post(`/account/${a}/recurringTransactions/${u}/ignoreNextOccurence`),i())}}});async function i(){const t=await e.get(`/account/${a}/recurringTransactions`);o.setData({transactions:t})}i(),this.getButtons=function(){return{add:{title:"Add Recurring Transaction",icon:"fa fa-plus",onClick:function(){n.pushPage("addTransaction",{title:"Add Recurring Transaction",props:{accountId:a,isAdd:!0,isRecurring:!0},onReturn:async function(t){console.log("onReturn",t),await e.post(`/account/${a}/recurringTransactions`,t),i()}})}},enterAll:{title:"Enter all transactions of current month",icon:"fa fa-external-link-alt",onClick:async function(){const{inserted:t}=await e.post(`/account/${a}/recurringTransactions/enterAllOccurenceOfCurrentMonth`),n=t>0?`${t} transactions inserted`:"no transaction to insert";await i(),$$.ui.showAlert({title:"Current month transactions",content:n})}}}}}}),$$.control.registerControl("syntheses",{template:'<div>\n    <table class="w3-table-all w3-small">\n        <thead>\n            <tr bn-each="months">\n                <th bn-text="$scope.$i"></th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr bn-each="syntheses" bn-index="idx">\n                <td bn-text="formatIncome"></td>\n            </tr>\n\n            <tr bn-each="syntheses" bn-index="idx">\n                <td bn-text="formatExpenses"></td>\n            </tr>\n\n            <tr bn-each="syntheses" bn-index="idx">\n                <td bn-text="formatDifference" bn-style="{color: getDiffColor}"></td>\n            </tr>\n        </tbody>    \n    </table>\n</div>',deps:["breizbot.http"],props:{syntheses:[]},init:function(t,n){const{syntheses:e}=this.props,a=e.reduce((t,n)=>t+n.income,0),o=e.reduce((t,n)=>t+n.expenses,0);e.unshift({}),e.push({income:a,expenses:o});$$.viewController(t,{data:{syntheses:e,months:["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","Total"],formatIncome:function(t){return 0==t.idx?"Income":this.syntheses[t.idx].income.toFixed(2)},formatExpenses:function(t){return 0==t.idx?"Expenses":this.syntheses[t.idx].expenses.toFixed(2)},formatDifference:function(t){const{income:n,expenses:e}=this.syntheses[t.idx];return 0==t.idx?"Difference":(n-e).toFixed(2)},getDiffColor:function(t){return 0==t.idx?"black":parseInt(this.formatDifference(t))<0?"red":"green"}}})}}),$$.control.registerControl("transactions",{template:'<div class="scrollPanelTable">\n\t<table class="w3-table-all w3-hoverable w3-small">\n\t\t<thead>\n\t\t\t<tr>\n                <th>Payee</th>\n                <th>Category</th>\n\t\t\t\t<th>Date</th>\n\t\t\t\t<th>S</th>\n\t\t\t\t<th>Number</th>\n                <th>Amount</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody bn-each="transactions" bn-lazzy="getItems" bn-bind="transactions" bn-event="contextmenuchange.item: onItemContextMenu">\n\t\t\t<tr class="item" bn-control="brainjs.contextmenu" bn-data="{items: {\n\t\t\t\tdel: {\n\t\t\t\t\tname: \'Delete\',\n\t\t\t\t\ticon: \'fas fa-trash-alt\'\n\t\t\t\t},\n\t\t\t\tedit: {\n\t\t\t\t\tname: \'Edit\',\n\t\t\t\t\ticon: \'fas fa-edit\'\n\t\t\t\t}\n\t\t\t}}">\n                <td bn-text="$scope.$i.payee"></td>\n                <td>\n\t\t\t\t\t<span bn-text="$scope.$i.category"></span><br>\n\t\t\t\t\t<span bn-text="$scope.$i.subcategory"></span>\n\t\t\t\t</td>\n\t\t\t\t<td bn-text="formatDate" class="date"></td>\n\t\t\t\t<td bn-text="$scope.$i.clearedStatus"></td>\n\t\t\t\t<td bn-text="$scope.$i.number"></td>\n\t\t\t\t<td bn-text="formatAmount" class="amount" bn-style="{color: getAmountColor}"></td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{accountId:null},init:function(t,n,e){const{accountId:a}=this.props,o=$$.viewController(t,{data:{transactions:[],formatAmount:function(t){return t.$i.amount.toFixed(2)},formatDate:function(t){return new Date(t.$i.date).toLocaleDateString()},getItems:async function(t){return i(t)},getAmountColor:function(t){return t.$i.amount<0?"red":"black"}},events:{onItemContextMenu:function(t,i){const s=$(this).index(),{cmd:c}=i,r=o.model.transactions[s];if("del"==c)$$.ui.showConfirm({title:"Delete Transaction",content:"Are you sure ?"},async()=>{await e.delete("/transaction/",r),o.removeArrayItem("transactions",s,"transactions")});else if("edit"==c){const t=r._id.toString();n.pushPage("addTransaction",{title:"Edit Transaction",props:{formData:r,accountId:a},onReturn:async function(n){await e.put(`/account/${a}/transaction/${t}`,n),n=$.extend(r,n),o.updateArrayItem("transactions",s,n,"transactions")}})}}}});async function i(t){t=t||0;const n=await e.get(`/account/${a}/transactions?offset=${t}`);if(0!=t)return o.model.transactions=o.model.transactions.concat(n),n;o.setData({transactions:n})}function s(){n.pushPage("breizbot.files",{title:"Import transactions from QIF file",props:{filterExtension:"qif"},events:{fileclick:function(t,e){n.popPage(e)}},onReturn:async function(t){const n=t.rootDir+t.fileName;await e.post(`/account/${a}/importTransactions`,{fileName:n}),i()}})}i(),this.getButtons=function(){return{import:{title:"import from QIF file",icon:"fa fa-download",onClick:function(){$$.ui.showConfirm({title:"Import Transactions",content:"This operation will remove all your current transactions<br><br>Are you sure ?"},s)}},add:{title:"Add Transaction",icon:"fa fa-plus",onClick:function(){n.pushPage("addTransaction",{title:"Add Transaction",props:{accountId:a,isAdd:!0},onReturn:async function(t){const{insertedId:n}=await e.post(`/account/${a}/transaction`,t);t._id=n,o.insertArrayItemAfter("transactions",0,t,"transactions")}})}}}}}}),$$.control.registerControl("unclearedTransactions",{template:'<div class="inputForm">\n\t<div class="left">\n\t\t<div bn-control="brainjs.inputgroup">\n\t\t\t<label>Initial Balance</label>\n\t\t\t<input type="number" step="0.01" bn-val="initialBalance" bn-update="change" class="w3-border w3-round">\n\t\t</div>\n\t\t<div bn-control="brainjs.inputgroup">\n\t\t\t<label>Final Balance</label>\n\t\t\t<input type="number" step="0.01" bn-val="finalBalance" bn-update="change" class="w3-border w3-round">\n\t\t</div>\t\n\t</div>\n\t<div class="difference" bn-bind="difference">\n\t\t<label>Difference</label>\n\t\t<div bn-text="getDifference"></div>\n\t</div>\n\n</div>\n<div class="scrollPanelTable">\n\t<table class="w3-table-all w3-hoverable w3-small">\n\t\t<thead>\n\t\t\t<tr>\n                <th>Payee</th>\n                <th>Category</th>\n\t\t\t\t<th>Date</th>\n\t\t\t\t<th>S</th>\n\t\t\t\t<th>Number</th>\n                <th>Amount</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody bn-each="transactions" bn-lazzy="20" bn-bind="transactions" bn-event="contextmenuchange.item: onItemContextMenu, click.w3-check: onCheckClick">\n\t\t\t<tr class="item">\n                <td bn-text="$scope.$i.payee"></td>\n                <td>\n\t\t\t\t\t<span bn-text="$scope.$i.category"></span><br>\n\t\t\t\t\t<span bn-text="$scope.$i.subcategory"></span>\n\t\t\t\t</td>\n\t\t\t\t<td bn-text="formatDate" class="date"></td>\n\t\t\t\t<td>\n\t\t\t\t\t<input type="checkbox" class="w3-check" bn-val="isChecked">\n\t\t\t\t</td>\n\t\t\t\t<td bn-text="$scope.$i.number"></td>\n\t\t\t\t<td bn-text="formatAmount" class="amount" bn-style="{color: getAmountColor}"></td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{transactions:[],accountId:null},init:function(t,n,e){const{transactions:a,accountId:o}=this.props,i=a.reduce((t,n)=>"P"===n.clearedStatus?t+n.amount:t,0),s=$$.viewController(t,{data:{transactions:a,initialBalance:0,finalBalance:0,checkedAmount:i,getDifference:function(){return(this.finalBalance-this.initialBalance-this.checkedAmount).toFixed(2)},formatAmount:function(t){return t.$i.amount.toFixed(2)},formatDate:function(t){return new Date(t.$i.date).toLocaleDateString()},getAmountColor:function(t){return t.$i.amount<0?"red":"black"},isChecked:function(t){return"P"===t.$i.clearedStatus}},events:{onCheckClick:function(){let t=c().reduce((t,n)=>t+n.amount,0);s.setData({checkedAmount:t})}}});function c(){const t=s.scope.transactions.find(".w3-check:checked"),n=[];return t.each(function(){const t=$(this).closest("tr").index();n.push(s.model.transactions[t])}),n}this.getButtons=function(){return{apply:{title:"Apply",icon:"fa fa-check",onClick:async function(){const t=0==parseInt(s.model.getDifference())?"X":"P",a=c().map(t=>t._id.toString());await e.put(`/account/${o}/unclearedTransactions`,{ids:a,clearedStatus:t}),n.popPage()}}}}}});