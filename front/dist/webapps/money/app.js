$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n\t<div>Accounts</div>\n\t<div>\n\t\t<button \n\t\tclass="w3-button" \n\t\ttitle="Global synthesis"\n        bn-event="click: onGlobalSynthesis"\n        bn-icon="fas fa-balance-scale-right"\n\t></button>\t\n\t<button \n\t\tclass="w3-button" \n\t\ttitle="Add Account"\n        bn-event="click: onAddAccount"\n        bn-icon="fa fa-plus"\n\t></button>\t\n\n\t</div>\n</div>\n\n<p bn-show="!hasAccounts">You have no account</p>\n\n<div class="scrollPanel">\n\t<ul class="w3-ul w3-border w3-white" \n        bn-each="accounts"\n        bn-event="contextmenuchange.w3-bar: onContextMenu, click.w3-bar: onItemClick"\n\t\tbn-show="hasAccounts"\n\t\t>\n\t\t<li class="w3-bar" bn-control="brainjs.contextmenu" bn-data="{items: {\n\t\t\t\tedit: {\n\t\t\t\t\tname: \'Edit\',\n\t\t\t\t\ticon: \'fas fa-edit\'\n\t\t\t\t},\n\t\t\t\tdelete: {\n\t\t\t\t\tname: \'Delete\',\n\t\t\t\t\ticon: \'fas fa-trash-alt\'\n\t\t\t\t},\n\t\t\t\trecurringTrans: {\n\t\t\t\t\tname: \'Recurring Transactions\',\n\t\t\t\t\ticon: \'fas fa-history\'\n\t\t\t\t},\n\t\t\t\tsyntheses: {\n\t\t\t\t\tname: \'Syntheses\',\n\t\t\t\t\ticon: \'fas fa-th\',\n\t\t\t\t\titems: {\n\t\t\t\t\t\tsynthBalance: {\n\t\t\t\t\t\t\tname: \'Income vs expenses\',\n\t\t\t\t\t\t\ticon: \'fas fa-balance-scale-right\'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsynthCategories: {\n\t\t\t\t\t\t\tname: \'Categories\',\n\t\t\t\t\t\t\ticon: \'fas fa-tags\'\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbalance: {\n\t\t\t\t\tname: \'Last Statement Balance\',\n\t\t\t\t\ticon: \'fas fa-handshake\'\n\t\t\t\t},\n\t\t\t\tcheckBalance: {\n\t\t\t\t\tname: \'Check Balance\',\n\t\t\t\t\ticon: \'fas fa-calendar-check\'\n\t\t\t\t}\n\t\t}}">\n\n\n\t\t\t<div class="w3-bar-item">\n\t\t\t\t<div class="info">\n\t\t\t\t\t<strong bn-text="$scope.$i.name"></strong><br>\n\t\t\t\t\t<span class="w3-right" bn-text="formatAmount"></span>\t\n\t\t\t\t</div>\n\t\t\t\t<div class="synthesis">\n\t\t\t\t\t<div class="w3-text-grey">Current Month Synthesis</div>\n\t\t\t\t\t<div class="w3-text-green">\n\t\t\t\t\t\t<label>Income</label>\n\t\t\t\t\t\t<span bn-text="formatIncome"></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="w3-text-red">\n\t\t\t\t\t\t<label>Expenses</label>\n\t\t\t\t\t\t<span bn-text="formatExpenses"></span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label>Difference</label>\n\t\t\t\t\t\t<span bn-text="getDifference"></span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</li>\n\t</ul>\t\t\n\n</div>',deps:["breizbot.pager","breizbot.http"],init:function(t,n,e){const a={delete:function(t){const n=t._id.toString();$$.ui.showConfirm({title:"Delete Account",content:"Are you sure ?"},async()=>{await e.delete(`/account/${n}`),i()})},edit:function(t){const a=t._id.toString();n.pushPage("addAccount",{title:"Edit Account",props:{formData:t},onReturn:async function(n){const o=$.extend(t,n);delete o._id,delete o.synthesis,await e.put(`/account/${a}`,o),i()}})},recurringTrans:function(t){const e=t._id.toString();n.pushPage("recurringTransactions",{title:`Recurring Transactions: ${t.name}`,props:{accountId:e},onBack:function(){i()}})},synthBalance:async function(t){const e=t._id.toString();n.pushPage("syntheses",{title:"Syntheses",props:{accountId:e}})},synthCategories:async function(t){const e=t._id.toString();n.pushPage("synthCategories",{title:"Syntheses by categories",props:{accountId:e}})},balance:async function(t){const a=t._id.toString(),o=await e.get(`/account/${a}/unclearedTransactions`),i=await e.get(`/account/${a}/lastStatementInfo`);console.log("lastStatementInfo",i),n.pushPage("unclearedTransactions",{title:"Last Statement Balance Transactions",props:{transactions:o,lastStatementInfo:i,accountId:a}})},checkBalance:async function(t){const n=t._id.toString(),a=await e.get(`/account/${n}/checkBalance`),o=t.initialBalance+a.totalTransactions;console.log("balance",o),Math.abs(t.finalBalance-o)>1e-4?$$.ui.showConfirm({title:"Check Balance",okText:"Fix Balance",content:`Stored Balance: ${t.finalBalance.toFixed(2)}<br>\n\t\t\t\t\t\tComputed Balance: ${o.toFixed(2)}`},async()=>{await e.put(`/account/${n}`,{finalBalance:parseFloat(o.toFixed(2))}),i()}):$$.ui.showAlert({title:"Check Balance",content:"All is OK"})}},o=$$.viewController(t,{data:{accounts:[],formatAmount:function(t){return t.$i.finalBalance.toFixed(2)},hasAccounts:function(){return this.accounts.length>0},getDifference:function(t){const{income:n,expenses:e}=t.$i.synthesis;return(n-e).toFixed(2)},formatIncome:function(t){return t.$i.synthesis.income.toFixed(2)},formatExpenses:function(t){return t.$i.synthesis.expenses.toFixed(2)}},events:{onGlobalSynthesis:async function(){n.pushPage("globalSynthesis",{title:"Global Synthesis"})},onAddAccount:function(){n.pushPage("addAccount",{title:"Add Account",onReturn:async function(t){await e.post("/account",t),i()}})},onContextMenu:async function(t,n){const e=$(this).index(),i=o.model.accounts[e],s=a[n.cmd];"function"==typeof s&&s(i)},onItemClick:function(t){const e=$(this).index(),a=o.model.accounts[e];n.pushPage("transactions",{title:`Transactions: ${a.name}`,props:{accountId:a._id.toString()},onBack:function(){i()}})}}});async function i(){const t=await e.get("/account",{synthesis:1});o.setData({accounts:t})}i()}}),$$.control.registerControl("addAccount",{template:'<div>\n    <form bn-event="submit: onSubmit" bn-form="formData">\n        <label>Account Name</label>\n        <input type="text" name="name" required>\n    \n        <label>Currency</label>\n        <div bn-control="brainjs.combobox" bn-data="{\n            items: [\'euro\', \'dollar\']\n        }" name="currency"></div>\n    \n        <label>Initial Balance</label>\n        <input type="number" required name="initialBalance" step="0.01">\n\n        <label>Held at</label>\n        <input type="text" name="heldAt">\n        \n    \n    \n        <input type="submit" bn-bind="submit" hidden>\n    </form>\n</div>\n',deps:["breizbot.pager"],props:{formData:{currency:"euro"}},init:function(t,n){const{formData:e}=this.props,a=$$.viewController(t,{data:{formData:e},events:{onSubmit:function(t){t.preventDefault();const e=$(this).getFormData();n.popPage(e)}}});this.getButtons=function(){return{apply:{icon:"fa fa-check",title:"Apply",onClick:function(){a.scope.submit.click()}}}}}}),$$.control.registerControl("addTransaction",{template:'<div class="scrollPanel">\n    <form bn-form="formData" bn-event="submit: onSubmit">\n\n        <div class="group">\n            <label bn-text="getDateLabel"></label>\n            <div>\n                <input bn-control="brainjs.datepicker" name="date">    \n            </div>\n    \n        </div>\n\n        <div class="group" bn-show="isRecurring">\n            <label>Periodicity</label>\n            <div>\n                <div bn-control="brainjs.combobox" name="period" bn-prop="{required: isReccuring}" bn-data="{items: [\n                \'Monthly\', \'Yearly\']}"> </div>   \n            </div>\n    \n        </div>\n\n        <div class="group">\n            <label>Transaction Type</label>\n            <div bn-control="brainjs.radiogroup" bn-update="radiogroupchange" bn-val="type">\n                <div bn-control="brainjs.inputgroup">\n                    <input type="radio" value="debit"><label>Debit</label>\n                </div>\n                <div bn-control="brainjs.inputgroup">\n                    <input type="radio" value="credit"><label>Credit</label>\n                </div>\n                <div bn-control="brainjs.inputgroup" bn-show="isAdd">\n                    <input type="radio" value="transfer"><label>Transfer</label>\n                </div>\n            </div>    \n        </div>\n\n        <div class="group">\n            <label>Amount</label>\n            <div>\n                <input type="number" required name="amount" step=0.01>\n            </div>\n        </div>\n\n        <div class="group" bn-show="isTransfer">\n            <label>To Account</label>\n            <div>\n                <div bn-control="brainjs.combobox" bn-data="{items: accounts}" bn-val="toAccount" bn-update="comboboxchange"></div>\n            </div>\n        </div>      \n\n        <div class="group" bn-show="!isTransfer">\n            <label>Payee</label>\n            <div>\n                <input type="text" bn-prop="{required: !isTransfer}" name="payee" bn-control="brainjs.autocomplete" bn-data="{source: payees}">\n            </div>\n        </div>\n\n        <div class="group" bn-show="hasNumber">\n            <label>Number</label>\n            <div>\n                <input type="number" name="number" step="1" bn-bind="number">\n                <button type="button" class="w3-btn w3-blue" bn-event="click: onFindNextNumber">Next</button>\n            </div>\n        </div>\n\n        <div class="group" bn-show="!isTransfer">\n            <label>Category</label>\n            <div>\n                <input type="text" bn-prop="{required: !isTransfer}" name="category" bn-control="brainjs.autocomplete" bn-data="{source: categories}" bn-event="autocompleteselect: onCategoryChange">\n            </div>\n        </div>\n\n        <div class="group" bn-show="!isTransfer">\n            <label>Subcategory</label>\n            <div>\n                <input type="text" name="subcategory" bn-control="brainjs.autocomplete" bn-data="{source: subcategories}">\n            </div>\n        </div>\n\n        <div class="group">\n            <label>Note</label>\n            <div>\n                \x3c!-- <i class="fa fa-clipboard"></i> --\x3e\n                <input type="text" name="memo">\n            </div>\n        </div>\n\n        <input type="submit" hidden bn-bind="submit">\n    </form>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{accountId:null,isAdd:!1,isRecurring:!1,formData:null},init:function(t,n,e){const{accountId:a,formData:o,isAdd:i,isRecurring:s}=this.props;let c="credit",r=$.extend({},o);null!=o?r.amount<0&&(r.amount*=-1,c="debit"):(c="debit",r.period="Monthly");const l=$$.viewController(t,{data:{formData:r,categories:[],payees:[],subcategories:[],type:c,isAdd:i,isRecurring:s,toAccount:"",isTransfer:function(){return"transfer"===this.type},getDateLabel:function(){return this.isRecurring?"Next Occurence":"Date"},hasNumber:function(){return!this.isRecurring&&!this.isTransfer()}},events:{onSubmit:function(t){t.preventDefault();const e=$(this).getFormData(),{date:a}=e,{type:o,toAccount:i}=l.model;"transfer"==o&&(e.payee=i,e.category="virement",e.amount*=-1),"debit"==o&&(e.amount*=-1),s||delete e.period;const c=new Date(Date.UTC(a.getFullYear(),a.getMonth(),a.getDate()));e.date=c.toISOString(),console.log("date",e.date),isNaN(e.number)&&delete e.number,n.popPage(e)},onCategoryChange:async function(t,n){const o=await e.get(`/account/${a}/subcategories`,{category:n.item.value});l.setData({subcategories:o})},onFindNextNumber:async function(){const{number:t}=await e.get(`/account/${a}/lastNumber`);l.scope.number.val(t+1)}}});!async function(){const t=await e.get(`/account/${a}/categories`),n=await e.get(`/account/${a}/payees`);let o=await e.get("/account");o=o.filter(t=>t._id.toString()!=a).map(t=>t.name),l.setData({toAccount:o[0]}),l.setData({payees:n,categories:t,accounts:o})}(),this.getButtons=function(){return{apply:{title:"Appply",icon:"fa fa-check",onClick:function(){l.scope.submit.click()}}}}}}),$$.control.registerControl("filteredTransactions",{template:'<div class="scrollPanel" bn-bind="scrollPanelTable">\n\t<table class="w3-table-all w3-hoverable w3-small">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>Date</th>\n\t\t\t\t<th>Payee</th>\n\t\t\t\t<th>Category</th>\n\t\t\t\t<th>Number</th>\n\t\t\t\t<th>Amount</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody bn-each="transactions" bn-index="trIndex">\n\t\t\t<tr>\n\t\t\t\t<td bn-text="formatDate" class="date"></td>\n\t\t\t\t<td bn-text="$scope.$i.payee"></td>\n\t\t\t\t<td bn-each="getInfo" bn-iter="info">\n\t\t\t\t\t<div bn-text="$scope.info"></div>\n\t\t\t\t</td>\n\t\t\t\t<td bn-text="$scope.$i.number"></td>\n\t\t\t\t<td bn-text="formatAmount" class="amount" bn-style="{color: getAmountColor}"></td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</div>',props:{transactions:[]},init:function(t){const{transactions:n}=this.props;$$.viewController(t,{data:{transactions:n,formatAmount:function(t){return t.$i.amount.toFixed(2)},formatDate:function(t){return new Date(t.$i.date).toLocaleDateString()},getAmountColor:function(t){return t.$i.amount<0?"red":"black"},getInfo:function(t){const n=[],{category:e,subcategory:a,memo:o}=t.$i;return n.push(e),""!=a&&n.push(a),""!=o&&n.push(o),n}}})}}),$$.control.registerControl("globalSynthesis",{template:'<div class="year">\n    <label>Year</label>\n    <div bn-control="brainjs.combobox" bn-data="{items: years}" bn-event="comboboxchange: onYearChange"></div>\n</div>\n\n<table class="w3-table-all w3-small">\n    <thead>\n        <tr bn-each="months">\n            <th bn-text="$scope.$i"></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr bn-each="syntheses" bn-index="idx">\n            <td bn-text="formatIncome"></td>\n        </tr>\n\n        <tr bn-each="syntheses" bn-index="idx">\n            <td bn-text="formatExpenses"></td>\n        </tr>\n\n        <tr bn-each="syntheses" bn-index="idx">\n            <td bn-text="formatDifference" bn-style="{color: getDiffColor}"></td>\n        </tr>\n    </tbody>\n</table>',deps:["breizbot.http"],init:function(t,n){const e=$$.viewController(t,{data:{syntheses:[],months:["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","Total"],years:[],formatIncome:function(t){return 0==t.idx?"Income":this.syntheses[t.idx].income.toFixed(2)},formatExpenses:function(t){return 0==t.idx?"Expenses":this.syntheses[t.idx].expenses.toFixed(2)},formatDifference:function(t){const{income:n,expenses:e}=this.syntheses[t.idx];return 0==t.idx?"Difference":(n-e).toFixed(2)},getDiffColor:function(t){return 0==t.idx?"black":parseInt(this.formatDifference(t))<0?"red":"green"}},events:{onYearChange:async function(t,n){e.setData({syntheses:[]}),a(parseInt($(this).getValue()))}}});async function a(t){const a=await n.get("/account/synthesis",{year:t}),o=a.reduce((t,n)=>t+n.income,0),i=a.reduce((t,n)=>t+n.expenses,0);a.unshift({}),a.push({income:o,expenses:i}),e.setData({syntheses:a})}!async function(){const t=(new Date).getFullYear(),{oldestYear:o}=await n.get("/account/oldestYearTransaction"),i=[];for(let n=t;n>=o;n--)i.push(n.toString());e.setData({years:i}),a(t)}()}}),$$.control.registerControl("recurringTransactions",{template:'<div class="scrollPanelTable">\n\t<table class="w3-table-all w3-hoverable w3-small">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>Next Occurence</th>\n                <th>Payee</th>\n                <th>Category</th>\n\t\t\t\t<th>Periodicity</th>\n                <th>Amount</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody bn-each="transactions" bn-event="contextmenuchange.item: onItemContextMenu">\n\t\t\t<tr class="item" bn-control="brainjs.contextmenu" bn-data="{items: {\n\t\t\t\tdel: {\n\t\t\t\t\tname: \'Delete\',\n\t\t\t\t\ticon: \'fas fa-trash-alt\'\n\t\t\t\t},\n\t\t\t\tedit: {\n\t\t\t\t\tname: \'Edit\',\n\t\t\t\t\ticon: \'fas fa-edit\'\n\t\t\t\t},\n\t\t\t\tenterNextOccur: {\n\t\t\t\t\tname: \'Enter Next Occurence\',\n\t\t\t\t\ticon: \'fas fa-external-link-alt\'\n\t\t\t\t},\n\t\t\t\tignoreNextOccur: {\n\t\t\t\t\tname: \'Skip Next Occurence\',\n\t\t\t\t\ticon: \'fas fa-forward\'\n\t\t\t\t}\n\t\t\t}}">\n\t\t\t<td bn-text="formatDate" class="date"></td>\n\t\t\t<td bn-text="$scope.$i.payee"></td>\n                <td>\n\t\t\t\t\t<span bn-text="$scope.$i.category"></span><br>\n\t\t\t\t\t<span bn-text="$scope.$i.subcategory"></span>\n\t\t\t\t</td>\n\t\t\t\t<td bn-text="$scope.$i.period"></td>\n\t\t\t\t<td bn-text="formatAmount" class="amount" bn-style="{color: getAmountColor}"></td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{accountId:null},init:function(t,n,e){const{accountId:a}=this.props,o=$$.viewController(t,{data:{transactions:[],formatAmount:function(t){return t.$i.amount.toFixed(2)},formatDate:function(t){return new Date(t.$i.date).toLocaleDateString()},getAmountColor:function(t){return t.$i.amount<0?"red":"black"}},events:{onItemContextMenu:async function(t,s){const c=$(this).index(),{cmd:r}=s,l=o.model.transactions[c],u=l._id.toString();"del"==r?$$.ui.showConfirm({title:"Delete Transaction",content:"Are you sure ?"},async()=>{await e.delete("/recurringTransactions/",l),i()}):"edit"==r?n.pushPage("addTransaction",{title:"Edit Recurring Transaction",props:{formData:l,accountId:a,isRecurring:!0},onReturn:async function(t){console.log("onReturn",t),await e.put(`/account/${a}/recurringTransactions/${u}`,t),i()}}):"enterNextOccur"==r?(await e.post(`/account/${a}/recurringTransactions/${u}/enterNextOccurence`),i()):"ignoreNextOccur"==r&&(await e.post(`/account/${a}/recurringTransactions/${u}/ignoreNextOccurence`),i())}}});async function i(){const t=await e.get(`/account/${a}/recurringTransactions`);o.setData({transactions:t})}i(),this.getButtons=function(){return{add:{title:"Add Recurring Transaction",icon:"fa fa-plus",onClick:function(){n.pushPage("addTransaction",{title:"Add Recurring Transaction",props:{accountId:a,isAdd:!0,isRecurring:!0},onReturn:async function(t){console.log("onReturn",t),await e.post(`/account/${a}/recurringTransactions`,t),i()}})}},enterAll:{title:"Enter all transactions of current month",icon:"fa fa-external-link-alt",onClick:async function(){const{inserted:t}=await e.post(`/account/${a}/recurringTransactions/enterAllOccurenceOfCurrentMonth`),n=t>0?`${t} transactions inserted`:"no transaction to insert";await i(),$$.ui.showAlert({title:"Current month transactions",content:n})}}}}}}),$$.control.registerControl("synthCategories",{template:'<div class="year">\n    <label>Year</label>\n    <div bn-control="brainjs.combobox" bn-data="{items: years}" bn-event="comboboxchange: onYearChange"></div>\n</div>\n\n<div class="scrollPanel" bn-bind="scrollPanel">\n    <table class="w3-table-all w3-small">\n        <thead>\n            <tr bn-each="months">\n                <th bn-text="$scope.$i"></th>\n            </tr>\n        </thead>\n        <tbody bn-each="categories" bn-index="catIdx" bn-event="click.cell: onCellClick">\n            <tr bn-each="$scope.$i.value" bn-index="monthIdx" bn-iter="month" bn-style="getStyle" bn-show="isCategory">\n                <td bn-text="formatAmount" bn-style="getCellStyle" class="cell"></td>\n            </tr>\n        </tbody>\n    </table>   \n</div>\n',deps:["breizbot.http","breizbot.pager"],props:{accountId:null},init:function(t,n,e){const{accountId:a}=this.props;let o=0,i=null;const s=$$.viewController(t,{data:{categories:[],months:["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","Total"],years:[],formatAmount:function(t){if(0==t.monthIdx){const n=t.$i.name.split(":");if(1==n.length){const t=c(n[0]);return t>0?`${n[0]} (${t})`:n[0]}return n[1]}const n=t.$i.value[t.monthIdx];return 0==n?"    ":n.toFixed(2)},getStyle:function(t){let n="1px solid #ddd";t.catIdx==o&&(n="2px solid black");let e="black";return 1==t.$i.name.split(":").length&&(e="blue"),{"border-top":n,color:e}},isCategory:function(t){return 1==t.$i.name.split(":").length},getCellStyle:function(t){let n=8;const e={};if(0==t.monthIdx){const a=t.$i.name.split(":");2==a.length?n+=15:c(a[0])&&(e.cursor="pointer")}return e["padding-left"]=`${n}px`,0!=t.$i.value[t.monthIdx]&&t.monthIdx<13&&(e.cursor="pointer"),e}},events:{onYearChange:async function(t,n){console.log("onYearChange",$(this).getValue()),s.setData({syntheses:[]}),await l(parseInt($(this).getValue())),s.scope.scrollPanel.scrollTop(0)},onCellClick:async function(){const t=$(this);let o=t.index();const r=t.closest("tr").index(),{name:l,value:u}=s.model.categories[r],d=l.split(":");if(0==o&&1==d.length){const n=c(l),e=t.closest("tbody").find("tr");for(let t=1;t<=n;t++)e.eq(t+r).toggle()}else if(o>0&&o<13&&0!==u[o]){const t=d[0],s=d[1],c={year:i,month:--o,category:t,subcategory:s},r=await n.get(`/account/${a}/filteredTransactions`,c);e.pushPage("filteredTransactions",{title:"Selected Transactions",props:{transactions:r}})}}}});function c(t){return t+=":",s.model.categories.filter(n=>n.name.startsWith(t)).length}function r(t,n){return t.name.localeCompare(n.name)}async function l(t){i=t;const e=await n.get(`/account/${a}/syntheses`,{year:t});let c={};e.forEach((t,n)=>{for(let e in t.categories)null==c[e]&&(c[e]=new Array(13).fill(0)),c[e][n+1]=t.categories[e]}),(c=$$.util.objToArray2(c)).forEach(t=>{const n=t.value.reduce((t,n)=>t+n,0);t.value.push(n)});const l=c.filter(t=>t.value[13]>0).sort(r);o=l.length;const u=c.filter(t=>t.value[13]<0).sort(r);c=l.concat(u),s.setData({categories:c})}!async function(){const t=(new Date).getFullYear(),{oldestYear:e}=await n.get(`/account/${a}/oldestYearTransaction`),o=[];for(let n=t;n>=e;n--)o.push(n.toString());s.setData({years:o}),l(t)}()}}),$$.control.registerControl("syntheses",{template:'<div class="year">\n    <label>Year</label>\n    <div bn-control="brainjs.combobox" bn-data="{items: years}" bn-event="comboboxchange: onYearChange"></div>\n</div>\n\n<table class="w3-table-all w3-small">\n    <thead>\n        <tr bn-each="months">\n            <th bn-text="$scope.$i"></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr bn-each="syntheses" bn-index="idx">\n            <td bn-text="formatIncome"></td>\n        </tr>\n\n        <tr bn-each="syntheses" bn-index="idx">\n            <td bn-text="formatExpenses"></td>\n        </tr>\n\n        <tr bn-each="syntheses" bn-index="idx">\n            <td bn-text="formatDifference" bn-style="{color: getDiffColor}"></td>\n        </tr>\n    </tbody>\n</table>',deps:["breizbot.http"],props:{accountId:null},init:function(t,n){const{accountId:e}=this.props,a=$$.viewController(t,{data:{syntheses:[],months:["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","Total"],years:[],formatIncome:function(t){return 0==t.idx?"Income":this.syntheses[t.idx].income.toFixed(2)},formatExpenses:function(t){return 0==t.idx?"Expenses":this.syntheses[t.idx].expenses.toFixed(2)},formatDifference:function(t){const{income:n,expenses:e}=this.syntheses[t.idx];return 0==t.idx?"Difference":(n-e).toFixed(2)},getDiffColor:function(t){return 0==t.idx?"black":parseInt(this.formatDifference(t))<0?"red":"green"}},events:{onYearChange:async function(t,n){a.setData({syntheses:[]}),o(parseInt($(this).getValue()))}}});async function o(t){const o=await n.get(`/account/${e}/syntheses`,{year:t}),i=o.reduce((t,n)=>t+n.income,0),s=o.reduce((t,n)=>t+n.expenses,0);o.unshift({}),o.push({income:i,expenses:s}),a.setData({syntheses:o})}!async function(){const t=(new Date).getFullYear(),{oldestYear:i}=await n.get(`/account/${e}/oldestYearTransaction`),s=[];for(let n=t;n>=i;n--)s.push(n.toString());a.setData({years:s}),o(t)}()}}),$$.control.registerControl("transactions",{template:'<div class="scrollPanel" bn-bind="scrollPanelTable">\n\t<table class="w3-table-all w3-hoverable w3-small">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>Date</th>\n                <th>Payee</th>\n                <th>Category</th>\n\t\t\t\t<th>S</th>\n\t\t\t\t<th>Number</th>\n                <th>Amount</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody bn-each="transactions" bn-lazzy="getItems" bn-bind="transactions" bn-event="contextmenuchange.item: onItemContextMenu" bn-index="trIndex">\n\t\t\t<tr class="item" bn-control="brainjs.contextmenu" bn-data="{items: {\n\t\t\t\tdel: {\n\t\t\t\t\tname: \'Delete\',\n\t\t\t\t\ticon: \'fas fa-trash-alt\'\n\t\t\t\t},\n\t\t\t\tedit: {\n\t\t\t\t\tname: \'Edit\',\n\t\t\t\t\ticon: \'fas fa-edit\'\n\t\t\t\t}\n\t\t\t}}"  bn-style="getStyle">\n\t\t\t<td bn-text="formatDate" class="date"></td>\n\t\t\t<td bn-text="$scope.$i.payee"></td>\n                <td>\n\t\t\t\t\t<span bn-text="$scope.$i.category"></span><br>\n\t\t\t\t\t<span bn-text="$scope.$i.subcategory"></span>\n\t\t\t\t</td>\n\t\t\t\t<td bn-text="$scope.$i.clearedStatus"></td>\n\t\t\t\t<td bn-text="$scope.$i.number"></td>\n\t\t\t\t<td bn-text="formatAmount" class="amount" bn-style="{color: getAmountColor}"></td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</div>',deps:["breizbot.pager","breizbot.http","breizbot.files"],props:{accountId:null},init:function(t,n,e,a){const{accountId:o}=this.props;let i=0;const s=$$.viewController(t,{data:{transactions:[],formatAmount:function(t){return t.$i.amount.toFixed(2)},formatDate:function(t){return new Date(t.$i.date).toLocaleDateString()},getItems:async function(t){return c(t)},getAmountColor:function(t){return t.$i.amount<0?"red":"black"},getStyle:function(t){return{"border-bottom":t.trIndex==i-1?"2px solid black":"1px solid #ddd"}}},events:{onItemContextMenu:function(t,a){const i=$(this).index(),{cmd:c}=a,r=s.model.transactions[i];if("del"==c)$$.ui.showConfirm({title:"Delete Transaction",content:"Are you sure ?"},async()=>{await e.delete("/transaction/",r),s.removeArrayItem("transactions",i,"transactions")});else if("edit"==c){const t=r._id.toString();n.pushPage("addTransaction",{title:"Edit Transaction",props:{formData:r,accountId:o},onReturn:async function(n){console.log("onReturn",n),await e.put(`/account/${o}/transaction/${t}`,n),n=$.extend(r,n),s.updateArrayItem("transactions",i,n,"transactions")}})}}}});async function c(t){t=t||0;const n=await e.get(`/account/${o}/transactions?offset=${t}`);if(console.log("transactions",t,n),0!=t)return s.model.transactions=s.model.transactions.concat(n),n;s.setData({transactions:n})}async function r(){await async function(){const t=await e.get(`/account/${o}/transactions/notPassedNumber`);i=t.notPassedNumber}(),await c()}function l(){a.openFile("Import transactions from QIF file","qif",async t=>{const n=t.rootDir+t.fileName;await e.post(`/account/${o}/importTransactions`,{fileName:n}),c()})}r(),this.getButtons=function(){return{import:{title:"import from QIF file",icon:"fa fa-download",onClick:function(){$$.ui.showConfirm({title:"Import Transactions",content:"This operation will remove all your current transactions<br><br>Are you sure ?"},l)}},reload:{title:"Update",icon:"fa fa-redo-alt",onClick:async function(){await r(),s.scope.scrollPanelTable.scrollTop(0)}},add:{title:"Add Transaction",icon:"fa fa-plus",onClick:function(){n.pushPage("addTransaction",{title:"Add Transaction",props:{accountId:o,isAdd:!0},onReturn:async function(t){const{insertedId:n}=await e.post(`/account/${o}/transaction`,t);t._id=n,new Date(t.date).getTime()<Date.now()?s.insertArrayItemBefore("transactions",i,t,"transactions"):(i++,s.insertArrayItemBefore("transactions",0,t,"transactions"))}})}}}}}}),$$.control.registerControl("unclearedTransactions",{template:'<div class="inputForm">\n\t<div class="left">\n\t\t<div bn-control="brainjs.inputgroup">\n\t\t\t<label>Initial Balance</label>\n\t\t\t<input type="number" step="0.01" bn-val="initialBalance" bn-update="change" class="w3-border w3-round">\n\t\t</div>\n\t\t<div bn-control="brainjs.inputgroup">\n\t\t\t<label>Final Balance</label>\n\t\t\t<input type="number" step="0.01" bn-val="finalBalance" bn-update="change" class="w3-border w3-round">\n\t\t</div>\t\n\t</div>\n\t<div class="difference" bn-bind="difference">\n\t\t<label>Difference</label>\n\t\t<div bn-text="getDifference"></div>\n\t</div>\n\n</div>\n<div class="scrollPanelTable">\n\t<table class="w3-table-all w3-hoverable w3-small">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>Date</th>\n                <th>Payee</th>\n                <th>Category</th>\n\t\t\t\t<th>S</th>\n\t\t\t\t<th>Number</th>\n                <th>Amount</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody\n\t\t\tbn-each="transactions" \n\t\t\tbn-lazzy="20" \n\t\t\tbn-index="trIndex"\n\t\t\tbn-bind="transactions" \n\t\t\tbn-event="contextmenuchange.item: onItemContextMenu, click.w3-check: onCheckClick">\n\t\t\t<tr class="item" bn-style="getStyle">\n\t\t\t\t<td bn-text="formatDate" class="date"></td>\n                <td bn-text="$scope.$i.payee"></td>\n                <td>\n\t\t\t\t\t<span bn-text="$scope.$i.category"></span><br>\n\t\t\t\t\t<span bn-text="$scope.$i.subcategory"></span>\n\t\t\t\t</td>\n\t\t\t\t<td>\n\t\t\t\t\t<input type="checkbox" class="w3-check" bn-val="isChecked">\n\t\t\t\t</td>\n\t\t\t\t<td bn-text="$scope.$i.number"></td>\n\t\t\t\t<td bn-text="formatAmount" class="amount" bn-style="{color: getAmountColor}"></td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{transactions:[],accountId:null,lastStatementInfo:null},init:function(t,n,e){const{transactions:a,accountId:o,lastStatementInfo:i}=this.props,{initialBalance:s,finalBalance:c}=i,r=a.reduce((t,n)=>"P"===n.clearedStatus?t+n.amount:t,0),l=a.filter(t=>t.amount>0),u=a.filter(t=>t.amount<0&&null==t.number),d=a.filter(t=>t.amount<0&&null!=t.number),b=$$.viewController(t,{data:{transactions:l.concat(d,u),initialBalance:s,finalBalance:c,checkedAmount:r,getDifference:function(){return(this.finalBalance-this.initialBalance-this.checkedAmount).toFixed(2)},formatAmount:function(t){return t.$i.amount.toFixed(2)},formatDate:function(t){return new Date(t.$i.date).toLocaleDateString()},getAmountColor:function(t){return t.$i.amount<0?"red":"black"},isChecked:function(t){return"P"===t.$i.clearedStatus},getStyle:function(t){return{"border-bottom":t.trIndex==l.length-1||t.trIndex==l.length+d.length-1?"2px solid black":"1px solid #ddd"}}},events:{onCheckClick:function(){let t=p().reduce((t,n)=>t+n.amount,0);b.setData({checkedAmount:t})}}});function p(){const t=b.scope.transactions.find(".w3-check:checked"),n=[];return t.each(function(){const t=$(this).closest("tr").index();n.push(b.model.transactions[t])}),n}this.getButtons=function(){return{apply:{title:"Apply",icon:"fa fa-check",onClick:async function(){const t=0==parseInt(b.model.getDifference()),a=t?"X":"P",i=p().map(t=>t._id.toString());await e.put(`/account/${o}/unclearedTransactions`,{ids:i,clearedStatus:a});let{initialBalance:s,finalBalance:c}=b.model;t&&(s=c,c=0),await e.put(`/account/${o}/lastStatementInfo`,{lastStatement:{initialBalance:s,finalBalance:c}}),n.popPage()}}}}}});