$$.control.registerControl("addMovie",{template:'<div>\n    <form bn-event="submit: onSubmit" bn-form="data">\n        <label>Title</label>\n        <input type="text" required name="title">\n\n        <label>Year</label>\n        <input type="number" required name="year">\n\n        <label>Style</label>\n        <input type="text" name="style" bn-control="brainjs.autocomplete" bn-data="{source: styles}">\n\n        <label>Main Actor</label>\n        <input type="text" name="mainActor" bn-control="brainjs.autocomplete" bn-data="{source: actors}">\n\n        <label>Director</label>\n        <input type="text" name="director" bn-control="brainjs.autocomplete" bn-data="{source: directors}">\n        \n        <label>Franchise</label>\n        <input type="text" name="franchise" bn-control="brainjs.autocomplete" bn-data="{source: franchises}">\n\n        <input type="submit" hidden bn-bind="submit">\n    </form>\n</div>\n',deps:["breizbot.pager","breizbot.http"],props:{data:{}},init:function(t,e,n){const{data:o}=this.props,i=$$.viewController(t,{data:{data:o,styles:[],franchises:[],actors:[],directors:[]},events:{onSubmit:function(t){t.preventDefault(),e.popPage($(this).getFormData())}}});!async function(){const t=await n.get("/getStyles"),e=await n.get("/getFranchises"),o=await n.get("/getActors"),a=await n.get("/getDirectors");i.setData({styles:t,franchises:e,actors:o,directors:a})}(),this.getButtons=function(){return{apply:{title:"Apply",icon:"fas fa-check",onClick:function(){i.scope.submit.click()}}}}}}),$$.control.registerControl("filter",{template:'<div>\n    <form bn-event="submit: onSubmit" bn-form="filters">\n        <label>Style</label>\n        <div bn-control="brainjs.combobox" bn-data="{items: styles}" name="style"></div>    \n\n        <label>Franchise</label>\n        <div bn-control="brainjs.combobox" bn-data="{items: franchises}" name="franchise"></div>    \n        \n        <label>Main Actor</label>\n        <div bn-control="brainjs.combobox" bn-data="{items: actors}" name="mainActor"></div>    \n\n        <label>Director</label>\n        <div bn-control="brainjs.combobox" bn-data="{items: directors}" name="director"></div>    \n\n        <input type="submit" hidden bn-bind="submit">\n    </form>\n</div>\n',deps:["breizbot.pager","breizbot.http"],props:{filters:null},init:function(t,e,n){const o=$.extend({author:"All"},this.props.filters),i=$$.viewController(t,{data:{filters:{},styles:[],franchises:[],actors:[],directors:[]},events:{onSubmit:function(t){t.preventDefault(),e.popPage($(this).getFormData())}}});!async function(){const t=await n.get("/getStyles");t.unshift({value:"All",label:"All",style:"font-weight: bold;"});const e=await n.get("/getFranchises");e.unshift({value:"All",label:"All",style:"font-weight: bold;"});const a=await n.get("/getActors");a.unshift({value:"All",label:"All",style:"font-weight: bold;"});const s=await n.get("/getDirectors");s.unshift({value:"All",label:"All",style:"font-weight: bold;"}),i.setData({styles:t,franchises:e,actors:a,directors:s}),i.setData({filters:o})}(),this.getButtons=function(){return{apply:{title:"Apply",icon:"fas fa-check",onClick:function(){i.scope.submit.click()}}}}}}),$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <div class="left">\n        <button class="w3-button" title="Import from JSON file" bn-event="click: onImport" bn-icon="fas fa-download">\n        </button>\n\n        <button class="w3-button" title="Add Movie" bn-event="click: onAddMovie" bn-icon="fas fa-plus">\n        </button>\n\n        <button class="w3-button" title="Filter" bn-event="click: onFilter" bn-icon="fas fa-filter">\n        </button>\n\n        \n    </div>\n\n    <div class="right">\n        <span bn-text="getMoviesQty"></span>\n    </div>\n\n\n</div>\n\n<div class="scrollBar">\n    <table class="w3-table-all w3-hoverable w3-small">\n        <thead>\n            <tr>\n                <th>Title</th>\n                <th>Year</th>\n                <th>Style</th>\n                <th>Main Actor</th>\n                <th>Director</th>\n                <th>Franchise</th>\n            </tr>\n        </thead>\n            <tbody bn-each="movies" bn-lazzy="getMovies" bn-event="contextmenuchange.item: onItemContextMenu" bn-bind="movies">\n                <tr class="item" bn-control="brainjs.contextmenu" bn-data="{items: {\n                    del: {\n                        name: \'Delete\',\n                        icon: \'fas fa-trash-alt\'\n                    },\n                    edit: {\n                        name: \'Edit\',\n                        icon: \'fas fa-edit\'\n                    }\n                }}">\n    \n                <td bn-text="$scope.$i.title"></td>\n                <td bn-text="$scope.$i.year"></td>\n                <td bn-text="$scope.$i.style"></td>\n                <td bn-text="$scope.$i.mainActor"></td>\n                <td bn-text="$scope.$i.director"></td>\n                <td bn-text="$scope.$i.franchise"></td>\n            </tr>\n\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{},init:function(t,e,n){let o={};const i=$$.viewController(t,{data:{moviesQty:0,movies:[],getMovies:async function(t){return a(t)},getMoviesQty:function(){return this.moviesQty>0?`${this.moviesQty} movies`:""}},events:{onAddMovie:function(){e.pushPage("addMovie",{title:"Add Movie",onReturn:async function(t){console.log("onReturn",t),await n.post("/addMovie",t),a()}})},onItemContextMenu:function(t,o){const a=$(this).index(),{cmd:s}=o,l=i.model.movies[a],r=l._id.toString();"del"==s?$$.ui.showConfirm({title:"Delete Movie",content:"Are you sure ?"},async()=>{await n.post(`/deleteMovie/${r}`),i.removeArrayItem("movies",a,"movies")}):"edit"==s&&e.pushPage("addMovie",{title:"Edit Movie",props:{data:l},onReturn:async function(t){const e=await n.post(`/updateMovie/${r}`,t);i.updateArrayItem("movies",a,e,"movies")}})},onImport:function(){e.pushPage("breizbot.files",{title:"Import Movies",props:{selectionEnabled:!0,filterExtension:"json"},events:{fileclick:function(t,n){e.popPage(n)}},onReturn:async function(t){console.log("onReturn",t),await n.post("/importFile",{filePath:t.rootDir+t.fileName}),a()}})},onFilter:function(){console.log("onFilter"),e.pushPage("filter",{title:"Set Filter",props:{filters:o},onReturn:async function(t){Object.keys(t).forEach(e=>{"All"==t[e]&&delete t[e]}),o=t,a()}})}}});async function a(t){t=t||0;const e=await n.post("/getMovies",{offset:t,filters:o});if(0!=t)return i.model.movies=i.model.movies.concat(e),e;{const{moviesQty:t}=await n.post("/moviesQty",{filters:o});i.setData({movies:e,moviesQty:t})}}a()}});