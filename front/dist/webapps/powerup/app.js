$$.service.registerService("hub",{init:function(){let t=null,n={};const e=new EventEmitter2;const o={},i=function(...t){0};function a(t){const n={};return Object.entries(t).forEach(([t,e])=>{n[e]=t}),n}const c={DETACHED_IO:0,ATTACHED_IO:1,ATTACHED_VIRTUAL_IO:2},s=a(c),E={HUB_PROPERTIES:1,HUB_ACTIONS:2,HUB_ALERTS:3,HUB_ATTACHED_IO:4,GENERIC_ERROR_MESSAGES:5,HW_NETWORK_COMMANDS:8,FW_UPDATE_GO_INTO_BOOT_MODE:16,FW_UPDATE_LOCK_MEMORY:17,FW_UPDATE_LOCK_STATUS_REQUEST:18,FW_LOCK_STATUS:19,PORT_INFORMATION_REQUEST:33,PORT_MODE_INFORMATION_REQUEST:34,PORT_INPUT_FORMAT_SETUP_SINGLE:65,PORT_INPUT_FORMAT_SETUP_COMBINEDMODE:66,PORT_INFORMATION:67,PORT_MODE_INFORMATION:68,PORT_VALUE_SINGLE:69,PORT_VALUE_COMBINEDMODE:70,PORT_INPUT_FORMAT_SINGLE:71,PORT_INPUT_FORMAT_COMBINEDMODE:72,VIRTUAL_PORT_SETUP:97,PORT_OUTPUT_COMMAND:129,PORT_OUTPUT_COMMAND_FEEDBACK:130},_=a(E),r=a({UNKNOWN:0,SIMPLE_MEDIUM_LINEAR_MOTOR:1,TRAIN_MOTOR:2,LIGHT:8,VOLTAGE_SENSOR:20,CURRENT_SENSOR:21,PIEZO_BUZZER:22,HUB_LED:23,TILT_SENSOR:34,MOTION_SENSOR:35,COLOR_DISTANCE_SENSOR:37,MEDIUM_LINEAR_MOTOR:38,MOVE_HUB_MEDIUM_LINEAR_MOTOR:39,MOVE_HUB_TILT_SENSOR:40,DUPLO_TRAIN_BASE_MOTOR:41,DUPLO_TRAIN_BASE_SPEAKER:42,DUPLO_TRAIN_BASE_COLOR_SENSOR:43,DUPLO_TRAIN_BASE_SPEEDOMETER:44,TECHNIC_LARGE_LINEAR_MOTOR:46,TECHNIC_XLARGE_LINEAR_MOTOR:47,TECHNIC_MEDIUM_ANGULAR_MOTOR:48,TECHNIC_LARGE_ANGULAR_MOTOR:49,TECHNIC_MEDIUM_HUB_GEST_SENSOR:54,REMOTE_CONTROL_BUTTON:55,REMOTE_CONTROL_RSSI:56,TECHNIC_MEDIUM_HUB_ACCELEROMETER:57,TECHNIC_MEDIUM_HUB_GYRO_SENSOR:58,TECHNIC_MEDIUM_HUB_TILT_SENSOR:59,TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR:60,TECHNIC_COLOR_SENSOR:61,TECHNIC_DISTANCE_SENSOR:62,TECHNIC_FORCE_SENSOR:63,TECHNIC_3X3_COLOR_LIGHT_MATRIX:64,TECHNIC_SMALL_ANGULAR_MOTOR:65,MARIO_ACCELEROMETER:71,MARIO_BARCODE_SENSOR:73,MARIO_PANTS_SENSOR:74,TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY:75,TECHNIC_LARGE_ANGULAR_MOTOR_GREY:76}),T=a({ACK:1,MACK:2,BUFFER_OVERFLOW:3,TIMEOUT:4,COMMAND_NOT_RECOGNIZED:5,INVALID_USE:6,OVERCURRENT:7,INTERNAL_ERROR:8}),O={ADVERTISING_NAME:1,BUTTON_STATE:2,FW_VERSION:3,HW_VERSION:4,RSSI:5,BATTERY_VOLTAGE:6,BATTERY_TYPE:7,MANUFACTURER_NAME:8,RADIO_FIRMWARE_VERSION:9,LWP_PROTOCOL_VERSION:10,SYSTEM_TYPE_ID:11,HW_NETWORK_ID:12,PRIMARY_MAC_ADDRESS:13,SECONDARY_MAC_ADDRESS:14,HW_NETWORK_FAMILY:15},R=a(O),I={NAME:0,RAW:1,PCT:2,SI:3,SYMBOL:4,MAPPING:5,USED_INTERNALLY:6,MOTOR_BIAS:7,CAPABILITY_BITS:8,VALUE_FORMAT:128},d=a(I),N={A:0,B:1,C:2,D:3,HUB_LED:50,CURRENT_SENSOR:59,VOLTAGE_SENSOR:60,ACCELEROMETER:97,GYRO_SENSOR:98,TILT_SENSOR:99},A=a(N),l={};function u(t){const n=new Uint8Array(t);let e="";for(let t=0;t<n.byteLength&&0!=n[t];t++)e+=String.fromCharCode(n[t]);return e}async function p(n,...e){i("sendMsg",{type:n,data:e});const o=e.length+3,a=new ArrayBuffer(o),c=new Uint8Array(a);c[0]=o,c[1]=0,c[2]=n,c.set(e,3),i(c),await t.writeValueWithoutResponse(a)}function M(t,n,e){return new Promise(async i=>{await p(E.PORT_MODE_INFORMATION_REQUEST,t,n,e),o[t]=i})}function S(t,n,...e){return p(E.PORT_OUTPUT_COMMAND,t,17,81,n,e)}function U(t){!function(t){const n=t.byteLength,e=t.getUint8(0),o=t.getUint8(2);i("decodeMsg",{msgLen:e,bufferLen:n,msgType:_[o]});const a=l[o];"function"==typeof a&&a(t)}(t.target.value)}function b(){i("onGattServerDisconnected"),e.emit("disconnected")}return l[E.HUB_ATTACHED_IO]=function(t){const o=t.getUint8(3),a=t.getUint8(4),E=a?t.getUint16(5,!0):0,_=r[E]||"Unknown",T=s[a];if(i("handlePortMsg",{portId:o,eventName:T,deviceTypeName:_}),a==c.ATTACHED_IO)n[o]=E,e.emit("attach",{portId:o,deviceTypeName:_});else if(a==c.DETACHED_IO)delete n[o],e.emit("detach",{portId:o});else if(a==c.ATTACHED_VIRTUAL_IO){const n=t.getUint8(7),e=t.getUint8(8);i({portIdA:n,portIdB:e})}},l[E.GENERIC_ERROR_MESSAGES]=function(t){const n=t.getUint8(3),e=t.getUint8(4);i({cmdType:n,errorCode:T[e]})},l[E.HUB_PROPERTIES]=function(t){const n=t.getUint8(3);if(i({property:R[n]}),n==O.BATTERY_VOLTAGE){const n=t.getUint8(5);i({batteryLevel:n}),e.emit("batteryLevel",{batteryLevel:n})}},l[E.PORT_OUTPUT_COMMAND_FEEDBACK]=function(t){for(let n=3;n<t.byteLength;n+=2){const e=t.getUint8(n),o=t.getUint8(n+1);i({portId:e,feedback:o})}},l[E.PORT_INFORMATION]=function(t){const n=t.getUint8(3);let e=t.getUint8(5);const a=t.getUint8(6),c=t.getUint16(7,!0),s=t.getUint16(9,!0);i(`Port ${n}, capabilities ${e}, total modes ${a}, \n                input modes ${c}, output modes ${s}`);const E="output,input,logical combinable, logical synchronisable".split(",");let _=[];for(let t=0;t<4;t++)e>>t&1&&_.push(E[t]);const r={portId:n,capabilities:_.join(", "),count:a,input:c,output:s},T=o[n];"function"==typeof T&&T(r)},l[E.PORT_MODE_INFORMATION]=function(t){const n=t.getUint8(3),e=t.getUint8(4),a=t.getUint8(5),c={portId:n,mode:e,type:d[a]};switch(a){case I.NAME:c.name=u(t.buffer.slice(6,t.byteLength));break;case I.RAW:case I.PCT:case I.SI:c.min=t.getFloat32(6,!0),c.max=t.getFloat32(10,!0);break;case I.SYMBOL:c.symbol=u(t.buffer.slice(6,t.byteLength));break;case I.VALUE_FORMAT:c.numValues=t.getUint8(6),c.dataType=["8bit","16bit","32bit","float"][t.getUint8(7)],c.totalFigures=t.getUint8(8),c.decimals=t.getUint8(9)}i("portModeInformation",c);const s=o[n];"function"==typeof s&&(s(c),delete o[n])},l[E.PORT_VALUE_SINGLE]=function(t){i("msg",t);const n=t.getUint8(3),o=t.getInt32(4,!0);i("handlePortValueSingle",{portId:n,degrees:o}),e.emit("rotate",{portId:n,degrees:o})},{connect:async function(){i("connect"),n={};const e=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:["00001623-1212-efde-1623-785feabcd123"]});e.addEventListener("gattserverdisconnected",b);const o=await e.gatt.connect();i("Connected");const a=await o.getPrimaryService("00001623-1212-efde-1623-785feabcd123");(t=await a.getCharacteristic("00001624-1212-efde-1623-785feabcd123")).addEventListener("characteristicvaluechanged",U),t.startNotifications()},shutdown:function(){return p(E.HUB_ACTIONS,1)},getDeviceType:function(t){return r[n[t]]},subscribe:function(t,n){return p(E.PORT_INPUT_FORMAT_SETUP_SINGLE,t,n,1,0,0,0,1)},createVirtualPort:function(t,n){return p(E.VIRTUAL_PORT_SETUP,1,t,n)},getPortInformation:async function(t){const n=await function(t){return new Promise(async n=>{await p(E.PORT_INFORMATION_REQUEST,t,1),o[t]=n})}(t),{capabilities:e,count:i,output:a,input:c}=n,s=Math.max(c,a),_=[];for(let n=0;n<i;n++){const e={};if(s>>n){let o;o=await M(t,n,I.NAME),e.name=o.name,e[(o=await M(t,n,I.RAW)).type]={min:o.min,max:o.max},e[(o=await M(t,n,I.PCT)).type]={min:o.min,max:o.max},e[(o=await M(t,n,I.SI)).type]={min:o.min,max:o.max},o=await M(t,n,I.SYMBOL),e.unit=o.symbol}_.push(e)}return{modes:_,capabilities:e}},on:e.on.bind(e),motor:{setPower:function(t,n){return S(t,0,n)},resetZero:function(t){return S(t,2,0,0,0,0)}},led:{setColor:function(t){return S(N.HUB_LED,0,t)}},Color:{BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,CYAN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:255},PortMap:N,PortMapNames:A,DeviceMode:{ROTATION:2,ABSOLUTE:3}}}}),$$.control.registerControl("rootPage",{template:'<div>\n    <button class="w3-blue w3-button" \n        bn-event="click: onConnect"\n        bn-show="!connected"\n    >Connect to HUB</button>\n\n    <button class="w3-blue w3-button" \n        bn-event="click: onShutdown"\n        bn-show="connected"\n    >Shutdown</button>\n\n\n    <button class="w3-blue w3-button" \n        bn-event="click: onSendMsg"\n        bn-show="connected"\n    >Send Msg</button>\n</div>\n\n<div bn-show="connected" class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="mousedown.action: onMouseUp, mouseup.action:onMouseDown, click.portInfo: onInfo2">\n            <tr>\n                <td bn-text="$scope.$i.portName"></td>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-button w3-green action" data-action="forward">FWD</button>\n                    <button class="w3-button w3-green action" data-action="backward">BKWD</button>\n                    <button class="w3-button w3-blue portInfo">INFO</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-button: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-button w3-blue">INFO</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub"],props:{},init:function(t,n,e){function o(t){const n=t.closest("tr").index();return a.model.externalDevices[n].portId}function i(t,e){n.pushPage("info",{title:e,props:{portId:t}})}e.on("disconnected",()=>{a.setData({connected:!1})}),e.on("attach",t=>{const{portId:n,deviceTypeName:o}=t;n<50?(a.model.externalDevices.push({portId:n,portName:e.PortMapNames[t.portId],deviceTypeName:o}),a.model.externalDevices.sort((t,n)=>t.portId-n.portId)):a.model.internalDevices.push({deviceTypeName:o,portId:n}),a.update()}),e.on("detach",t=>{const n=a.model.externalDevices.findIndex(n=>n.portId==t.portId);console.log("idx",n),a.model.externalDevices.splice(n,1),a.update()}),e.on("rotate",t=>{console.log("rotate",t)});const a=$$.viewController(t,{data:{connected:!1,internalDevices:[],externalDevices:[]},events:{onMouseUp:function(){const t=$(this).data("action"),n=o($(this));switch(t){case"off":e.motor.setPower(n,0);break;case"forward":e.motor.setPower(n,100);break;case"backward":e.motor.setPower(n,-100)}},onMouseDown:function(){const t=o($(this));e.motor.setPower(t,0)},onConnect:async function(){await e.connect(),a.setData({connected:!0}),await e.subscribe(e.PortMap.B,e.DeviceMode.ROTATION)},onSendMsg:async function(){await e.led.setColor(e.Color.PURPLE)},onShutdown:async function(){await e.shutdown()},onInfo:function(){const t=$(this).closest("tr").index(),{portId:n,deviceTypeName:e}=a.model.internalDevices[t];i(n,e)},onInfo2:function(){const t=$(this).closest("tr").index(),{portId:n,deviceTypeName:e}=a.model.externalDevices[t];i(n,e)}}})}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>NAME</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>PCT</th>\n                <th>SI</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(t,n,e){const{portId:o}=this.props,i=$$.viewController(t,{data:{modes:[],capabilities:""},events:{}});!async function(){const t=await e.getPortInformation(o),{modes:n,capabilities:a}=t;i.setData({modes:n,capabilities:a})}()}});