!function(){const t=function(...t){console.log.apply(console,t)},{getEnumName:e}=$$.util,n="00001623-1212-efde-1623-785feabcd123",o="00001624-1212-efde-1623-785feabcd123",i={DETACHED_IO:0,ATTACHED_IO:1,ATTACHED_VIRTUAL_IO:2},a=e(i),s={HUB_PROPERTIES:1,HUB_ACTIONS:2,HUB_ALERTS:3,HUB_ATTACHED_IO:4,GENERIC_ERROR_MESSAGES:5,HW_NETWORK_COMMANDS:8,FW_UPDATE_GO_INTO_BOOT_MODE:16,FW_UPDATE_LOCK_MEMORY:17,FW_UPDATE_LOCK_STATUS_REQUEST:18,FW_LOCK_STATUS:19,PORT_INFORMATION_REQUEST:33,PORT_MODE_INFORMATION_REQUEST:34,PORT_INPUT_FORMAT_SETUP_SINGLE:65,PORT_INPUT_FORMAT_SETUP_COMBINEDMODE:66,PORT_INFORMATION:67,PORT_MODE_INFORMATION:68,PORT_VALUE_SINGLE:69,PORT_VALUE_COMBINEDMODE:70,PORT_INPUT_FORMAT_SINGLE:71,PORT_INPUT_FORMAT_COMBINEDMODE:72,VIRTUAL_PORT_SETUP:97,PORT_OUTPUT_COMMAND:129,PORT_OUTPUT_COMMAND_FEEDBACK:130},r=e(s),c={UNKNOWN:0,SIMPLE_MEDIUM_LINEAR_MOTOR:1,TRAIN_MOTOR:2,LIGHT:8,VOLTAGE_SENSOR:20,CURRENT_SENSOR:21,PIEZO_BUZZER:22,HUB_LED:23,TILT_SENSOR:34,MOTION_SENSOR:35,COLOR_DISTANCE_SENSOR:37,MEDIUM_LINEAR_MOTOR:38,MOVE_HUB_MEDIUM_LINEAR_MOTOR:39,MOVE_HUB_TILT_SENSOR:40,DUPLO_TRAIN_BASE_MOTOR:41,DUPLO_TRAIN_BASE_SPEAKER:42,DUPLO_TRAIN_BASE_COLOR_SENSOR:43,DUPLO_TRAIN_BASE_SPEEDOMETER:44,TECHNIC_LARGE_LINEAR_MOTOR:46,TECHNIC_XLARGE_LINEAR_MOTOR:47,TECHNIC_MEDIUM_ANGULAR_MOTOR:48,TECHNIC_LARGE_ANGULAR_MOTOR:49,TECHNIC_MEDIUM_HUB_GEST_SENSOR:54,REMOTE_CONTROL_BUTTON:55,REMOTE_CONTROL_RSSI:56,TECHNIC_MEDIUM_HUB_ACCELEROMETER:57,TECHNIC_MEDIUM_HUB_GYRO_SENSOR:58,TECHNIC_MEDIUM_HUB_TILT_SENSOR:59,TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR:60,TECHNIC_COLOR_SENSOR:61,TECHNIC_DISTANCE_SENSOR:62,TECHNIC_FORCE_SENSOR:63,TECHNIC_3X3_COLOR_LIGHT_MATRIX:64,TECHNIC_SMALL_ANGULAR_MOTOR:65,MARIO_ACCELEROMETER:71,MARIO_BARCODE_SENSOR:73,MARIO_PANTS_SENSOR:74,TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY:75,TECHNIC_LARGE_ANGULAR_MOTOR_GREY:76,VIRTUAL_DEVICE:100},d=e(c),l=e({ACK:1,MACK:2,BUFFER_OVERFLOW:3,TIMEOUT:4,COMMAND_NOT_RECOGNIZED:5,INVALID_USE:6,OVERCURRENT:7,INTERNAL_ERROR:8}),u={ADVERTISING_NAME:1,BUTTON_STATE:2,FW_VERSION:3,HW_VERSION:4,RSSI:5,BATTERY_VOLTAGE:6,BATTERY_TYPE:7,MANUFACTURER_NAME:8,RADIO_FIRMWARE_VERSION:9,LWP_PROTOCOL_VERSION:10,SYSTEM_TYPE_ID:11,HW_NETWORK_ID:12,PRIMARY_MAC_ADDRESS:13,SECONDARY_MAC_ADDRESS:14,HW_NETWORK_FAMILY:15},b=e(u),p={NAME:0,RAW:1,PCT:2,SI:3,SYMBOL:4,MAPPING:5,USED_INTERNALLY:6,MOTOR_BIAS:7,CAPABILITY_BITS:8,VALUE_FORMAT:128},h=e(p),E={BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,CYAN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:255},T={A:0,B:1,C:2,D:3,HUB_LED:50,CURRENT_SENSOR:59,VOLTAGE_SENSOR:60,ACCELEROMETER:97,GYRO_SENSOR:98,TILT_SENSOR:99},m={POWER:0,SPEED:1,ROTATION:2,ABSOLUTE:3,COLOR:0,RGB:1,TILT_POS:0},_={FLOAT:0,HOLD:126,BRAKE:127},O=e(T);function R(t){const e=new Uint8Array(t);let n="";for(let t=0;t<e.byteLength&&0!=e[t];t++)n+=String.fromCharCode(e[t]);return n}function f(t){const e=new Uint8Array(4);return new DataView(e.buffer).setInt32(0,t,!0),Array.from(e)}function I(t,...e){const n=e.flat(2),o=n.length+3,i=new ArrayBuffer(o),a=new Uint8Array(i);return a[0]=o,a[1]=0,a[2]=t,a.set(n,3),i}const g=100;class A{constructor(t,e){this.hubDevice=t,this.portId=e}setPower(t){return this.hubDevice.writeDirect(this.portId,m.POWER,t)}setSpeed(t){return this.hubDevice.writePortCommand(this.portId,7,t,g,0)}rotateDegrees(t,e,n=_.BRAKE){return this.hubDevice.writePortCommand(this.portId,11,f(t),e,g,n)}gotoAngle(t,e,n=_.BRAKE){return this.hubDevice.writePortCommand(this.portId,13,f(t),e,g,n)}setSpeedForTime(t,e,n=_.BRAKE){return this.hubDevice.writePortCommand(this.portId,9,function(t){const e=new Uint8Array(2);return new DataView(e.buffer).setInt16(0,t,!0),Array.from(e)}(e),t,g,n)}resetZero(){return this.hubDevice.writeDirect(this.portId,m.ROTATION,0,0,0,0)}waitSpeed(t){return this.hubDevice.waitTestValue(this.portId,m.SPEED,t)}}function v(t,e){return`${O[t]}_${O[e]}`}class M extends EventEmitter2{constructor(){super(),this.charac=null,this.deviceModes={},this.portCmdQueue={},this.portCmdCallback={},this.hubDevices={},this.busy=!1,this.cmdQueue=[]}async init(e){const i=await e.gatt.connect();t("Connected");const a=await i.getPrimaryService(n);this.charac=await a.getCharacteristic(o);const s=t=>{this.decodeMsg(t.target.value)};e.addEventListener("gattserverdisconnected",()=>{console.log("onGattServerDisconnected",this),this.charac.removeEventListener("characteristicvaluechanged",s),this.charac=null,this.emit("disconnected")}),this.charac.addEventListener("characteristicvaluechanged",s),await this.charac.startNotifications(),await $$.util.wait(100)}createMotor(t){return new A(this,t)}async sendBuffer(e){t("sendBuffer",e),this.busy?(t("busy push in queue"),this.cmdQueue.push(e)):(this.busy=!0,await this.charac.writeValueWithoutResponse(e),this.busy=!1,this.cmdQueue.length>0&&await this.sendBuffer(this.cmdQueue.shift()))}sendMsg(e,...n){return t("sendMsg",r[e],n),this.sendBuffer(I(e,n))}writeDirect(t,e,...n){return this.writePortCommand(t,81,e,n)}subscribe(t,e,n=1,o=null){return this.deviceModes[t]={mode:e,cbk:o},this.sendMsg(s.PORT_INPUT_FORMAT_SETUP_SINGLE,t,e,function(t){const e=new Uint8Array(4);return new DataView(e.buffer).setUint32(0,t,!0),Array.from(e)}(n),1)}createVirtualPort(e,n){const o=v(e,n);t("createVirtualPort",o);for(const t of Object.values(this.hubDevices))if(t.name==o)return void console.log(`virtual port ${o} already created !`);return this.sendMsg(s.VIRTUAL_PORT_SETUP,1,e,n)}shutdown(){return this.sendMsg(s.HUB_ACTIONS,1)}async writePortCommand(t,...e){return console.log("writePortCommand",{portId:t,data:e}),new Promise(async n=>{const o=I(s.PORT_OUTPUT_COMMAND,t,17,e);null==this.portCmdQueue[t]&&(this.portCmdQueue[t]=[]),0==this.portCmdQueue[t].length?(this.portCmdQueue[t].push({buffer:o,cbk:n}),await this.sendBuffer(o)):(console.log("Cmd mise en attente"),this.portCmdQueue[t].push({buffer:o,cbk:n}))})}getHubDevices(){const t=[];for(const[e,n]of Object.entries(this.hubDevices))t.push($.extend({},n,{portId:parseInt(e)}));return t}getDeviceType(t){return d[this.hubDevices[t]]}async getPortInformation(t){const e=await this.getPortInformationRequest(t),{capabilities:n,count:o,output:i,input:a}=e,s=Math.max(a,i),r=[];for(let e=0;e<o;e++){const n={};if(s>>e){let o;o=await this.getPortModeInformationRequest(t,e,p.NAME),n.name=o.name,n[(o=await this.getPortModeInformationRequest(t,e,p.RAW)).type]={min:o.min,max:o.max},n[(o=await this.getPortModeInformationRequest(t,e,p.PCT)).type]={min:o.min,max:o.max},n[(o=await this.getPortModeInformationRequest(t,e,p.SI)).type]={min:o.min,max:o.max},o=await this.getPortModeInformationRequest(t,e,p.SYMBOL),n.unit=o.symbol,o=await this.getPortModeInformationRequest(t,e,p.VALUE_FORMAT);const{numValues:i,dataType:a,totalFigures:s,decimals:r}=o;n[o.type]={numValues:i,dataType:a,totalFigures:s,decimals:r}}r.push(n)}return{modes:r,capabilities:n}}async waitTestValue(e,n,o){return new Promise(async i=>{await this.subscribe(e,n,1,n=>{t("waitTestValue",n),o(n.value)&&(delete this.deviceModes[e],i())})})}getPortInformationRequest(t){return new Promise(async e=>{await this.sendMsg(s.PORT_INFORMATION_REQUEST,t,1),this.portCmdCallback[t]=e})}getPortModeInformationRequest(t,e,n){return new Promise(async o=>{await this.sendMsg(s.PORT_MODE_INFORMATION_REQUEST,t,e,n),this.portCmdCallback[t]=o})}decodeMsg(e){e.byteLength,e.getUint8(0);const n=e.getUint8(2);switch(t("decodeMsg",{msgType:r[n]}),n){case s.HUB_ATTACHED_IO:this.handlePortMsg(e);break;case s.GENERIC_ERROR_MESSAGES:this.handleGenericErrorMsg(e);break;case s.HUB_PROPERTIES:this.handleHubPropertyResponse(e);break;case s.PORT_OUTPUT_COMMAND_FEEDBACK:this.handlePortCommandFeedback(e);break;case s.PORT_MODE_INFORMATION:this.handlePortModeInformation(e);break;case s.PORT_INFORMATION:this.handlePortInformation(e);break;case s.PORT_VALUE_SINGLE:this.handlePortValueSingle(e)}}handleTiltSensorValue(t,e){let n;switch(t){case m.TILT_POS:n={yaw:e.getInt16(4,!0),pitch:e.getInt16(6,!0),roll:e.getInt16(8,!0)}}return n}handleMotorValue(t,e){let n;switch(t){case m.ABSOLUTE:n=e.getInt16(4,!0);break;case m.ROTATION:n=e.getInt32(4,!0);break;case m.SPEED:n=e.getInt8(4)}return n}handlePortValueSingle(t){const e=t.getUint8(3),n=this.hubDevices[e];if(null!=this.deviceModes[e]){const{mode:o,cbk:i}=this.deviceModes[e];let a=null;switch(n){case c.TECHNIC_LARGE_LINEAR_MOTOR:case c.TECHNIC_LARGE_ANGULAR_MOTOR_GREY:a=this.handleMotorValue(o,t);break;case c.TECHNIC_MEDIUM_HUB_TILT_SENSOR:a=this.handleTiltSensorValue(o,t)}null!=a&&"function"==typeof i&&i({mode:o,value:a,portId:e})}}handlePortModeInformation(e){const n=e.getUint8(3),o=e.getUint8(4),i=e.getUint8(5),a={portId:n,mode:o,type:h[i]};switch(i){case p.NAME:a.name=R(e.buffer.slice(6,e.byteLength));break;case p.RAW:case p.PCT:case p.SI:a.min=e.getFloat32(6,!0),a.max=e.getFloat32(10,!0);break;case p.SYMBOL:a.symbol=R(e.buffer.slice(6,e.byteLength));break;case p.VALUE_FORMAT:a.numValues=e.getUint8(6),a.dataType=["8bit","16bit","32bit","float"][e.getUint8(7)],a.totalFigures=e.getUint8(8),a.decimals=e.getUint8(9)}t("portModeInformation",a);const s=this.portCmdCallback[n];"function"==typeof s&&(s(a),delete this.portCmdCallback[n])}handlePortInformation(e){const n=e.getUint8(3);let o=e.getUint8(5);const i=e.getUint8(6),a=e.getUint16(7,!0),s=e.getUint16(9,!0);t(`Port ${n}, capabilities ${o}, total modes ${i}, \n                    input modes ${a}, output modes ${s}`);const r="output,input,logical combinable, logical synchronisable".split(",");let c=[];for(let t=0;t<4;t++)o>>t&1&&c.push(r[t]);const d={portId:n,capabilities:c.join(", "),count:i,input:a,output:s},l=this.portCmdCallback[n];"function"==typeof l&&l(d)}handleHubPropertyResponse(e){const n=e.getUint8(3);if(t({property:b[n]}),n==u.BATTERY_VOLTAGE){const n=e.getUint8(5);t({batteryLevel:n}),this.emit("batteryLevel",{batteryLevel:n})}else if(n==u.BUTTON_STATE){const n=e.getUint8(5);t({buttonState:n}),this.emit("buttonState",{buttonState:n})}}handleGenericErrorMsg(e){const n=e.getUint8(3),o=e.getUint8(4);t({cmdType:n,errorCode:l[o]}),this.emit("error",{cmdType:n,errorCode:l[o]})}handlePortCommandFeedback(e){for(let n=3;n<e.byteLength;n+=2){const o=e.getUint8(n),i=e.getUint8(n+1);if(t({portId:o,feedback:i}),10==i){const{cbk:e}=this.portCmdQueue[o].shift();"function"==typeof e&&e();const n=this.portCmdQueue[o][0];n&&(t("envoie cmd mise en attente"),this.sendBuffer(n.buffer))}}}handlePortMsg(t){const e=t.getUint8(3),n=t.getUint8(4),o=n?t.getUint16(5,!0):0,s=d[o]||"Unknown",r=a[n];if(console.log("handlePortMsg",{portId:e,eventName:r,deviceTypeName:s}),n==i.ATTACHED_IO)this.hubDevices[e]={type:s,name:O[e]},this.emit("attach",{portId:e,deviceTypeName:s});else if(n==i.DETACHED_IO)delete this.hubDevices[e],this.emit("detach",{portId:e});else if(n==i.ATTACHED_VIRTUAL_IO){const n=t.getUint8(7),o=t.getUint8(8);this.hubDevices[e]={type:"Virtual Port",name:v(n,o)},this.emit("attach",{portId:e,deviceTypeName:"Virtual Port"})}console.log("hubDevices",this)}}$$.service.registerService("hub",{init:function(){return{connect:async function(){t("connect");const e=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:[n]}),o=new M;return await o.init(e),o},Color:E,PortMap:T,PortMapNames:O,DeviceMode:m,BrakingStyle:_,DeviceTypeNames:d}}})}(),$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <div class="left">\n        <button bn-event="click: onConnect" bn-show="!connected">Connect to HUB</button>\n\n        <button bn-event="click: onShutdown" bn-show="connected">Shutdown</button>\n\n        <button bn-event="click: onHubInfo" bn-show="connected">Info</button>\n\n        <button bn-event="click: onAction">Action</button>\n\n        <button bn-event="click: onGamePad" bn-show="showGamepadButton">Gamepad</button>\n\n    </div>\n</div>\n\n<div class="controlBar"\n    bn-event="mousedown.w3-btn: onButtonDown, mouseup.w3-btn: onButtonUp, touchstart.w3-btn: onButtonDown, touchend.w3-btn: onButtonUp"\n    bn-show="isInit">\n    <div class="controlBarItem1">\n        <div class="top">\n            <button bn-icon="fas fa-angle-up" data-cmd="2"></button>\n        </div>\n        <div class="middle">\n            <button bn-icon="fas fa-angle-left" data-cmd="3"></button>\n            <button bn-icon="fas fa-angle-right" data-cmd="4"></button>\n        </div>\n        <div class="bottom">\n            <button bn-icon="fas fa-angle-down" data-cmd="1"></button>\n        </div>\n\n    </div>\n    <div class="controlBarItem2">\n        <div class="top">\n            <button bn-icon="fas fa-angle-up" data-cmd="5"></button>\n        </div>\n        <div class="bottom">\n            <button bn-icon="fas fa-angle-down" data-cmd="6"></button>\n        </div>\n\n    </div>\n\n</div>',deps:["breizbot.pager","hub","breizbot.gamepad","breizbot.appData"],props:{},init:async function(t,e,n,o,i){const a=i.getData();console.log("appData",a);let s=null;t.find("button").addClass("w3-btn w3-blue");let r=null,c=null;const d=$$.viewController(t,{data:{connected:!1,batteryLevel:0,gamepadConnected:!1,showGamepadButton:function(){return this.gamepadConnected}},events:{onAction:function(){e.pushPage("action",{title:"Action",props:{data:s},onReturn:function(t){s=t}})},onGamePad:function(){o.off("buttonUp",u),o.off("buttonDown",l),e.pushPage("gamepad",{title:"Gamepad",props:{mapping:c},onBack:b,onReturn:async t=>{c=t,console.log("onReturn",c),a[t.id]=c,await i.saveData(a),b()}})},onConnect:async function(){r=await n.connect(),await r.createVirtualPort(n.PortMap.D,n.PortMap.B),r.on("disconnected",()=>{console.log("disconnected",r),d.setData({connected:!1}),r=null}),r.on("error",t=>{console.log(t)}),r.on("batteryLevel",t=>{const{batteryLevel:e}=t;d.setData({batteryLevel:e})}),d.setData({connected:!0})},onHubInfo:async function(){console.log("onHubInfo",r.getHubDevices()),e.pushPage("hubinfo",{title:"Hub Info",props:{hubDevice:r}})},onShutdown:async function(){await r.shutdown(),r=null}}});function l(t){if(c&&d.model.connected){const{port:e,action:o}=c.buttons[t.id];if(console.log({port:e,action:o}),"None"!=e){r.createMotor(n.PortMap[e]).setPower("FWD"==o?100:-100)}}}function u(t){if(c&&d.model.connected){const{port:e,action:o}=c.buttons[t.id];if(console.log({port:e,action:o}),"None"!=e){r.createMotor(n.PortMap[e]).setPower(0)}}}function b(){console.log("initCbk"),o.on("buttonUp",u),o.on("buttonDown",l)}o.on("connected",t=>{console.log("gamepad connnected",t),c=a[t.id],console.log({gamepadMapping:c}),d.setData({gamepadConnected:!0}),o.checkGamePadStatus(),b()}),o.on("disconnected",t=>{console.log("gamepad disconnected"),d.setData({gamepadConnected:!1}),c=null})}}),$$.control.registerControl("action",{template:'<div>\n    <form bn-event="submit: onSubmit" bn-bind="form">\n\n        <div class="group">\n            <label>Name</label>\n            <input type="text" required name="name">\n        </div>\n\n        <div class="group">\n            <label>Type</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: actionTypes}" name="type" bn-update="comboboxchange"\n                bn-val="type"></div>\n        </div>\n\n\n        <div bn-if="isSpeed">\n            <div class="group">\n                <label>Port</label>\n                <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port"></div>\n            </div>\n\n            <div class="group">\n                <label>Speed</label>\n                <input type="number" required name="speed" min="-100" max="100">\n            </div>\n        </div>\n\n        <div bn-if="isDblSpeed">\n            <div class="group">\n                <label>Port1</label>\n                <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port1"></div>\n            </div>\n\n            <div class="group">\n                <label>Speed1</label>\n                <input type="number" required name="speed1" min="-100" max="100">\n            </div>\n\n            <div class="group">\n                <label>Port2</label>\n                <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port2"></div>\n            </div>\n\n            <div class="group">\n                <label>Speed2</label>\n                <input type="number" required name="speed2" min="-100" max="100">\n            </div>           \n        </div>\n\n        <input type="submit" hidden bn-bind="submit">\n    </form>\n</div>',deps:["breizbot.pager"],props:{data:{}},init:function(t,e){console.log("props",this.props);let{data:n}=this.props;n=n||{};const o="ABCD".split(""),i=$$.viewController(t,{data:{type:n.type||"SPEED",actionTypes:["SPEED","POWER","DBLSPEED"],ports:o,isType:function(t){return this.type==t},isSpeed:function(){return this.isType("SPEED")},isDblSpeed:function(){return this.isType("DBLSPEED")}},events:{onSubmit:function(t){t.preventDefault(),console.log("data",$(this).getFormData()),e.popPage($(this).getFormData())}}});i.scope.form.setFormData(n),this.getButtons=function(){return{apply:{title:"Apply",icon:"fas fa-check",onClick:function(){i.scope.submit.click()}}}}}}),$$.control.registerControl("gamepad",{template:'<div>\n    <h2 bn-text="id"></h2>\n</div>\n\n<h3>Axes</h3>\n<div>\n    <table class="w3-table-all axeTable">\n        <thead>\n            <tr>\n                <th>Command</th>\n                <th>Hub</th>\n                <th>Port</th>\n            </tr>\n        </thead>\n        <tbody bn-each="axes" bn-bind="axes" bn-index="idx">\n            <tr>\n                <td bn-text="getAxeLabel"></td>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: hubs}" bn-val="$scope.$i.hub" class="hub"></div>\n                </td>                \n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: ports}" bn-val="$scope.$i.port" class="port"></div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<h3>Buttons</h3>\n<div class="commandTable">\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Command</th>\n                <th>Hub</th>\n                <th>Port</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="buttons" bn-bind="buttons" bn-index="idx">\n            <tr>\n                <td bn-text="getButtonLabel"></td>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: hubs}" bn-val="$scope.$i.hub" class="hub"></div>\n                </td>                 \n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: ports}" bn-val="$scope.$i.port" class="port"></div>\n                </td>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: actions}" bn-val="$scope.$i.action" class="action"></div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","breizbot.gamepad"],props:{mapping:null},init:function(t,e,n){const{mapping:o}=this.props;console.log({mapping:o});let i=[],a=[];const s=n.getGamepads()[0];if(console.log({info:s}),null!=o)i=o.axes,a=o.buttons;else{for(let t=0;t<s.axes.length;t++)i.push({port:"None",hub:"HUB1"});for(let t=0;t<s.buttons.length;t++)a.push({port:"None",action:"FWD",hub:"HUB1"})}const r="ABCD".split("");r.unshift("None");function c(t){const{value:e,id:n}=t;0!=e?b.find("tr").eq(n).find("td").eq(0).addClass("pressed"):b.find("tr").eq(n).find("td").eq(0).removeClass("pressed")}function d(t){p.find("tr").eq(t.id).find("td").eq(0).addClass("pressed")}function l(t){p.find("tr").eq(t.id).find("td").eq(0).removeClass("pressed")}n.on("axe",c),n.on("buttonDown",d),n.on("buttonUp",l),this.dispose=function(){console.log("dispose"),n.off("axe",c),n.off("buttonDown",d),n.off("buttonUp",l)};const u=$$.viewController(t,{data:{id:s.id,axes:i,buttons:a,ports:r,actions:["FWD","REV"],hubs:["HUB1","HUB2"],getButtonLabel:function(t){return`Button ${t.idx+1}`},getAxeLabel:function(t){return`Axe ${t.idx+1}`}},events:{}}),b=u.scope.axes,p=u.scope.buttons;function h(){const t={id:s.id,axes:[],buttons:[]};return b.find("tr").each(function(e){const n=$(this).find(".hub").getValue(),o=$(this).find(".port").getValue();t.axes.push({hub:n,port:o})}),p.find("tr").each(function(e){const n=$(this).find(".hub").getValue(),o=$(this).find(".port").getValue(),i=$(this).find(".action").getValue();t.buttons.push({hub:n,port:o,action:i})}),t}this.getButtons=function(){return{check:{icon:"fa fa-check",title:"Apply",onClick:function(){console.log(h()),e.popPage(h())}}}}}}),$$.control.registerControl("hubinfo",{template:'<div class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="mousedown.action: onMouseUp, mouseup.action:onMouseDown, click.portInfo: onInfo2">\n            <tr>\n                <td bn-text="$scope.$i.portName"></td>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-btn w3-green action" data-action="forward">FWD</button>\n                    <button class="w3-btn w3-green action" data-action="backward">BKWD</button>\n                    <button class="w3-btn w3-blue portInfo">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-btn: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-btn w3-blue">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub"],props:{hubDevice:null},init:function(t,e,n){const o=this.props.hubDevice,i=o.getHubDevices();console.log("devices",i);const a=[],s=[];for(const t of i){const e=t.portId;e<50?s.push({portName:t.name,portId:e,deviceTypeName:t.type}):a.push({portId:e,deviceTypeName:t.type})}function r(t,n){e.pushPage("info",{title:n,props:{portId:t,hubDevice:o}})}function c(t){const e=t.closest("tr").index();return u.model.externalDevices[e].portId}function d(t){console.log("attach",t);const{portId:e,deviceTypeName:n}=t;i[e]=n}function l(t){console.log("detach",t),delete i[t.portId]}o.on("attach",d),o.on("detach",l),this.dispose=function(){console.log("hubInfo dispose"),o.off("attach",d),o.off("detach",l)};const u=$$.viewController(t,{data:{internalDevices:a,externalDevices:s},events:{onMouseUp:function(){const t=$(this).data("action"),e=c($(this));switch(t){case"forward":o.createMotor(e).setPower(100);break;case"backward":o.createMotor(e).setPower(-100)}},onMouseDown:function(){const t=c($(this));o.createMotor(t).setPower(0)},onInfo:function(){const t=$(this).closest("tr").index(),{portId:e,deviceTypeName:n}=u.model.internalDevices[t];r(e,n)},onInfo2:function(){const t=$(this).closest("tr").index(),{portId:e,deviceTypeName:n}=u.model.externalDevices[t];r(e,n)}}})}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>MODE</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>PCT</th>\n                <th>SI</th>\n                <th>VALUE FORMAT</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n                <td>\n                    dataType: <span bn-text="$scope.$i.VALUE_FORMAT.dataType"></span><br>\n                    numValues: <span bn-text="$scope.$i.VALUE_FORMAT.numValues"></span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(t,e,n){const{portId:o}=this.props,i=this.props.hubDevice,a=$$.viewController(t,{data:{modes:[],capabilities:""},events:{}});!async function(){const t=await i.getPortInformation(o);console.log("portInfo",t);const{modes:e,capabilities:n}=t;a.setData({modes:e,capabilities:n})}()}});