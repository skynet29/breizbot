$$.service.registerService("hub",{init:function(){let t=null,e={};const n=new EventEmitter2,o={},a={},i={},c="00001623-1212-efde-1623-785feabcd123",s="00001624-1212-efde-1623-785feabcd123",r=function(...t){0},{getEnumName:E}=$$.util,T={DETACHED_IO:0,ATTACHED_IO:1,ATTACHED_VIRTUAL_IO:2},_=E(T),l={HUB_PROPERTIES:1,HUB_ACTIONS:2,HUB_ALERTS:3,HUB_ATTACHED_IO:4,GENERIC_ERROR_MESSAGES:5,HW_NETWORK_COMMANDS:8,FW_UPDATE_GO_INTO_BOOT_MODE:16,FW_UPDATE_LOCK_MEMORY:17,FW_UPDATE_LOCK_STATUS_REQUEST:18,FW_LOCK_STATUS:19,PORT_INFORMATION_REQUEST:33,PORT_MODE_INFORMATION_REQUEST:34,PORT_INPUT_FORMAT_SETUP_SINGLE:65,PORT_INPUT_FORMAT_SETUP_COMBINEDMODE:66,PORT_INFORMATION:67,PORT_MODE_INFORMATION:68,PORT_VALUE_SINGLE:69,PORT_VALUE_COMBINEDMODE:70,PORT_INPUT_FORMAT_SINGLE:71,PORT_INPUT_FORMAT_COMBINEDMODE:72,VIRTUAL_PORT_SETUP:97,PORT_OUTPUT_COMMAND:129,PORT_OUTPUT_COMMAND_FEEDBACK:130},O=(E(l),{UNKNOWN:0,SIMPLE_MEDIUM_LINEAR_MOTOR:1,TRAIN_MOTOR:2,LIGHT:8,VOLTAGE_SENSOR:20,CURRENT_SENSOR:21,PIEZO_BUZZER:22,HUB_LED:23,TILT_SENSOR:34,MOTION_SENSOR:35,COLOR_DISTANCE_SENSOR:37,MEDIUM_LINEAR_MOTOR:38,MOVE_HUB_MEDIUM_LINEAR_MOTOR:39,MOVE_HUB_TILT_SENSOR:40,DUPLO_TRAIN_BASE_MOTOR:41,DUPLO_TRAIN_BASE_SPEAKER:42,DUPLO_TRAIN_BASE_COLOR_SENSOR:43,DUPLO_TRAIN_BASE_SPEEDOMETER:44,TECHNIC_LARGE_LINEAR_MOTOR:46,TECHNIC_XLARGE_LINEAR_MOTOR:47,TECHNIC_MEDIUM_ANGULAR_MOTOR:48,TECHNIC_LARGE_ANGULAR_MOTOR:49,TECHNIC_MEDIUM_HUB_GEST_SENSOR:54,REMOTE_CONTROL_BUTTON:55,REMOTE_CONTROL_RSSI:56,TECHNIC_MEDIUM_HUB_ACCELEROMETER:57,TECHNIC_MEDIUM_HUB_GYRO_SENSOR:58,TECHNIC_MEDIUM_HUB_TILT_SENSOR:59,TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR:60,TECHNIC_COLOR_SENSOR:61,TECHNIC_DISTANCE_SENSOR:62,TECHNIC_FORCE_SENSOR:63,TECHNIC_3X3_COLOR_LIGHT_MATRIX:64,TECHNIC_SMALL_ANGULAR_MOTOR:65,MARIO_ACCELEROMETER:71,MARIO_BARCODE_SENSOR:73,MARIO_PANTS_SENSOR:74,TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY:75,TECHNIC_LARGE_ANGULAR_MOTOR_GREY:76}),u=E(O),d=E({ACK:1,MACK:2,BUFFER_OVERFLOW:3,TIMEOUT:4,COMMAND_NOT_RECOGNIZED:5,INVALID_USE:6,OVERCURRENT:7,INTERNAL_ERROR:8}),R={ADVERTISING_NAME:1,BUTTON_STATE:2,FW_VERSION:3,HW_VERSION:4,RSSI:5,BATTERY_VOLTAGE:6,BATTERY_TYPE:7,MANUFACTURER_NAME:8,RADIO_FIRMWARE_VERSION:9,LWP_PROTOCOL_VERSION:10,SYSTEM_TYPE_ID:11,HW_NETWORK_ID:12,PRIMARY_MAC_ADDRESS:13,SECONDARY_MAC_ADDRESS:14,HW_NETWORK_FAMILY:15},I=E(R),A={NAME:0,RAW:1,PCT:2,SI:3,SYMBOL:4,MAPPING:5,USED_INTERNALLY:6,MOTOR_BIAS:7,CAPABILITY_BITS:8,VALUE_FORMAT:128},p=E(A),N={A:0,B:1,C:2,D:3,HUB_LED:50,CURRENT_SENSOR:59,VOLTAGE_SENSOR:60,ACCELEROMETER:97,GYRO_SENSOR:98,TILT_SENSOR:99},b={POWER:0,SPEED:1,ROTATION:2,ABSOLUTE:3,COLOR:0,RGB:1,TILT_POS:0},S={FLOAT:0,HOLD:126,BRAKE:127},M=E(N),U={};U[l.HUB_ATTACHED_IO]=function(t){const o=t.getUint8(3),a=t.getUint8(4),i=a?t.getUint16(5,!0):0,c=u[i]||"Unknown",s=_[a];if(r("handlePortMsg",{portId:o,eventName:s,deviceTypeName:c}),a==T.ATTACHED_IO)e[o]=i,n.emit("attach",{portId:o,deviceTypeName:c});else if(a==T.DETACHED_IO)delete e[o],n.emit("detach",{portId:o});else if(a==T.ATTACHED_VIRTUAL_IO){const e=M[t.getUint8(7)],a=M[t.getUint8(8)];M[o]=`${e}_${a}`,r({portIdA:e,portIdB:a}),n.emit("attach",{portId:o,deviceTypeName:"Virtual Port"})}},U[l.GENERIC_ERROR_MESSAGES]=function(t){const e=t.getUint8(3),o=t.getUint8(4);r({cmdType:e,errorCode:d[o]}),n.emit("error",{cmdType:e,errorCode:d[o]})},U[l.HUB_PROPERTIES]=function(t){const e=t.getUint8(3);if(r({property:I[e]}),e==R.BATTERY_VOLTAGE){const e=t.getUint8(5);r({batteryLevel:e}),n.emit("batteryLevel",{batteryLevel:e})}else if(e==R.BUTTON_STATE){const e=t.getUint8(5);r({buttonState:e}),n.emit("buttonState",{buttonState:e})}},U[l.PORT_OUTPUT_COMMAND_FEEDBACK]=function(t){for(let e=3;e<t.byteLength;e+=2){const n=t.getUint8(e),o=t.getUint8(e+1);if(r({portId:n,feedback:o}),10==o||44==o){const{cbk:t}=i[n].shift();"function"==typeof t&&(r("call cbk"),t());const e=i[n][0];e&&(r("envoie cmd mise en attente"),D(e.buffer))}}},U[l.PORT_INFORMATION]=function(t){const e=t.getUint8(3);let n=t.getUint8(5);const a=t.getUint8(6),i=t.getUint16(7,!0),c=t.getUint16(9,!0);r(`Port ${e}, capabilities ${n}, total modes ${a}, \n                input modes ${i}, output modes ${c}`);const s="output,input,logical combinable, logical synchronisable".split(",");let E=[];for(let t=0;t<4;t++)n>>t&1&&E.push(s[t]);const T={portId:e,capabilities:E.join(", "),count:a,input:i,output:c},_=o[e];"function"==typeof _&&_(T)},U[l.PORT_MODE_INFORMATION]=function(t){const e=t.getUint8(3),n=t.getUint8(4),a=t.getUint8(5),i={portId:e,mode:n,type:p[a]};switch(a){case A.NAME:i.name=w(t.buffer.slice(6,t.byteLength));break;case A.RAW:case A.PCT:case A.SI:i.min=t.getFloat32(6,!0),i.max=t.getFloat32(10,!0);break;case A.SYMBOL:i.symbol=w(t.buffer.slice(6,t.byteLength));break;case A.VALUE_FORMAT:i.numValues=t.getUint8(6),i.dataType=["8bit","16bit","32bit","float"][t.getUint8(7)],i.totalFigures=t.getUint8(8),i.decimals=t.getUint8(9)}r("portModeInformation",i);const c=o[e];"function"==typeof c&&(c(i),delete o[e])},U[l.PORT_VALUE_SINGLE]=function(t){const n=t.getUint8(3),o=e[n],i=C[o];if("function"==typeof i&&null!=a[n]){const{mode:e,cbk:o}=a[n],c=i(e,t);"function"==typeof o&&o({mode:e,value:c,portId:n})}};const C={};function f(t,e){let n;switch(t){case b.ABSOLUTE:n=e.getInt16(4,!0);break;case b.ROTATION:n=e.getInt32(4,!0);break;case b.SPEED:n=e.getInt8(4)}return n}function w(t){const e=new Uint8Array(t);let n="";for(let t=0;t<e.byteLength&&0!=e[t];t++)n+=String.fromCharCode(e[t]);return n}function m(t){for(const[e,n]of Object.entries(M))if(n==t)return e;return-1}function L(t,...e){const n=e.flat(2),o=n.length+3,a=new ArrayBuffer(o),i=new Uint8Array(a);return i[0]=o,i[1]=0,i[2]=t,i.set(n,3),a}function D(e){return t.writeValueWithoutResponse(e)}function P(t,...e){return D(L(t,e))}function g(t,e,n=1,o=null){return a[t]={mode:e,cbk:o},P(l.PORT_INPUT_FORMAT_SETUP_SINGLE,t,e,function(t){const e=new Uint8Array(4);return new DataView(e.buffer).setUint32(0,t,!0),Array.from(e)}(n),1)}function h(t,e){return P(l.VIRTUAL_PORT_SETUP,1,t,e)}function y(t,e,n){return new Promise(async a=>{await P(l.PORT_MODE_INFORMATION_REQUEST,t,e,n),o[t]=a})}async function v(t,...e){return r("writePortCommand",{portId:t}),new Promise(async n=>{const o=L(l.PORT_OUTPUT_COMMAND,t,17,e);null==i[t]&&(i[t]=[]),0==i[t].length?(i[t].push({buffer:o,cbk:n}),await D(o)):(r("Cmd mise en attente"),i[t].push({buffer:o,cbk:n}))})}async function B(t,e,n){return new Promise(async o=>{await g(t,e,1,e=>{r("waitTestValue",e),n(e.value)&&(delete a[t],o())})})}C[O.TECHNIC_LARGE_LINEAR_MOTOR]=f,C[O.TECHNIC_LARGE_ANGULAR_MOTOR_GREY]=f,C[O.TECHNIC_MEDIUM_HUB_TILT_SENSOR]=function(t,e){let n;switch(t){case b.TILT_POS:n={yaw:e.getInt16(4,!0),pitch:e.getInt16(6,!0),roll:e.getInt16(8,!0)}}return n};const $=100;function H(t){const e=new Uint8Array(4);return new DataView(e.buffer).setInt32(0,t,!0),Array.from(e)}function G(t,e,...n){return v(t,81,e,n)}function x(t){!function(t){t.byteLength,t.getUint8(0);const e=t.getUint8(2),n=U[e];"function"==typeof n&&n(t)}(t.target.value)}function F(){r("onGattServerDisconnected"),n.emit("disconnected")}return{connect:async function(){r("connect"),e={};const n=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:[c]});n.addEventListener("gattserverdisconnected",F);const o=await n.gatt.connect();r("Connected");const a=await o.getPrimaryService(c);(t=await a.getCharacteristic(s)).addEventListener("characteristicvaluechanged",x),t.startNotifications(),await P(l.HUB_PROPERTIES,R.BUTTON_STATE,2)},shutdown:function(){return P(l.HUB_ACTIONS,1)},getDeviceType:function(t){return u[e[t]]},subscribe:g,waitTestValue:B,createVirtualPort:h,getPortInformation:async function(t){const e=await function(t){return new Promise(async e=>{await P(l.PORT_INFORMATION_REQUEST,t,1),o[t]=e})}(t),{capabilities:n,count:a,output:i,input:c}=e,s=Math.max(c,i),r=[];for(let e=0;e<a;e++){const n={};if(s>>e){let o;o=await y(t,e,A.NAME),n.name=o.name,n[(o=await y(t,e,A.RAW)).type]={min:o.min,max:o.max},n[(o=await y(t,e,A.PCT)).type]={min:o.min,max:o.max},n[(o=await y(t,e,A.SI)).type]={min:o.min,max:o.max},o=await y(t,e,A.SYMBOL),n.unit=o.symbol,o=await y(t,e,A.VALUE_FORMAT);const{numValues:a,dataType:i,totalFigures:c,decimals:s}=o;n[o.type]={numValues:a,dataType:i,totalFigures:c,decimals:s}}r.push(n)}return{modes:r,capabilities:n}},getPortIdFromName:m,on:n.on.bind(n),Motor:function(t){return{setPower:function(e){return G(t,b.POWER,e)},setSpeed:function(e){return v(t,7,e,$,0)},rotateDegrees:function(e,n,o=S.BRAKE){return v(t,11,H(e),n,$,o)},gotoAngle:function(e,n,o=S.BRAKE){return v(t,13,H(e),n,$,o)},setSpeedForTime:function(e,n,o=S.BRAKE){return v(t,9,function(t){const e=new Uint8Array(2);return new DataView(e.buffer).setInt16(0,t,!0),Array.from(e)}(n),e,$,o)},resetZero:function(){return G(t,b.ROTATION,0,0,0,0)},waitSpeed:function(e){return B(t,b.SPEED,e)}}},DoubleMotor:async function(t,e){await h(t,e);const n=`${M[t]}_${M[e]}`;return{setSpeed:function(t,e){return v(m(n),8,t,e,$,0)}}},Led:function(t){return{setColor:async function(e){return await g(t,b.COLOR),G(t,b.COLOR,e)},setRGBColor:async function(e,n,o){return await g(t,b.RGB),G(t,b.RGB,e,n,o)}}},Color:{BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,CYAN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:255},PortMap:N,PortMapNames:M,DeviceMode:b,BrakingStyle:S}}}),$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <div class="left">\n        <button class="w3-blue w3-button" \n            bn-event="click: onConnect"\n            bn-show="!connected"\n        >Connect to HUB</button>\n    \n        <button class="w3-blue w3-button" \n            bn-event="click: onShutdown"\n            bn-show="connected"\n        >Shutdown</button>\n    \n        <button class="w3-blue w3-button" \n            bn-event="click: onCalibrate"\n            bn-show="connected"\n        >Calibrate</button>\n\n        <button class="w3-blue w3-button" \n            bn-event="click: onChangeMode"\n            bn-show="connected"\n        >Change Mode</button>\n        \n        <button class="w3-blue w3-button" \n            bn-event="click: onSendMsg"\n            bn-show="connected"\n        >Send Msg</button>\n\n        <div bn-show="connected">\n            Max Speed:<span bn-text="fmtMaxSpeed"></span>\n        </div>\n    </div>\n    <div bn-show="connected">\n        Mode:\n        <span bn-text="mode"></span>\n    </div>\n</div>\n\n\n<div bn-show="connected" class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="mousedown.action: onMouseUp, mouseup.action:onMouseDown, click.portInfo: onInfo2">\n            <tr>\n                <td bn-text="$scope.$i.portName"></td>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-button w3-green action" data-action="forward">FWD</button>\n                    <button class="w3-button w3-green action" data-action="backward">BKWD</button>\n                    <button class="w3-button w3-blue portInfo">INFO</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-button: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-button w3-blue">INFO</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub","breizbot.gamepad"],props:{},init:async function(t,e,n,o){let a=0,i=0,c=null,s=0;const r=$$.util.mapRange(-1,1,100,0),E=n.Motor(n.PortMap.A),T=n.Motor(n.PortMap.B),_=n.Motor(n.PortMap.C),l=n.Motor(n.PortMap.D);let O=null;const u=n.Led(n.PortMap.HUB_LED);function d(){const{maxSpeed:t}=N.model;return O.setSpeed(-a*t,-i*t)}function R(t){N.setData({maxSpeed:Math.ceil(r(t))}),0==a&&0==i||d()}function I(t){const e=t.closest("tr").index();return N.model.externalDevices[e].portId}function A(t,n){e.pushPage("info",{title:n,props:{portId:t}})}async function p(){const{mode:t}=N.model;await O.setSpeed(0,0),a=0,i=0,"RUNNING"==t?(await u.setColor(n.Color.YELLOW),await E.rotateDegrees(180,50),await u.setColor(n.Color.GREEN),N.setData({mode:"MANIPULATOR"})):"MANIPULATOR"==t&&(await u.setColor(n.Color.YELLOW),await E.rotateDegrees(180,-50),await u.setColor(n.Color.BLUE),N.setData({mode:"RUNNING"}))}o.on("axe",t=>{const{id:e,value:n}=t;2==e&&R(n)}),o.on("buttonDown",async t=>{console.log("buttonDown",t);const{id:e}=t;if(0==e)await p();else if(5==e)await T.setSpeed(100);else if(6==e)await T.setSpeed(-100);else if("RUNNING"==N.model.mode){switch(e){case 2:a=1,i=1;break;case 1:a=-1,i=-1;break;case 3:a=1,i=-1;break;case 4:a=-1,i=1}0!=a&&0!=i&&await d()}else if("MANIPULATOR"==N.model.mode){switch(e){case 2:c=_,s=-100;break;case 1:c=_,s=100;break;case 3:c=l,s=-100;break;case 4:c=l,s=100}0!=s&&await c.setSpeed(s)}}),o.on("buttonUp",async t=>{console.log("buttonUp",t);const{id:e}=t;5==e||6==e?await T.setPower(0):0!=a||0!=i?(a=0,i=0,await O.setSpeed(0,0)):[1,2,3,4].includes(e)&&0!=s&&(s=0,await c.setPower(0))}),n.on("disconnected",()=>{N.setData({connected:!1})}),n.on("attach",t=>{const{portId:e,deviceTypeName:o}=t;e<50?(N.model.externalDevices.push({portId:e,portName:n.PortMapNames[t.portId],deviceTypeName:o}),N.model.externalDevices.sort((t,e)=>t.portId-e.portId)):N.model.internalDevices.push({deviceTypeName:o,portId:e}),N.update()}),n.on("detach",t=>{const e=N.model.externalDevices.findIndex(e=>e.portId==t.portId);console.log("idx",e),N.model.externalDevices.splice(e,1),N.update()}),n.on("error",t=>{console.log(t)}),n.on("batteryLevel",t=>{const{batteryLevel:e}=t;N.setData({batteryLevel:e})});const N=$$.viewController(t,{data:{connected:!1,internalDevices:[],externalDevices:[],batteryLevel:0,mode:"UNKNOWN",maxSpeed:100,fmtMaxSpeed:function(){return this.maxSpeed.toLocaleString().padStart(4)}},events:{onMouseUp:function(){const t=$(this).data("action"),e=I($(this));switch(t){case"forward":n.Motor(e).setPower(100);break;case"backward":n.Motor(e).setPower(-100)}},onMouseDown:function(){const t=I($(this));n.Motor(t).setPower(0)},onConnect:async function(){await n.connect(),N.setData({connected:!0}),O=await n.DoubleMotor(n.PortMap.C,n.PortMap.D),await n.subscribe(n.PortMap.TILT_SENSOR,n.DeviceMode.TILT_POS,2,t=>{console.log("TILT POS",t.value)})},onCalibrate:async function(){console.log("onCalibrate"),N.setData({mode:"CALIBRATING"}),console.log("step 1"),await u.setColor(n.Color.RED),await E.setSpeed(-20),await $$.util.wait(200),await E.setSpeed(20),await E.waitSpeed(t=>t>5),console.log("step 2"),await E.waitSpeed(t=>t<6),console.log("step 3"),await E.setPower(0),await $$.util.wait(300),await E.rotateDegrees(-220,-20),await u.setColor(n.Color.BLUE),N.setData({mode:"RUNNING"})},onChangeMode:p,onSendMsg:async function(){console.log("onSendMsg")},onShutdown:async function(){await n.shutdown()},onInfo:function(){const t=$(this).closest("tr").index(),{portId:e,deviceTypeName:n}=N.model.internalDevices[t];A(e,n)},onInfo2:function(){const t=$(this).closest("tr").index(),{portId:e,deviceTypeName:n}=N.model.externalDevices[t];A(e,n)}}});o.on("connected",t=>{console.log("gamepad connnected",t),o.checkGamePadStatus(),null!=t.axes[2]&&R(t.axes[2])})}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>NAME</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>PCT</th>\n                <th>SI</th>\n                <th>VALUE FORMAT</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n                <td>\n                    dataType: <span bn-text="$scope.$i.VALUE_FORMAT.dataType"></span><br>\n                    numValues: <span bn-text="$scope.$i.VALUE_FORMAT.numValues"></span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(t,e,n){const{portId:o}=this.props,a=$$.viewController(t,{data:{modes:[],capabilities:""},events:{}});!async function(){const t=await n.getPortInformation(o);console.log("portInfo",t);const{modes:e,capabilities:i}=t;a.setData({modes:e,capabilities:i})}()}});