$$.service.registerService("hub",{init:function(){let t=null,e=null,n=null,E=null,o={};const _=new EventEmitter2;const O=function(...t){0};function T(t){const e={};return Object.entries(t).forEach(([t,n])=>{e[n]=t}),e}const R={DETACHED_IO:0,ATTACHED_IO:1,ATTACHED_VIRTUAL_IO:2},c=T(R),i={HUB_PROPERTIES:1,HUB_ACTIONS:2,HUB_ALERTS:3,HUB_ATTACHED_IO:4,GENERIC_ERROR_MESSAGES:5,HW_NETWORK_COMMANDS:8,FW_UPDATE_GO_INTO_BOOT_MODE:16,FW_UPDATE_LOCK_MEMORY:17,FW_UPDATE_LOCK_STATUS_REQUEST:18,FW_LOCK_STATUS:19,PORT_INFORMATION_REQUEST:33,PORT_MODE_INFORMATION_REQUEST:34,PORT_INPUT_FORMAT_SETUP_SINGLE:65,PORT_INPUT_FORMAT_SETUP_COMBINEDMODE:66,PORT_INFORMATION:67,PORT_MODE_INFORMATION:68,PORT_VALUE_SINGLE:69,PORT_VALUE_COMBINEDMODE:70,PORT_INPUT_FORMAT_SINGLE:71,PORT_INPUT_FORMAT_COMBINEDMODE:72,VIRTUAL_PORT_SETUP:97,PORT_OUTPUT_COMMAND:129,PORT_OUTPUT_COMMAND_FEEDBACK:130},r=T(i),N=T({UNKNOWN:0,SIMPLE_MEDIUM_LINEAR_MOTOR:1,TRAIN_MOTOR:2,LIGHT:8,VOLTAGE_SENSOR:20,CURRENT_SENSOR:21,PIEZO_BUZZER:22,HUB_LED:23,TILT_SENSOR:34,MOTION_SENSOR:35,COLOR_DISTANCE_SENSOR:37,MEDIUM_LINEAR_MOTOR:38,MOVE_HUB_MEDIUM_LINEAR_MOTOR:39,MOVE_HUB_TILT_SENSOR:40,DUPLO_TRAIN_BASE_MOTOR:41,DUPLO_TRAIN_BASE_SPEAKER:42,DUPLO_TRAIN_BASE_COLOR_SENSOR:43,DUPLO_TRAIN_BASE_SPEEDOMETER:44,TECHNIC_LARGE_LINEAR_MOTOR:46,TECHNIC_XLARGE_LINEAR_MOTOR:47,TECHNIC_MEDIUM_ANGULAR_MOTOR:48,TECHNIC_LARGE_ANGULAR_MOTOR:49,TECHNIC_MEDIUM_HUB_GEST_SENSOR:54,REMOTE_CONTROL_BUTTON:55,REMOTE_CONTROL_RSSI:56,TECHNIC_MEDIUM_HUB_ACCELEROMETER:57,TECHNIC_MEDIUM_HUB_GYRO_SENSOR:58,TECHNIC_MEDIUM_HUB_TILT_SENSOR:59,TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR:60,TECHNIC_COLOR_SENSOR:61,TECHNIC_DISTANCE_SENSOR:62,TECHNIC_FORCE_SENSOR:63,TECHNIC_3X3_COLOR_LIGHT_MATRIX:64,TECHNIC_SMALL_ANGULAR_MOTOR:65,MARIO_ACCELEROMETER:71,MARIO_BARCODE_SENSOR:73,MARIO_PANTS_SENSOR:74,TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY:75,TECHNIC_LARGE_ANGULAR_MOTOR_GREY:76}),a={ADVERTISING_NAME:1,BUTTON_STATE:2,FW_VERSION:3,HW_VERSION:4,RSSI:5,BATTERY_VOLTAGE:6,BATTERY_TYPE:7,MANUFACTURER_NAME:8,RADIO_FIRMWARE_VERSION:9,LWP_PROTOCOL_VERSION:10,SYSTEM_TYPE_ID:11,HW_NETWORK_ID:12,PRIMARY_MAC_ADDRESS:13,SECONDARY_MAC_ADDRESS:14,HW_NETWORK_FAMILY:15},I=T(a),A=T({ACK:1,MACK:2,BUFFER_OVERFLOW:3,TIMEOUT:4,COMMAND_NOT_RECOGNIZED:5,INVALID_USE:6,OVERCURRENT:7,INTERNAL_ERROR:8}),s={A:0,B:1,C:2,D:3,HUB_LED:50,CURRENT_SENSOR:59,VOLTAGE_SENSOR:60,ACCELEROMETER:97,GYRO_SENSOR:98,TILT_SENSOR:99},S=T(s),M={};async function d(t,...e){O("sendMsg",{type:t,data:e});const n=e.length+3,o=new ArrayBuffer(n),_=new Uint8Array(o);_[0]=n,_[1]=0,_[2]=t,_.set(e,3),O(_),await E.writeValueWithoutResponse(o)}function C(t,e,...n){return d(i.PORT_OUTPUT_COMMAND,t,17,81,e,n)}function U(t){!function(t){const e=t.byteLength,n=t.getUint8(0),E=t.getUint8(2);O("decodeMsg",{msgLen:n,bufferLen:e,msgType:r[E]});const o=M[E];"function"==typeof o&&o(t)}(t.target.value)}function u(){O("onGattServerDisconnected"),_.emit("disconnected")}return M[i.HUB_ATTACHED_IO]=function(t){const e=t.getUint8(3),n=t.getUint8(4),E=n?t.getUint16(5,!0):0,T=N[E]||"Unknown",i=c[n];if(O("handlePortMsg",{portId:e,eventName:i,deviceTypeName:T}),n==R.ATTACHED_IO)o[e]=E,_.emit("attach",{portId:e,deviceTypeName:T});else if(n==R.DETACHED_IO)delete o[e],_.emit("detach",{portId:e});else if(n==R.ATTACHED_VIRTUAL_IO){const e=t.getUint8(7),n=t.getUint8(8);O({portIdA:e,portIdB:n})}},M[i.GENERIC_ERROR_MESSAGES]=function(t){const e=t.getUint8(3),n=t.getUint8(4);O({cmdType:e,errorCode:A[n]})},M[i.HUB_PROPERTIES]=function(t){const e=t.getUint8(3);if(O({property:I[e]}),e==a.BATTERY_VOLTAGE){const e=t.getUint8(5);O({batteryLevel:e})}},M[i.PORT_OUTPUT_COMMAND_FEEDBACK]=function(t){for(let e=3;e<t.byteLength;e+=2){const n=t.getUint8(e),E=t.getUint8(e+1);O({portId:n,feedback:E})}},{connect:async function(){O("connect"),o={},(t=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:["00001623-1212-efde-1623-785feabcd123"]})).addEventListener("gattserverdisconnected",u),e=await t.gatt.connect(),O("Connected"),n=await e.getPrimaryService("00001623-1212-efde-1623-785feabcd123"),(E=await n.getCharacteristic("00001624-1212-efde-1623-785feabcd123")).addEventListener("characteristicvaluechanged",U),E.startNotifications()},shutdown:function(){return d(i.HUB_ACTIONS,1)},getDeviceType:function(t){return N[o[t]]},subscribe:function(t,e){return d(i.PORT_INPUT_FORMAT_SETUP_SINGLE,t,e,1,0,0,0,1)},on:_.on.bind(_),motor:{setPower:function(t,e){return C(t,0,e)}},led:{setColor:function(t){return C(s.HUB_LED,0,t)}},Color:{BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,CYAN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:255},PortMap:s,PortMapNames:S}}}),$$.control.registerControl("rootPage",{template:'<div>\n    <button class="w3-blue w3-button" \n        bn-event="click: onConnect"\n        bn-show="!connected"\n    >Connect to HUB</button>\n\n    <button class="w3-blue w3-button" \n        bn-event="click: onShutdown"\n        bn-show="connected"\n    >Shutdown</button>\n\n\n    <button class="w3-blue w3-button" \n        bn-event="click: onSendMsg"\n        bn-show="connected"\n    >Send Msg</button>\n</div>\n<div bn-show="connected">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="mousedown.w3-button: onMouseUp, mouseup.w3-button:onMouseDown">\n            <tr>\n                <td bn-text="$scope.$i.portName"></td>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-button w3-green" data-action="forward">FORWARD</button>\n                    <button class="w3-button w3-green" data-action="backward">BACKWARD</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <ul bn-each="internalDevices">\n        <li bn-text="$scope.$i"></li>\n    </ul>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(t,e,n){function E(t){const e=t.closest("tr").index();return o.model.externalDevices[e].portId}n.on("disconnected",()=>{o.setData({connected:!1})}),n.on("attach",t=>{const{portId:e,deviceTypeName:E}=t;e<50?(o.model.externalDevices.push({portId:e,portName:n.PortMapNames[t.portId],deviceTypeName:E}),o.model.externalDevices.sort((t,e)=>t.portId-e.portId)):o.model.internalDevices.push(E),o.update()}),n.on("detach",t=>{const e=o.model.externalDevices.findIndex(e=>e.portId==t.portId);console.log("idx",e),o.model.externalDevices.splice(e,1),o.update()});const o=$$.viewController(t,{data:{connected:!1,internalDevices:[],externalDevices:[]},events:{onMouseUp:function(){const t=$(this).data("action"),e=E($(this));switch(t){case"off":n.motor.setPower(e,0);break;case"forward":n.motor.setPower(e,100);break;case"backward":n.motor.setPower(e,-100)}},onMouseDown:function(){const t=E($(this));n.motor.setPower(t,0)},onConnect:async function(){await n.connect(),o.setData({connected:!0})},onSendMsg:async function(){await n.led.setColor(n.Color.PURPLE)},onShutdown:async function(){await n.shutdown()}}})}});