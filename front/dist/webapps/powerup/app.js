$$.service.registerService("actionSrv",{deps:["hub"],init:function(t,e){return{execAction:async function(t,n,o,i){console.log("execAction",o,i);const s=n.find(t=>t.name==o),a=t.find(t=>t.hubId==s.hub);if(a){const{hubDevice:t}=a;if("POWER"==s.type)t.createMotor(e.PortMap[s.port]).setPower(s.power*i);else if("SPEED"==s.type)t.createMotor(e.PortMap[s.port]).setSpeed(s.speed*i);else if("ROTATE"==s.type)t.createMotor(e.PortMap[s.port]).rotateDegrees(s.angle,s.speed);else if("DBLSPEED"==s.type){const n=e.PortMap[s.port1],o=e.PortMap[s.port2];(await t.createDblMotor(n,o)).setSpeed(s.speed1*i,s.speed2*i)}}else $.notify(`Hub ${s.hub} is not connected`,"error")}}}}),function(){const t=function(...t){0},{getEnumName:e}=$$.util,n="00001623-1212-efde-1623-785feabcd123",o="00001624-1212-efde-1623-785feabcd123",i={DETACHED_IO:0,ATTACHED_IO:1,ATTACHED_VIRTUAL_IO:2},s=e(i),a={HUB_PROPERTIES:1,HUB_ACTIONS:2,HUB_ALERTS:3,HUB_ATTACHED_IO:4,GENERIC_ERROR_MESSAGES:5,HW_NETWORK_COMMANDS:8,FW_UPDATE_GO_INTO_BOOT_MODE:16,FW_UPDATE_LOCK_MEMORY:17,FW_UPDATE_LOCK_STATUS_REQUEST:18,FW_LOCK_STATUS:19,PORT_INFORMATION_REQUEST:33,PORT_MODE_INFORMATION_REQUEST:34,PORT_INPUT_FORMAT_SETUP_SINGLE:65,PORT_INPUT_FORMAT_SETUP_COMBINEDMODE:66,PORT_INFORMATION:67,PORT_MODE_INFORMATION:68,PORT_VALUE_SINGLE:69,PORT_VALUE_COMBINEDMODE:70,PORT_INPUT_FORMAT_SINGLE:71,PORT_INPUT_FORMAT_COMBINEDMODE:72,VIRTUAL_PORT_SETUP:97,PORT_OUTPUT_COMMAND:129,PORT_OUTPUT_COMMAND_FEEDBACK:130},c=e(a),r={UNKNOWN:0,SIMPLE_MEDIUM_LINEAR_MOTOR:1,TRAIN_MOTOR:2,LIGHT:8,VOLTAGE_SENSOR:20,CURRENT_SENSOR:21,PIEZO_BUZZER:22,HUB_LED:23,TILT_SENSOR:34,MOTION_SENSOR:35,COLOR_DISTANCE_SENSOR:37,MEDIUM_LINEAR_MOTOR:38,MOVE_HUB_MEDIUM_LINEAR_MOTOR:39,MOVE_HUB_TILT_SENSOR:40,DUPLO_TRAIN_BASE_MOTOR:41,DUPLO_TRAIN_BASE_SPEAKER:42,DUPLO_TRAIN_BASE_COLOR_SENSOR:43,DUPLO_TRAIN_BASE_SPEEDOMETER:44,TECHNIC_LARGE_LINEAR_MOTOR:46,TECHNIC_XLARGE_LINEAR_MOTOR:47,TECHNIC_MEDIUM_ANGULAR_MOTOR:48,TECHNIC_LARGE_ANGULAR_MOTOR:49,TECHNIC_MEDIUM_HUB_GEST_SENSOR:54,REMOTE_CONTROL_BUTTON:55,REMOTE_CONTROL_RSSI:56,TECHNIC_MEDIUM_HUB_ACCELEROMETER:57,TECHNIC_MEDIUM_HUB_GYRO_SENSOR:58,TECHNIC_MEDIUM_HUB_TILT_SENSOR:59,TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR:60,TECHNIC_COLOR_SENSOR:61,TECHNIC_DISTANCE_SENSOR:62,TECHNIC_FORCE_SENSOR:63,TECHNIC_3X3_COLOR_LIGHT_MATRIX:64,TECHNIC_SMALL_ANGULAR_MOTOR:65,MARIO_ACCELEROMETER:71,MARIO_BARCODE_SENSOR:73,MARIO_PANTS_SENSOR:74,TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY:75,TECHNIC_LARGE_ANGULAR_MOTOR_GREY:76,VIRTUAL_DEVICE:100},d=e(r),l=e({ACK:1,MACK:2,BUFFER_OVERFLOW:3,TIMEOUT:4,COMMAND_NOT_RECOGNIZED:5,INVALID_USE:6,OVERCURRENT:7,INTERNAL_ERROR:8}),u={ADVERTISING_NAME:1,BUTTON_STATE:2,FW_VERSION:3,HW_VERSION:4,RSSI:5,BATTERY_VOLTAGE:6,BATTERY_TYPE:7,MANUFACTURER_NAME:8,RADIO_FIRMWARE_VERSION:9,LWP_PROTOCOL_VERSION:10,SYSTEM_TYPE_ID:11,HW_NETWORK_ID:12,PRIMARY_MAC_ADDRESS:13,SECONDARY_MAC_ADDRESS:14,HW_NETWORK_FAMILY:15},b=e(u),p={NAME:0,RAW:1,PCT:2,SI:3,SYMBOL:4,MAPPING:5,USED_INTERNALLY:6,MOTOR_BIAS:7,CAPABILITY_BITS:8,VALUE_FORMAT:128},h=e(p),m={BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,CYAN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:255},f={A:0,B:1,C:2,D:3,HUB_LED:50,CURRENT_SENSOR:59,VOLTAGE_SENSOR:60,ACCELEROMETER:97,GYRO_SENSOR:98,TILT_SENSOR:99},E={POWER:0,SPEED:1,ROTATION:2,ABSOLUTE:3,COLOR:0,RGB:1,TILT_POS:0},g={FLOAT:0,HOLD:126,BRAKE:127},T=e(f);function v(t){const e=new Uint8Array(t);let n="";for(let t=0;t<e.byteLength&&0!=e[t];t++)n+=String.fromCharCode(e[t]);return n}function R(t){const e=new Uint8Array(4);return new DataView(e.buffer).setInt32(0,t,!0),Array.from(e)}function _(t,...e){const n=e.flat(2),o=n.length+3,i=new ArrayBuffer(o),s=new Uint8Array(i);return s[0]=o,s[1]=0,s[2]=t,s.set(n,3),i}const I=100;class O{constructor(t,e){this.hubDevice=t,this.portId=e}setPower(t){return console.log("setPower",{power:t}),this.hubDevice.writeDirect(this.portId,E.POWER,!1,t)}setSpeed(t){return this.hubDevice.writePortCommand(this.portId,!1,7,t,I,0)}rotateDegrees(t,e,n=g.BRAKE){return this.hubDevice.writePortCommand(this.portId,!0,11,R(t),e,I,n)}gotoAngle(t,e,n=g.BRAKE){return this.hubDevice.writePortCommand(this.portId,!0,13,R(t),e,I,n)}setSpeedForTime(t,e,n=g.BRAKE){return this.hubDevice.writePortCommand(this.portId,!1,9,function(t){const e=new Uint8Array(2);return new DataView(e.buffer).setInt16(0,t,!0),Array.from(e)}(e),t,I,n)}resetZero(){return console.log("resetZero"),this.hubDevice.writeDirect(this.portId,E.ROTATION,!0,0,0,0,0)}waitAlert(){return new Promise(t=>{this.hubDevice.once("hubAlerts",async e=>{console.log("hubAlerts",e),t()})})}async calibrate(){this.hubDevice.setPortFormat(this.portId,E.ROTATION,!1),this.setPower(100),await this.waitAlert(),this.setPower(0),await this.waitAlert(),await this.resetZero(),this.setPower(-100),await this.waitAlert(),this.setPower(0),await this.waitAlert();const t=await this.hubDevice.getPortValue(this.portId);console.log(t);const e=Math.floor(t/2);console.log({offset:e}),await this.gotoAngle(e,10),await this.resetZero()}}class A{constructor(t,e,n){this.hubDevice=t,this.portId1=e,this.portId2=n}async create(){const t=await this.hubDevice.createVirtualPort(this.portId1,this.portId2);await $$.util.wait(100),this.portId=this.hubDevice.getPortIdFromName(t),console.log("portId",this.portId)}setSpeed(t,e){this.hubDevice;return this.hubDevice.writePortCommand(this.portId,!1,8,t,e,I,0)}}class C extends EventEmitter2{constructor(){super(),this.charac=null,this.deviceModes={},this.portCmdQueue={},this.portCmdCallback={},this.hubDevices={},this.busy=!1,this.cmdQueue=[]}async init(e){const i=await e.gatt.connect();t("Connected");const s=await i.getPrimaryService(n);this.charac=await s.getCharacteristic(o);const a=t=>{this.decodeMsg(t.target.value)};e.addEventListener("gattserverdisconnected",()=>{console.log("onGattServerDisconnected",this),this.charac.removeEventListener("characteristicvaluechanged",a),this.charac=null,this.emit("disconnected")}),this.charac.addEventListener("characteristicvaluechanged",a),await this.charac.startNotifications(),await $$.util.wait(100)}async startNotification(){await this.sendMsg(a.HUB_PROPERTIES,u.BATTERY_VOLTAGE,2),await this.sendMsg(a.HUB_PROPERTIES,u.SYSTEM_TYPE_ID,5),await this.sendMsg(a.HUB_PROPERTIES,u.PRIMARY_MAC_ADDRESS,5),await this.sendMsg(a.HUB_ALERTS,1,1)}createMotor(t){return new O(this,t)}async createDblMotor(t,e){const n=new A(this,t,e);return await n.create(),n}async sendBuffer(e){t("sendBuffer",e),this.busy?(t("busy push in queue"),this.cmdQueue.push(e)):(this.busy=!0,await this.charac.writeValueWithoutResponse(e),this.busy=!1,this.cmdQueue.length>0&&await this.sendBuffer(this.cmdQueue.shift()))}sendMsg(e,...n){return t("sendMsg",c[e],n),this.sendBuffer(_(e,n))}writeDirect(e,n,o,...i){return t("writeDirect",{portId:e,mode:n,waitFeedback:o}),this.writePortCommand(e,o,81,n,i)}setPortFormat(t,e,n,o=1){return console.log("setPortFormat",{portId:t,mode:e,notificationEnabled:n}),this.deviceModes[t]={mode:e,notificationEnabled:n},this.sendMsg(a.PORT_INPUT_FORMAT_SETUP_SINGLE,t,e,function(t){const e=new Uint8Array(4);return new DataView(e.buffer).setUint32(0,t,!0),Array.from(e)}(o),n?1:0)}getPortIdFromName(t){for(const[e,n]of Object.entries(this.hubDevices))if(n.name==t)return e}async createVirtualPort(t,e){const n=function(t,e){return`${T[t]}_${T[e]}`}(t,e);console.log("createVirtualPort",t,e);for(const t of Object.values(this.hubDevices))if(t.name==n)return console.log(`virtual port ${n} already created !`),n;return await this.sendMsg(a.VIRTUAL_PORT_SETUP,1,t,e),n}shutdown(){return this.sendMsg(a.HUB_ACTIONS,1)}async writePortCommand(e,n,...o){if(t("writePortCommand",{portId:e,waitFeedback:n,data:o}),n)return new Promise(async t=>{const n=_(a.PORT_OUTPUT_COMMAND,e,17,o);await this.sendBuffer(n),this.portCmdCallback[e]=t});{const t=_(a.PORT_OUTPUT_COMMAND,e,16,o);return this.sendBuffer(t)}}getHubDevices(){const t=[];for(const[e,n]of Object.entries(this.hubDevices))t.push($.extend({},n,{portId:parseInt(e)}));return t}getDeviceType(t){return d[this.hubDevices[t]]}async getPortInformation(t){const e=await this.getPortInformationRequest(t),{capabilities:n,count:o,output:i,input:s}=e,a=Math.max(s,i),c=[];for(let e=0;e<o;e++){const n={};if(a>>e){let o;o=await this.getPortModeInformationRequest(t,e,p.NAME),n.name=o.name,n[(o=await this.getPortModeInformationRequest(t,e,p.RAW)).type]={min:o.min,max:o.max},n[(o=await this.getPortModeInformationRequest(t,e,p.PCT)).type]={min:o.min,max:o.max},n[(o=await this.getPortModeInformationRequest(t,e,p.SI)).type]={min:o.min,max:o.max},o=await this.getPortModeInformationRequest(t,e,p.SYMBOL),n.unit=o.symbol,o=await this.getPortModeInformationRequest(t,e,p.VALUE_FORMAT);const{numValues:i,dataType:s,totalFigures:a,decimals:c}=o;n[o.type]={numValues:i,dataType:s,totalFigures:a,decimals:c}}c.push(n)}return{modes:c,capabilities:n}}async waitTestValue(e,n,o){return new Promise(async i=>{await this.subscribe(e,n,1,n=>{t("waitTestValue",n),o(n.value)&&(delete this.deviceModes[e],i())})})}getPortInformationRequest(t){return new Promise(async e=>{await this.sendMsg(a.PORT_INFORMATION_REQUEST,t,1),this.portCmdCallback[t]=e})}getPortValue(t){return console.log("getPortValue",{portId:t}),new Promise(async e=>{await this.sendMsg(a.PORT_INFORMATION_REQUEST,t,0),this.portCmdCallback[t]=e})}getPortModeInformationRequest(t,e,n){return new Promise(async o=>{await this.sendMsg(a.PORT_MODE_INFORMATION_REQUEST,t,e,n),this.portCmdCallback[t]=o})}decodeMsg(e){e.byteLength,e.getUint8(0);const n=e.getUint8(2);switch(t("decodeMsg",{msgType:c[n]}),n){case a.HUB_ATTACHED_IO:this.handlePortMsg(e);break;case a.GENERIC_ERROR_MESSAGES:this.handleGenericErrorMsg(e);break;case a.HUB_PROPERTIES:this.handleHubPropertyResponse(e);break;case a.HUB_ALERTS:this.handleHubAlerts(e);break;case a.PORT_OUTPUT_COMMAND_FEEDBACK:this.handlePortCommandFeedback(e);break;case a.PORT_MODE_INFORMATION:this.handlePortModeInformation(e);break;case a.PORT_INFORMATION:this.handlePortInformation(e);break;case a.PORT_VALUE_SINGLE:this.handlePortValueSingle(e)}}handleTiltSensorValue(t,e){let n;switch(t){case E.TILT_POS:n={yaw:e.getInt16(4,!0),pitch:e.getInt16(6,!0),roll:e.getInt16(8,!0)}}return n}handleMotorValue(t,e){let n;switch(t){case E.ABSOLUTE:n=e.getInt16(4,!0);break;case E.ROTATION:n=e.getInt32(4,!0);break;case E.SPEED:n=e.getInt8(4)}return n}handlePortValueSingle(e){const n=e.getUint8(3),o=this.hubDevices[n];if(t("handlePortValueSingle",{portId:n,device:o}),null!=this.deviceModes[n]){const{mode:i,notificationEnabled:s}=this.deviceModes[n];t({mode:i,notificationEnabled:s});let a=null;switch(o.type){case r.TECHNIC_LARGE_LINEAR_MOTOR:case r.TECHNIC_LARGE_ANGULAR_MOTOR_GREY:case r.TECHNIC_XLARGE_LINEAR_MOTOR:a=this.handleMotorValue(i,e);break;case r.TECHNIC_MEDIUM_HUB_TILT_SENSOR:a=this.handleTiltSensorValue(i,e)}t({value:a});const c=this.portCmdCallback[n];null!=a&&(s?this.emit("portValue",{portId:n,value:a}):"function"==typeof c&&(c(a),delete this.portCmdCallback[n]))}}handlePortModeInformation(e){const n=e.getUint8(3),o=e.getUint8(4),i=e.getUint8(5),s={portId:n,mode:o,type:h[i]};switch(i){case p.NAME:s.name=v(e.buffer.slice(6,e.byteLength));break;case p.RAW:case p.PCT:case p.SI:s.min=e.getFloat32(6,!0),s.max=e.getFloat32(10,!0);break;case p.SYMBOL:s.symbol=v(e.buffer.slice(6,e.byteLength));break;case p.VALUE_FORMAT:s.numValues=e.getUint8(6),s.dataType=["8bit","16bit","32bit","float"][e.getUint8(7)],s.totalFigures=e.getUint8(8),s.decimals=e.getUint8(9)}t("portModeInformation",s);const a=this.portCmdCallback[n];"function"==typeof a&&(a(s),delete this.portCmdCallback[n])}handlePortInformation(e){const n=e.getUint8(3);let o=e.getUint8(5);const i=e.getUint8(6),s=e.getUint16(7,!0),a=e.getUint16(9,!0);t(`Port ${n}, capabilities ${o}, total modes ${i}, \n                    input modes ${s}, output modes ${a}`);const c="output,input,logical combinable, logical synchronisable".split(",");let r=[];for(let t=0;t<4;t++)o>>t&1&&r.push(c[t]);const d={portId:n,capabilities:r.join(", "),count:i,input:s,output:a},l=this.portCmdCallback[n];"function"==typeof l&&l(d)}handleHubPropertyResponse(e){const n=e.getUint8(3);if(t({property:b[n]}),n==u.BATTERY_VOLTAGE){const n=e.getUint8(5);t({batteryLevel:n}),this.emit("batteryLevel",{batteryLevel:n})}else if(n==u.BUTTON_STATE){const n=e.getUint8(5);t({buttonState:n}),this.emit("buttonState",{buttonState:n})}else if(n==u.SYSTEM_TYPE_ID){const n=e.getUint8(5);t({systemType:n})}else if(n==u.PRIMARY_MAC_ADDRESS){const n=[];for(let t=0;t<6;t++)n.push(e.getUint8(5+t).toString(16).toLocaleUpperCase().padStart(2,"0"));t({bytes:n}),this.emit("address",{address:n.join(":")})}}handleGenericErrorMsg(e){const n=e.getUint8(3),o=e.getUint8(4);t({cmdType:n,errorCode:l[o]}),this.emit("error",{cmdType:n,errorCode:l[o]})}handleHubAlerts(e){const n=e.byteLength,o=e.getUint8(0),i=e.getUint8(3),s=e.getUint8(4),a=e.getUint8(5);t("handleHubAlerts",{bufferLen:n,msgLen:o,type:i,operation:s,payload:a}),this.emit("hubAlerts",{type:i,payload:a})}handlePortCommandFeedback(e){for(let n=3;n<e.byteLength;n+=2){const o=e.getUint8(n),i=e.getUint8(n+1);if(t("handlePortCommandFeedback",{portId:o,feedback:i}),10==i){const t=this.portCmdCallback[o];"function"==typeof t&&t()}}}handlePortMsg(t){const e=t.getUint8(3),n=t.getUint8(4),o=n?t.getUint16(5,!0):0,a=d[o]||"Unknown",c=s[n];if(console.log("handlePortMsg",{portId:e,eventName:c,deviceTypeName:a}),n==i.ATTACHED_IO){const t={type:o,deviceTypeName:a,portName:T[e],portId:e};this.hubDevices[e]=t,this.emit("attach",t)}else if(n==i.DETACHED_IO)delete this.hubDevices[e],this.emit("detach",{portId:e});else if(n==i.ATTACHED_VIRTUAL_IO){t.getUint8(7),t.getUint8(8);const n={deviceTypeName:"Virtual Port",portName:T[e],portId:e};this.hubDevices[e]=n,this.emit("attach",n)}}}$$.service.registerService("hub",{init:function(){return{connect:async function(){t("connect");const e=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:[n]}),o=new C;return await o.init(e),o},Color:m,PortMap:f,PortMapNames:T,DeviceMode:E,BrakingStyle:g,DeviceTypeNames:d}}})}(),$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <div class="left">\n        \n        <button bn-event="click: onNewConfig" bn-icon="fa fa-file" title="Reset Config"></button>\n\n        <button bn-event="click: onConfig" bn-icon="fa fa-folder-open" title="Open Config"></button>\n\n        <button bn-event="click: onSaveConfig" bn-icon="fa fa-save" title="Save current config"></button>\n\n        <div bn-show="currentConfig">\n            <label>Current Config:</label>\n            <span bn-text="currentConfig"></span>\n        </div>\n        \n\n    </div>\n</div>\n\n<div class="toolbar">\n\n    <div class="left">\n        <button bn-event="click: onConnect">Connect to HUB</button>\n        \n        <button bn-event="click: onActions">Actions</button>\n\n        <button bn-event="click: onGamePad" bn-show="gamepadConnected">Gamepad</button>\n\n\n    </div>\n</div>\n\n<div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Hub</th>\n                <th>Actions</th>\n                <th>Battery Level</th>\n                <th>Address</th>\n            </tr>\n        </thead>\n        <tbody bn-each="hubDevices" bn-event="click.btnShutdown: onShutDown, click.btnInfo: onInfo, comboboxchange.combo: onHubChange">\n            <tr>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: hubs}" bn-val="$scope.$i.hubId" class="combo"></div>\n                </td>\n                <td>\n                    <button class="btnShutdown">Shutdown</button>\n                    <button class="btnInfo">Info</button>\n                </td>\n                <td bn-text="$scope.$i.batteryLevel"></td>\n                <td bn-text="$scope.$i.address"></td>\n            </tr>\n        </tbody>\n    </table>\n\n</div>',deps:["breizbot.pager","hub","breizbot.gamepad","actionSrv","breizbot.http"],props:{},init:async function(t,e,n,o,i,s){let a={actions:[],mappings:{}};t.find("button").addClass("w3-btn w3-blue");let c=null,r="";const d=$$.viewController(t,{data:{currentConfig:"",gamepadConnected:!1,hubDevices:[],hubs:["HUB1","HUB2"]},events:{onNewConfig:function(){a={actions:[],mappings:{}},c=null,d.setData({currentConfig:""})},onSaveConfig:async function(){if(""==d.model.currentConfig){const t=await $$.ui.showPrompt({title:"Save Config",label:"Config Name:"});t&&(await s.post("/add",{name:t,actions:a.actions,mappings:a.mappings}),d.setData({currentConfig:t}))}else await s.post("/update",a),$.notify(`Config '${a.name}' updated`,"success")},onConfig:function(){e.pushPage("configCtrl",{title:"Configurations",props:{currentConfig:d.model.currentConfig},onReturn:function(t){a=t,d.setData({currentConfig:t.name}),c=a.mappings[r]}})},onHubChange:function(){const t=$(this).closest("tr").index();d.model.hubDevices[t].hubId=$(this).getValue()},onShutDown:function(){const t=$(this).closest("tr").index();d.model.hubDevices[t].hubDevice.shutdown()},onInfo:function(){const t=$(this).closest("tr").index(),n=d.model.hubDevices[t];e.pushPage("hubinfo",{title:n.hubId,props:{hubDevice:n.hubDevice}})},onActions:function(){e.pushPage("actionsCtrl",{title:"Actions",props:{actions:a.actions,hubDevices:d.model.hubDevices},onReturn:async function(t){console.log("onReturn",t),a.actions=t}})},onGamePad:function(){o.off("buttonUp",b),o.off("buttonDown",u),o.off("axe",p),e.pushPage("gamepad",{title:"Gamepad",props:{mapping:c,actions:a.actions},onBack:h,onReturn:async t=>{c=t,console.log("onReturn",c),console.log("config",a),a.mappings[t.id]=c,h()}})},onConnect:async function(){const t=await n.connect();t.on("error",t=>{console.log(t)});const e=d.model.hubDevices.length;d.model.hubDevices.push({hubDevice:t,hubId:`HUB${e+1}`,batteryLevel:0,address:"Unknown"}),d.update(),t.on("batteryLevel",e=>{d.model.hubDevices.find(e=>e.hubDevice==t).batteryLevel=e.batteryLevel,d.update()}),t.on("address",e=>{console.log("address",e),d.model.hubDevices.find(e=>e.hubDevice==t).address=e.address,d.update()}),t.startNotification(),t.on("disconnected",()=>{console.log("disconnected");const e=d.model.hubDevices.findIndex(e=>e.hubDevice==t);d.model.hubDevices.splice(e,1),d.update()})}}});function l(t,e){i.execAction(d.model.hubDevices,a.actions,t,e)}function u(t){if(c){const{down:e}=c.buttons[t.id];"None"!=e&&l(e,1)}}function b(t){if(c){const{up:e}=c.buttons[t.id];"None"!=e&&l(e,1)}}function p(t){if(console.log("onGamepadAxe",t),c){const{action:e}=c.axes[t.id];"None"!=e&&l(e,t.value)}}function h(){console.log("initCbk"),o.on("buttonUp",b),o.on("buttonDown",u),o.on("axe",p)}o.on("connected",t=>{console.log("gamepad connnected",t),r=t.id,c=a.mappings[r],console.log({gamepadMapping:c}),d.setData({gamepadConnected:!0}),o.checkGamePadStatus(),h()}),o.on("disconnected",t=>{console.log("gamepad disconnected"),d.setData({gamepadConnected:!1}),c=null})}}),$$.control.registerControl("actionCtrl",{template:'<div>\n    <form bn-event="submit: onSubmit" bn-bind="form">\n\n        <div class="group">\n            <label>Name</label>\n            <input type="text" required name="name" bn-prop="{disabled: isEdit}">\n        </div>\n\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub" bn-update="comboboxchange"\n                bn-val="hub"></div>\n        </div>        \n\n        <div class="group">\n            <label>Type</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: actionTypes}" name="type" bn-update="comboboxchange"\n                bn-val="type"></div>\n        </div>\n\n\n        <div bn-if="isSpeed">\n            <div class="group">\n                <label>Port</label>\n                <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port"></div>\n            </div>\n\n            <div class="group">\n                <label>Speed</label>\n                <input type="number" required name="speed" min="-100" max="100">\n            </div>\n        </div>\n\n        <div bn-if="isPower">\n            <div class="group">\n                <label>Port</label>\n                <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port"></div>\n            </div>\n\n            <div class="group">\n                <label>Power</label>\n                <input type="number" required name="power" min="-100" max="100">\n            </div>\n        </div>\n\n        <div bn-if="isRotate">\n            <div class="group">\n                <label>Port</label>\n                <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port"></div>\n            </div>\n\n            <div class="group">\n                <label>Speed</label>\n                <input type="number" required name="speed" min="-100" max="100">\n            </div>\n\n            <div class="group">\n                <label>Angle (°)</label>\n                <input type="number" required name="angle" step="1">\n            </div>\n        </div>       \n\n        <div bn-if="isDblSpeed">\n            <div class="group">\n                <label>Port1</label>\n                <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port1"></div>\n            </div>\n\n            <div class="group">\n                <label>Speed1</label>\n                <input type="number" required name="speed1" min="-100" max="100">\n            </div>\n\n            <div class="group">\n                <label>Port2</label>\n                <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port2"></div>\n            </div>\n\n            <div class="group">\n                <label>Speed2</label>\n                <input type="number" required name="speed2" min="-100" max="100">\n            </div>           \n        </div>\n\n        <input type="submit" hidden bn-bind="submit">\n    </form>\n</div>',deps:["breizbot.pager"],props:{data:null},init:function(t,e){let{data:n}=this.props;const o=null!=n;n=n||{};const i="ABCD".split(""),s=$$.viewController(t,{data:{isEdit:o,type:n.type||"SPEED",hub:n.hub||"HUB1",actionTypes:["SPEED","POWER","DBLSPEED","ROTATE"],ports:i,hubs:["HUB1","HUB2"],isType:function(t){return this.type==t},isPower:function(){return this.isType("POWER")},isSpeed:function(){return this.isType("SPEED")},isDblSpeed:function(){return this.isType("DBLSPEED")},isRotate:function(){return this.isType("ROTATE")}},events:{onSubmit:function(t){t.preventDefault(),console.log("data",$(this).getFormData()),e.popPage($(this).getFormData())}}});s.scope.form.setFormData(n),this.getButtons=function(){return{apply:{title:"Apply",icon:"fas fa-check",onClick:function(){s.scope.submit.click()}}}}}}),$$.control.registerControl("actionsCtrl",{template:'<div bn-show="!hasActions" class="message">\n    No actions defined\n</div>\n\n<div class="scrollPanel" bn-show="hasActions">\n    <div bn-each="actions" class="items" bn-event="click.item: onItemClick, contextmenuchange.item:onItemContextMenu">\n        <div class="w3-card-2 item" bn-control="brainjs.contextmenu" bn-data="{\n                    items: {\n                        edit: {name: \'Edit\', icon: \'fas fa-edit\'},\n                        delete: {name: \'Remove\', icon: \'fas fa-trash-alt\'}\n                    }\n                }">\n            <div>\n                <strong bn-text="$scope.$i.name"></strong>\n            </div>\n        </div>\n    </div>\n</div>',deps:["breizbot.pager","actionSrv"],props:{actions:null,isEdition:!0,hubDevices:null},init:function(t,e,n){const{isEdition:o,hubDevices:i}=this.props,s=Array.from(this.props.actions||[]);o||s.unshift({name:"None"});const a=$$.viewController(t,{data:{actions:s,hasActions:function(){return this.actions.length>0}},events:{onItemContextMenu:function(t,n){const o=$(this).closest(".item").index(),i=a.model.actions[o];"delete"==n.cmd&&(a.model.actions.splice(o,1),a.update()),"edit"==n.cmd&&e.pushPage("actionCtrl",{title:"Edit Action",props:{data:i},onReturn:function(t){a.model.actions[o]=t}})},onItemClick:function(t){const s=$(this).closest(".item").index(),c=a.model.actions[s];o?n.execAction(i,a.model.actions,c.name,1):e.popPage(c.name)}}});o&&(this.getButtons=function(){return{addAction:{title:"Add Action",icon:"fa fa-plus",onClick:function(){console.log("Add action"),e.pushPage("actionCtrl",{title:"Add Action",onReturn:function(t){a.model.actions.push(t),a.update()}})}},save:{title:"Save",icon:"fa fa-check",onClick:function(){e.popPage(a.model.actions)}}}})}}),$$.control.registerControl("configCtrl",{template:'<div bn-show="!hasConfigs" class="message">\n    No configurations defined\n</div>\n\n<div class="scrollPanel" bn-show="hasConfigs">\n    <div bn-each="configs" class="items" bn-event="click.item: onItemClick, contextmenuchange.item:onItemContextMenu">\n        <div class="w3-card-2 item" bn-control="brainjs.contextmenu" bn-data="{\n                    items: {\n                        delete: {name: \'Remove\', icon: \'fas fa-trash-alt\'}\n                    }\n                }">\n            <div>\n                <strong bn-text="$scope.$i.name"></strong>\n            </div>\n        </div>\n    </div>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{currentConfig:""},init:function(t,e,n){const{currentConfig:o}=this.props,i=$$.viewController(t,{data:{configs:[],hasConfigs:function(){return this.configs.length>0}},events:{onItemContextMenu:async function(t,e){const a=$(this).closest(".item").index(),c=i.model.configs[a];"delete"==e.cmd&&(c.name==o?$$.ui.showAlert({content:"Cannot delete active config",title:"Warning"}):(await n.post("/delete",c),s()))},onItemClick:function(t){const n=$(this).closest(".item").index();console.log("onItemClick",n);const o=i.model.configs[n];e.popPage(o)}}});async function s(){const t=await n.get("/");console.log({configs:t}),i.setData({configs:t})}s()}}),$$.control.registerControl("gamepad",{template:'<div>\n    <h2 bn-text="id"></h2>\n</div>\n\n<h3>Axes</h3>\n<div>\n    <table class="w3-table-all axeTable">\n        <thead>\n            <tr>\n                <th>Axe</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="axes" bn-bind="axes" bn-index="idx" bn-event="click.item: onAxeClick">\n            <tr>\n                <td bn-text="getAxeLabel"></td>\n                <td>\n                    <div bn-text="$scope.$i.action" class="item"></div>\n                </td>                \n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<h3>Buttons</h3>\n<div class="commandTable">\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Button</th>\n                <th>Down</th>\n                <th>Up</th>\n            </tr>\n        </thead>\n        <tbody bn-each="buttons" bn-bind="buttons" bn-index="idx" bn-event="click.item: onButtonClick">\n            <tr>\n                <td bn-text="getButtonLabel"></td>\n                <td>\n                    <div bn-text="$scope.$i.down" class="item" data-cmd="down">\n                    </div>\n                </td>\n                <td>\n                    <div bn-text="$scope.$i.up" class="item" data-cmd="up">\n                    </div>\n                </td>\n\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","breizbot.gamepad"],props:{mapping:null,actions:null},init:function(t,e,n){const{mapping:o,actions:i}=this.props;console.log(this.props);let s=[],a=[];const c=n.getGamepads()[0];if(null!=o&&(s=o.axes,a=o.buttons),0==s.length)for(let t=0;t<c.axes.length;t++)s.push({action:"None"});if(0==a.length)for(let t=0;t<c.buttons.length;t++)a.push({up:"None",down:"None"});function r(t){const{value:e,id:n}=t;0!=e?b.find("tr").eq(n).find("td").eq(0).addClass("pressed"):b.find("tr").eq(n).find("td").eq(0).removeClass("pressed")}function d(t){p.find("tr").eq(t.id).find("td").eq(0).addClass("pressed")}function l(t){p.find("tr").eq(t.id).find("td").eq(0).removeClass("pressed")}n.on("axe",r),n.on("buttonDown",d),n.on("buttonUp",l),this.dispose=function(){console.log("dispose"),n.off("axe",r),n.off("buttonDown",d),n.off("buttonUp",l)};const u=$$.viewController(t,{data:{id:c.id,axes:s,buttons:a,getButtonLabel:function(t){return`Button ${t.idx+1}`},getAxeLabel:function(t){return`Axe ${t.idx+1}`}},events:{onButtonClick:function(){const t=$(this).closest("tr").index(),n=$(this).data("cmd");e.pushPage("actionsCtrl",{title:"Select an action",props:{isEdition:!1,actions:i},onReturn:function(e){u.model.buttons[t][n]=e,u.update()}})},onAxeClick:function(){const t=$(this).closest("tr").index();console.log("onAxeClick",t),e.pushPage("actionsCtrl",{title:"Select an action",props:{isEdition:!1,actions:i},onReturn:function(e){u.model.axes[t].action=e,u.update()}})}}}),b=u.scope.axes,p=u.scope.buttons;this.getButtons=function(){return{check:{icon:"fa fa-check",title:"Apply",onClick:function(){e.popPage(function(){const t={id:c.id,axes:[],buttons:[]};return b.find("tr").each(function(e){const n=$(this).find(".item").text();t.axes.push({action:n})}),p.find("tr").each(function(e){const n=$(this).find('[data-cmd="up"]').text(),o=$(this).find('[data-cmd="down"]').text();t.buttons.push({up:n,down:o})}),console.log({ret:t}),t}())}}}}}}),$$.control.registerControl("hubinfo",{template:'<div class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="mousedown.action: onMouseUp, mouseup.action:onMouseDown, click.portInfo: onInfo2, click.calibrate:onCalibrate">\n            <tr>\n                <td bn-text="$scope.$i.portName"></td>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-btn w3-green action" data-action="forward">FWD</button>\n                    <button class="w3-btn w3-green action" data-action="backward">BKWD</button>\n                    <button class="w3-btn w3-green calibrate">CALIBRATE</button>\n\n                    <button class="w3-btn w3-blue portInfo">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-btn: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-btn w3-blue">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub"],props:{hubDevice:null},init:function(t,e,n){const o=this.props.hubDevice,i=o.getHubDevices();console.log("devices",i);const s=[],a=[];for(const t of i){const{portId:e,deviceTypeName:n,portName:o}=t;e<50?a.push({portName:o,portId:e,deviceTypeName:n}):s.push({portId:e,deviceTypeName:n})}function c(t,n){e.pushPage("info",{title:n,props:{portId:t,hubDevice:o}})}function r(t){const e=t.closest("tr").index();return u.model.externalDevices[e].portId}function d(t){console.log("attach",t);const{portId:e,deviceTypeName:n}=t;i[e]=n}function l(t){console.log("detach",t),delete i[t.portId]}o.on("attach",d),o.on("detach",l),this.dispose=function(){console.log("hubInfo dispose"),o.off("attach",d),o.off("detach",l)};const u=$$.viewController(t,{data:{internalDevices:s,externalDevices:a},events:{onCalibrate:async function(){const t=r($(this));console.log("onCalibrate",t),await o.createMotor(t).calibrate()},onMouseUp:function(){const t=$(this).data("action"),e=r($(this));switch(t){case"forward":o.createMotor(e).setPower(100);break;case"backward":o.createMotor(e).setPower(-100)}},onMouseDown:function(){const t=r($(this));o.createMotor(t).setPower(0)},onInfo:function(){const t=$(this).closest("tr").index(),{portId:e,deviceTypeName:n}=u.model.internalDevices[t];c(e,n)},onInfo2:function(){const t=$(this).closest("tr").index(),{portId:e,deviceTypeName:n}=u.model.externalDevices[t];c(e,n)}}})}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>MODE</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>PCT</th>\n                <th>SI</th>\n                <th>VALUE FORMAT</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n                <td>\n                    dataType: <span bn-text="$scope.$i.VALUE_FORMAT.dataType"></span><br>\n                    numValues: <span bn-text="$scope.$i.VALUE_FORMAT.numValues"></span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(t,e,n){const{portId:o}=this.props,i=this.props.hubDevice,s=$$.viewController(t,{data:{modes:[],capabilities:""},events:{}});!async function(){const t=await i.getPortInformation(o);console.log("portInfo",t);const{modes:e,capabilities:n}=t;s.setData({modes:e,capabilities:n})}()}});