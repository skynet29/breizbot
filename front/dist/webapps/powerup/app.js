$$.service.registerService("actionSrv",{deps:["hub"],init:function(e,t){let n={};const o=new EventEmitter2;async function a(e,n,o){if("SLEEP"==n.type)return void await $$.util.wait(n.time);const a=e.find(e=>e.name==n.hub);if(!a)return`Hub ${n.hub} is not connected`;if("POWER"==n.type){const e=await a.getMotor(t.PortMap[n.port]);await e.setPower(n.power*o)}else if("SPEED"==n.type){const e=await a.getMotor(t.PortMap[n.port]);await e.setSpeed(n.speed*o)}else if("SPEEDTIME"==n.type){const e=await a.getMotor(t.PortMap[n.port]);await e.setSpeedForTime(n.speed,n.time,n.waitFeedback,n.brakeStyle)}else if("ROTATE"==n.type){const e=await a.getMotor(t.PortMap[n.port]);await e.rotateDegrees(n.angle*o,n.speed,n.waitFeedback)}else if("POSITION"==n.type){const e=await a.getMotor(t.PortMap[n.port]),i=a.calibration[t.PortMap[n.port]]||1;console.log({calibFactor:i}),await e.gotoAngle(n.angle*o*i,n.speed,n.waitFeedback)}else if("ZERO"==n.type){const e=await a.getMotor(t.PortMap[n.port]);await e.resetZero()}else if("COLOR"==n.type){const e=await a.getLed(t.PortMap.HUB_LED);await e.setColor(n.color)}else if("RGB"==n.type){const e=await a.getLed(t.PortMap.HUB_LED);await e.setRGBColor(n.red,n.green,n.blue)}else if("CALIBRATE"==n.type){const e=await a.getMotor(t.PortMap[n.port]);await e.calibrate()}else if("DBLSPEED"==n.type){const e=t.PortMap[n.port1],i=t.PortMap[n.port2],s=await a.getDblMotor(e,i);await s.setSpeed(n.speed1*o,n.speed2*o)}else if("DBLSPEEDTIME"==n.type){const e=t.PortMap[n.port1],o=t.PortMap[n.port2],i=await a.getDblMotor(e,o);await i.setSpeedForTime(n.speed1,n.speed2,n.time,n.waitFeedback,n.brakeStyle)}else if("DBLROTATE"==n.type){const e=t.PortMap[n.port1],i=t.PortMap[n.port2],s=await a.getDblMotor(e,i);await s.rotateDegrees(n.angle,n.speed1*o,n.speed2*o,n.waitFeedback,n.brakeStyle)}else{if("DBLPOSITION"!=n.type)return`type ${n.type} not implemented`;{const e=t.PortMap[n.port1],i=t.PortMap[n.port2],s=await a.getDblMotor(e,i);await s.gotoAngle(n.angle1,n.angle2,n.speed*o,n.waitFeedback,n.brakeStyle)}}return null}return{execAction:async function e(t,i,s,l){const r=i.find(e=>e.name==s);let{steps:c}=r;Array.isArray(c)||(c=[r]);for(const s of c)if("SETVAR"==s.type){const{varName:e,varValue:t}=s;n[e]=t,o.emit("varChange",{varName:e,varValue:t})}else if("TESTVAR"==s.type){const{varName:o}=s,a=n[o];a==s.varValue&&"None"!=s.eqAction&&e(t,i,s.eqAction,1),a!=s.varValue&&"None"!=s.neqAction&&e(t,i,s.neqAction,1)}else{const e=await a(t,s,l);if(null!=e){$.notify(e,"error");break}}},on:o.on.bind(o),getVariables:function(){return Object.entries(n).map(([e,t])=>({name:e,value:t}))},resetVariables:function(){n={},o.emit("varChange")}}}}),function(){const e=function(...e){0},{getEnumName:t}=$$.util,n="00001623-1212-efde-1623-785feabcd123",o="00001624-1212-efde-1623-785feabcd123",a={DETACHED_IO:0,ATTACHED_IO:1,ATTACHED_VIRTUAL_IO:2},i=t(a),s={HUB_PROPERTIES:1,HUB_ACTIONS:2,HUB_ALERTS:3,HUB_ATTACHED_IO:4,GENERIC_ERROR_MESSAGES:5,HW_NETWORK_COMMANDS:8,FW_UPDATE_GO_INTO_BOOT_MODE:16,FW_UPDATE_LOCK_MEMORY:17,FW_UPDATE_LOCK_STATUS_REQUEST:18,FW_LOCK_STATUS:19,PORT_INFORMATION_REQUEST:33,PORT_MODE_INFORMATION_REQUEST:34,PORT_INPUT_FORMAT_SETUP_SINGLE:65,PORT_INPUT_FORMAT_SETUP_COMBINEDMODE:66,PORT_INFORMATION:67,PORT_MODE_INFORMATION:68,PORT_VALUE_SINGLE:69,PORT_VALUE_COMBINEDMODE:70,PORT_INPUT_FORMAT_SINGLE:71,PORT_INPUT_FORMAT_COMBINEDMODE:72,VIRTUAL_PORT_SETUP:97,PORT_OUTPUT_COMMAND:129,PORT_OUTPUT_COMMAND_FEEDBACK:130},l=t(s),r={UNKNOWN:0,SIMPLE_MEDIUM_LINEAR_MOTOR:1,TRAIN_MOTOR:2,LIGHT:8,VOLTAGE_SENSOR:20,CURRENT_SENSOR:21,PIEZO_BUZZER:22,HUB_LED:23,TILT_SENSOR:34,MOTION_SENSOR:35,COLOR_DISTANCE_SENSOR:37,MEDIUM_LINEAR_MOTOR:38,MOVE_HUB_MEDIUM_LINEAR_MOTOR:39,MOVE_HUB_TILT_SENSOR:40,DUPLO_TRAIN_BASE_MOTOR:41,DUPLO_TRAIN_BASE_SPEAKER:42,DUPLO_TRAIN_BASE_COLOR_SENSOR:43,DUPLO_TRAIN_BASE_SPEEDOMETER:44,TECHNIC_LARGE_LINEAR_MOTOR:46,TECHNIC_XLARGE_LINEAR_MOTOR:47,TECHNIC_MEDIUM_ANGULAR_MOTOR:48,TECHNIC_LARGE_ANGULAR_MOTOR:49,TECHNIC_MEDIUM_HUB_GEST_SENSOR:54,REMOTE_CONTROL_BUTTON:55,REMOTE_CONTROL_RSSI:56,TECHNIC_MEDIUM_HUB_ACCELEROMETER:57,TECHNIC_MEDIUM_HUB_GYRO_SENSOR:58,TECHNIC_MEDIUM_HUB_TILT_SENSOR:59,TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR:60,TECHNIC_COLOR_SENSOR:61,TECHNIC_DISTANCE_SENSOR:62,TECHNIC_FORCE_SENSOR:63,TECHNIC_3X3_COLOR_LIGHT_MATRIX:64,TECHNIC_SMALL_ANGULAR_MOTOR:65,MARIO_ACCELEROMETER:71,MARIO_BARCODE_SENSOR:73,MARIO_PANTS_SENSOR:74,TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY:75,TECHNIC_LARGE_ANGULAR_MOTOR_GREY:76,VIRTUAL_DEVICE:100},c=t(r),d=t({ACK:1,MACK:2,BUFFER_OVERFLOW:3,TIMEOUT:4,COMMAND_NOT_RECOGNIZED:5,INVALID_USE:6,OVERCURRENT:7,INTERNAL_ERROR:8}),b={ADVERTISING_NAME:1,BUTTON_STATE:2,FW_VERSION:3,HW_VERSION:4,RSSI:5,BATTERY_VOLTAGE:6,BATTERY_TYPE:7,MANUFACTURER_NAME:8,RADIO_FIRMWARE_VERSION:9,LWP_PROTOCOL_VERSION:10,SYSTEM_TYPE_ID:11,HW_NETWORK_ID:12,PRIMARY_MAC_ADDRESS:13,SECONDARY_MAC_ADDRESS:14,HW_NETWORK_FAMILY:15},p=t(b),u={NAME:0,RAW:1,PCT:2,SI:3,SYMBOL:4,MAPPING:5,USED_INTERNALLY:6,MOTOR_BIAS:7,CAPABILITY_BITS:8,VALUE_FORMAT:128},m=t(u),h={BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,CYAN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:255},v={A:0,B:1,C:2,D:3,HUB_LED:50,CURRENT_SENSOR:59,VOLTAGE_SENSOR:60,ACCELEROMETER:97,GYRO_SENSOR:98,TILT_SENSOR:99},g={POWER:0,SPEED:1,ROTATION:2,ABSOLUTE:3,COLOR:0,RGB:1,TILT_POS:0},f={FLOAT:0,HOLD:126,BRAKE:127},E=t(v);function T(e){const t=new Uint8Array(e);let n="";for(let e=0;e<t.byteLength&&0!=t[e];e++)n+=String.fromCharCode(t[e]);return n}function I(e){const t=new Uint8Array(2);return new DataView(t.buffer).setInt16(0,e,!0),Array.from(t)}function R(e){const t=new Uint8Array(4);return new DataView(t.buffer).setInt32(0,e,!0),Array.from(t)}function A(e,...t){const n=t.flat(2),o=n.length+3,a=new ArrayBuffer(o),i=new Uint8Array(a);return i[0]=o,i[1]=0,i[2]=e,i.set(n,3),a}const O=100;class C{constructor(){this.callbacks=[]}on(e){this.callbacks.push(e)}emit(e){let t=this.callbacks.length;for(;t--;){(0,this.callbacks[t])(e)&&this.callbacks.splice(t,1)}}}class S{constructor(e,t,n,o){this.hubDevice=e,this.portId=t,this.type=n,this.name=o,this.feedbackCallback=null,this.valueCallbacks=new C,this.mode=void 0}async writePortCommand(t,...n){if(e("writePortCommand",this.portId,{waitFeedback:t,data:n}),t)return new Promise(async e=>{const t=A(s.PORT_OUTPUT_COMMAND,this.portId,17,n);await this.hubDevice.sendBuffer(t),this.feedbackCallback=e});{const e=A(s.PORT_OUTPUT_COMMAND,this.portId,16,n);return this.hubDevice.sendBuffer(e)}}writeDirectMode(t,n,...o){return e("writeDirectMode",this.portId,{mode:t,waitFeedback:n}),this.writePortCommand(n,81,t,o)}setMode(t,n,o=1){return e("setMode",this.portId,{mode:t,notificationEnabled:n}),this.mode=t,this.hubDevice.sendMsg(s.PORT_INPUT_FORMAT_SETUP_SINGLE,this.portId,t,function(e){const t=new Uint8Array(4);return new DataView(t.buffer).setUint32(0,e,!0),Array.from(t)}(o),n?1:0)}decodeValue(e){}handleValue(e){let t=this.decodeValue(e);null!=t&&this.valueCallbacks.emit(t)}handleFeedback(){"function"==typeof this.feedbackCallback&&this.feedbackCallback()}async getValue(e){return console.log("getValue",this.portId,{mode:e}),await this.setMode(e,!1),new Promise(async e=>{this.valueCallbacks.on(t=>(e(t),!0)),await this.hubDevice.sendMsg(s.PORT_INFORMATION_REQUEST,this.portId,0)})}async waitTestValue(t,n){return new Promise(async o=>{await this.setMode(t,!0),this.valueCallbacks.on(async a=>(e("waitTestValue",a),!!n(a)&&(e("waitTestValue OK"),await this.setMode(t,!1),o(),!0)))})}async subscribe(e,t,n=1){await this.setMode(e,!0,n),this.valueCallbacks.on(e=>(t(e),!1))}}class w extends S{constructor(e,t,n){super(e,t,n,E[t])}async setColor(e){return console.log("setColor",this.portId,{color:e}),await this.setMode(g.COLOR,!1),this.writeDirectMode(g.COLOR,!1,e)}async setRGBColor(e,t,n){return console.log("setColor",this.portId,{r:e,g:t,b:n}),await this.setMode(g.RGB,!1),this.writeDirectMode(g.RGB,!1,e,t,n)}}class _ extends S{constructor(e,t,n){super(e,t,n,E[t])}setPower(e){return console.log("setPower",this.portId,{power:e}),this.writeDirectMode(g.POWER,!1,e)}setSpeed(e){return console.log("setSpeed",this.portId,{speed:e}),this.writePortCommand(!1,7,e,O,0)}rotateDegrees(e,t,n,o=f.BRAKE){return console.log("rotateDegrees",this.portId,{degrees:e,speed:t,waitFeedback:n,brakingStyle:o}),this.writePortCommand(n,11,R(e),t,O,o)}gotoAngle(e,t,n,o=f.BRAKE){return console.log("gotoAngle",this.portId,{angle:e,speed:t,waitFeedback:n,brakingStyle:o}),this.writePortCommand(n,13,R(e),t,O,o)}setSpeedForTime(e,t,n=!1,o=f.BRAKE){return console.log("setSpeedForTime",this.portId,{speed:e,time:t,waitFeedback:n,brakingStyle:o}),this.writePortCommand(n,9,I(t),e,O,o)}resetZero(){return console.log("resetZero",this.portId),this.writeDirectMode(g.ROTATION,!0,0,0,0,0)}async calibrate(){console.log("calibrate",this.portId),this.setPower(50),await this.waitTestValue(g.SPEED,e=>e>10),await this.waitTestValue(g.SPEED,e=>0==e),this.setPower(0),await $$.util.wait(1e3),await this.resetZero(),this.setPower(-50),await this.waitTestValue(g.SPEED,e=>Math.abs(e)>10),await this.waitTestValue(g.SPEED,e=>0==e),this.setPower(0);const e=await this.getValue(g.ROTATION);console.log(e);const t=Math.floor(e/2);console.log({offset:t}),await this.gotoAngle(t,10,!0),await this.resetZero(),this.calibrationValue=Math.abs(t)}decodeValue(e){let t;switch(this.mode){case g.ABSOLUTE:t=e.getInt16(4,!0);break;case g.ROTATION:t=e.getInt32(4,!0);break;case g.SPEED:t=e.getInt8(4)}return t}}class M extends S{constructor(e,t,n){super(e,t,n,E[t])}decodeValue(e){let t;switch(this.mode){case g.TILT_POS:t={yaw:e.getInt16(4,!0),pitch:e.getInt16(6,!0),roll:e.getInt16(8,!0)}}return t}}class y extends S{constructor(e,t,n){super(e,t,"Virtual Device",n)}async create(){const e=await this.hubDevice.createVirtualPort(this.portId1,this.portId2);await $$.util.wait(100),this.portId=this.hubDevice.getPortIdFromName(e),console.log("portId",this.portId)}setSpeed(e,t){this.hubDevice;return this.writePortCommand(!1,8,e,t,O,0)}setSpeedForTime(e,t,n,o=!1,a=f.BRAKE){return console.log("setSpeedForTime",this.portId,{speed1:e,speed2:t,time:n,waitFeedback:o,brakingStyle:a}),this.writePortCommand(this.portId,o,10,I(n),e,t,O,a)}rotateDegrees(e,t,n,o,a=f.BRAKE){return console.log("rotateDegrees",this.portId,{degrees:e,speed1:t,speed2:n,waitFeedback:o,brakingStyle:a}),this.writePortCommand(o,12,R(e),t,n,O,a)}gotoAngle(e,t,n,o,a=f.BRAKE){console.log("gotoAngle",this.portId,{angle1:e,angle2:t,speed:n,waitFeedback:o,brakingStyle:a});this.hubDevice.portValue[this.portId];return this.writePortCommand(o,14,R(e),R(t),n,O,a)}}function P(e,t){return`${E[e]}_${E[t]}`}const D={[r.TECHNIC_LARGE_LINEAR_MOTOR]:_,[r.TECHNIC_LARGE_ANGULAR_MOTOR_GREY]:_,[r.TECHNIC_XLARGE_LINEAR_MOTOR]:_,[r.TECHNIC_MEDIUM_HUB_TILT_SENSOR]:M,[r.HUB_LED]:w};class U extends EventEmitter2{constructor(){super(),this.charac=null,this.portCmdQueue={},this.portCmdCallback={},this.hubDevices={},this.busy=!1,this.cmdQueue=[],this.attachCallbacks=new C}async init(t){const a=await t.gatt.connect();e("Connected");const i=await a.getPrimaryService(n);this.charac=await i.getCharacteristic(o);const s=e=>{this.decodeMsg(e.target.value)};t.addEventListener("gattserverdisconnected",()=>{console.log("onGattServerDisconnected",this),this.charac.removeEventListener("characteristicvaluechanged",s),this.charac=null,this.emit("disconnected")}),this.charac.addEventListener("characteristicvaluechanged",s),await this.charac.startNotifications(),await $$.util.wait(100)}async startNotification(){await this.sendMsg(s.HUB_PROPERTIES,b.BATTERY_VOLTAGE,2),await this.sendMsg(s.HUB_PROPERTIES,b.SYSTEM_TYPE_ID,5),await this.sendMsg(s.HUB_PROPERTIES,b.PRIMARY_MAC_ADDRESS,5),await this.sendMsg(s.HUB_ALERTS,1,1)}getMotor(t){return new Promise((n,o)=>{const a=this.hubDevices[t];a?a instanceof _?n(a):o():this.attachCallbacks.on(o=>o.portId==t&&(e(`device on portId ${t} is ready`),n(o),!0))})}getTiltSensor(t){return new Promise((n,o)=>{const a=this.hubDevices[t];a?a instanceof M?n(a):o():this.attachCallbacks.on(o=>o.portId==t&&(e(`device on portId ${t} is ready`),n(o),!0))})}getLed(t){return new Promise((n,o)=>{const a=this.hubDevices[t];a?a instanceof w?n(a):o():this.attachCallbacks.on(o=>o.portId==t&&(e(`device on portId ${t} is ready`),n(o),!0))})}async getDblMotor(e,t){return new Promise(async n=>{const o=P(e,t),a=Object.values(this.hubDevices).find(e=>e.name==o);a?n(a):(this.attachCallbacks.on(e=>e.name==o&&(console.log(`device on portId ${e.portId} is ready`),n(e),!0)),await this.createVirtualPort(e,t))})}async sendBuffer(t){e("sendBuffer",t),this.busy?(e("busy push in queue"),this.cmdQueue.push(t)):(this.busy=!0,await this.charac.writeValueWithoutResponse(t),this.busy=!1,this.cmdQueue.length>0&&await this.sendBuffer(this.cmdQueue.shift()))}sendMsg(t,...n){return e("sendMsg",l[t],n),this.sendBuffer(A(t,n))}getPortIdFromName(e){for(const t of Object.values(this.hubDevices))if(t.name==e)return t.portId}createVirtualPort(e,t){return this.sendMsg(s.VIRTUAL_PORT_SETUP,1,e,t)}shutdown(){return this.sendMsg(s.HUB_ACTIONS,1)}getHubDevices(){return Object.values(this.hubDevices)}getDeviceType(e){return c[this.hubDevices[e].type]}async getPortInformation(e){const t=await this.getPortInformationRequest(e),{capabilities:n,count:o,output:a,input:i}=t,s=Math.max(i,a),l=[];for(let t=0;t<o;t++){const n={};if(s>>t){let o;o=await this.getPortModeInformationRequest(e,t,u.NAME),n.name=o.name,n[(o=await this.getPortModeInformationRequest(e,t,u.RAW)).type]={min:o.min,max:o.max},n[(o=await this.getPortModeInformationRequest(e,t,u.PCT)).type]={min:o.min,max:o.max},n[(o=await this.getPortModeInformationRequest(e,t,u.SI)).type]={min:o.min,max:o.max},o=await this.getPortModeInformationRequest(e,t,u.SYMBOL),n.unit=o.symbol,o=await this.getPortModeInformationRequest(e,t,u.VALUE_FORMAT);const{numValues:a,dataType:i,totalFigures:s,decimals:l}=o;n[o.type]={numValues:a,dataType:i,totalFigures:s,decimals:l}}l.push(n)}return{modes:l,capabilities:n}}getPortInformationRequest(e){return new Promise(async t=>{await this.sendMsg(s.PORT_INFORMATION_REQUEST,e,1),this.portCmdCallback[e]=t})}getPortModeInformationRequest(e,t,n){return new Promise(async o=>{await this.sendMsg(s.PORT_MODE_INFORMATION_REQUEST,e,t,n),this.portCmdCallback[e]=o})}decodeMsg(t){t.byteLength,t.getUint8(0);const n=t.getUint8(2);switch(e("decodeMsg",{msgType:l[n]}),n){case s.HUB_ATTACHED_IO:this.handlePortMsg(t);break;case s.GENERIC_ERROR_MESSAGES:this.handleGenericErrorMsg(t);break;case s.HUB_PROPERTIES:this.handleHubPropertyResponse(t);break;case s.HUB_ALERTS:this.handleHubAlerts(t);break;case s.PORT_OUTPUT_COMMAND_FEEDBACK:this.handlePortCommandFeedback(t);break;case s.PORT_MODE_INFORMATION:this.handlePortModeInformation(t);break;case s.PORT_INFORMATION:this.handlePortInformation(t);break;case s.PORT_VALUE_SINGLE:this.handlePortValueSingle(t)}}handlePortValueSingle(t){const n=t.getUint8(3),o=t.getUint8(0),a=this.hubDevices[n];e("handlePortValueSingle",{msgLen:o,portId:n}),a.handleValue(t)}handlePortModeInformation(t){const n=t.getUint8(3),o=t.getUint8(4),a=t.getUint8(5),i={portId:n,mode:o,type:m[a]};switch(a){case u.NAME:i.name=T(t.buffer.slice(6,t.byteLength));break;case u.RAW:case u.PCT:case u.SI:i.min=t.getFloat32(6,!0),i.max=t.getFloat32(10,!0);break;case u.SYMBOL:i.symbol=T(t.buffer.slice(6,t.byteLength));break;case u.VALUE_FORMAT:i.numValues=t.getUint8(6),i.dataType=["8bit","16bit","32bit","float"][t.getUint8(7)],i.totalFigures=t.getUint8(8),i.decimals=t.getUint8(9)}e("portModeInformation",i);const s=this.portCmdCallback[n];"function"==typeof s&&(s(i),delete this.portCmdCallback[n])}handlePortInformation(t){const n=t.getUint8(3);let o=t.getUint8(5);const a=t.getUint8(6),i=t.getUint16(7,!0),s=t.getUint16(9,!0);e(`Port ${n}, capabilities ${o}, total modes ${a}, \n                    input modes ${i}, output modes ${s}`);const l="output,input,logical combinable, logical synchronisable".split(",");let r=[];for(let e=0;e<4;e++)o>>e&1&&r.push(l[e]);const c={portId:n,capabilities:r.join(", "),count:a,input:i,output:s},d=this.portCmdCallback[n];"function"==typeof d&&d(c)}handleHubPropertyResponse(t){const n=t.getUint8(3);if(e({property:p[n]}),n==b.BATTERY_VOLTAGE){const n=t.getUint8(5);e({batteryLevel:n}),this.emit("batteryLevel",{batteryLevel:n})}else if(n==b.BUTTON_STATE){const n=t.getUint8(5);e({buttonState:n}),this.emit("buttonState",{buttonState:n})}else if(n==b.SYSTEM_TYPE_ID){const n=t.getUint8(5);e({systemType:n})}else if(n==b.PRIMARY_MAC_ADDRESS){const n=[];for(let e=0;e<6;e++)n.push(t.getUint8(5+e).toString(16).toLocaleUpperCase().padStart(2,"0"));e({bytes:n}),this.emit("address",{address:n.join(":")})}}handleGenericErrorMsg(t){const n=t.getUint8(3),o=t.getUint8(4);e({cmdType:n,errorCode:d[o]}),this.emit("error",{cmdType:n,errorCode:d[o]})}handleHubAlerts(t){const n=t.byteLength,o=t.getUint8(0),a=t.getUint8(3),i=t.getUint8(4),s=t.getUint8(5);e("handleHubAlerts",{bufferLen:n,msgLen:o,type:a,operation:i,payload:s}),this.emit("hubAlerts",{type:a,payload:s})}handlePortCommandFeedback(t){for(let n=3;n<t.byteLength;n+=2){const o=t.getUint8(n),a=t.getUint8(n+1),i=this.hubDevices[o];e("handlePortCommandFeedback",{portId:o,feedback:a}),10==a&&null!=i&&i.handleFeedback()}}handlePortMsg(t){const n=t.getUint8(3),o=t.getUint8(4),s=o?t.getUint16(5,!0):0,l=c[s]||"Unknown",r=i[o];if(e("handlePortMsg",{portId:n,eventName:r,deviceTypeName:l}),o==a.ATTACHED_IO){let e=D[s];e||(e=S);const t=new e(this,n,l);this.hubDevices[n]=t,this.attachCallbacks.emit(t),this.emit("attach",t)}else if(o==a.DETACHED_IO)delete this.hubDevices[n],this.emit("detach",{portId:n});else if(o==a.ATTACHED_VIRTUAL_IO){const e=t.getUint8(7),o=t.getUint8(8),a=new y(this,n,P(e,o));this.hubDevices[n]=a,this.attachCallbacks.emit(a),this.emit("attach",a)}}}$$.service.registerService("hub",{init:function(){return{connect:async function(){e("connect");const t=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:[n]}),o=new U;return await o.init(t),o},Color:h,PortMap:v,PortMapNames:E,DeviceMode:g,BrakingStyle:f,DeviceTypeNames:c}}})}(),$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <div class="left">\n        \n        <button bn-event="click: onNewConfig" bn-icon="fa fa-file" title="Reset Config"></button>\n\n        <button bn-event="click: onConfig" bn-icon="fa fa-folder-open" title="Open Config"></button>\n\n        <button bn-event="click: onSaveConfig" bn-icon="fa fa-save" title="Save current config"></button>\n\n        <div bn-show="currentConfig">\n            <label>Current Config:</label>\n            <span bn-text="currentConfig"></span>\n        </div>\n\n    </div>\n\n    <div></div>\n</div>\n\n<div class="toolbar">\n\n    <div class="left">\n        <button bn-event="click: onConnect">Connect to HUB</button>\n        \n        <button bn-event="click: onActions">Actions</button>\n\n        <button bn-event="click: onGamePad" bn-show="gamepadConnected">Gamepad</button>\n\n\n    </div>\n</div>\n\n<div bn-show="hasVariables" class="variables">\n    <table class="w3-table-all">\n        <thead>\n            <th>Variable Name</th>\n            <th>Value</th>\n        </thead>\n        <tbody bn-each="variables">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.value"></td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Hub</th>\n                <th>Actions</th>\n                <th>Battery Level</th>\n                <th>Angle</th>\n                <th>Address</th>\n            </tr>\n        </thead>\n        <tbody bn-each="hubDevices" bn-event="click.btnShutdown: onShutDown, click.btnInfo: onInfo, comboboxchange.combo: onHubChange">\n            <tr>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: hubs}" bn-val="$scope.$i.hubId" class="combo"></div>\n                </td>\n                <td>\n                    <button class="btnShutdown">Shutdown</button>\n                    <button class="btnInfo">Info</button>\n                </td>\n                <td bn-text="$scope.$i.batteryLevel"></td>\n                <td >\n                    <div class="angleInfo">\n                        <label>Roll</label>\n                        <span bn-text="$scope.$i.tilt.roll"></span>\n                    </div>\n                    <div class="angleInfo">\n                        <label>Pitch</label>\n                        <span bn-text="$scope.$i.tilt.pitch"></span>\n                    </div>\n                    <div class="angleInfo">\n                        <label>Yaw</label>\n                        <span bn-text="$scope.$i.tilt.yaw"></span>\n                    </div>                    \n                </td>\n                <td bn-text="$scope.$i.address"></td>\n            </tr>\n        </tbody>\n    </table>\n\n</div>',deps:["breizbot.pager","hub","breizbot.gamepad","actionSrv","breizbot.http"],props:{},init:async function(e,t,n,o,a,i){let s={actions:[],mappings:{}};e.find("button").addClass("w3-btn w3-blue");const l={};let r=1,c=null,d="";a.on("varChange",e=>{console.log("onVarChange",e);const t=a.getVariables();console.log("variables",t),b.setData({variables:t})});const b=$$.viewController(e,{data:{currentConfig:"",gamepadConnected:!1,hubDevices:[],hubs:["HUB1","HUB2"],variables:[],hasVariables:function(){return this.variables.length>0}},events:{onNewConfig:function(){s={actions:[],mappings:{}},c=null,b.setData({currentConfig:""}),a.resetVariables()},onSaveConfig:async function(){if(""==b.model.currentConfig){const e=await $$.ui.showPrompt({title:"Save Config",label:"Config Name:"});e&&(await i.post("/add",{name:e,actions:s.actions,mappings:s.mappings}),b.setData({currentConfig:e}))}else await i.post("/update",s),$.notify(`Config '${s.name}' updated`,"success")},onConfig:function(){t.pushPage("configCtrl",{title:"Configurations",props:{currentConfig:b.model.currentConfig},onReturn:function(e){s=e,b.setData({currentConfig:e.name}),c=s.mappings[d],a.resetVariables()}})},onHubChange:function(){const e=$(this).closest("tr").index(),t=$(this).getValue(),n=l[b.model.hubDevices[e].UUID];console.log("hubDevice",n),n.name=t,b.model.hubDevices[e].hubId=t},onShutDown:function(){const e=$(this).closest("tr").index(),t=b.model.hubDevices[e];l[t.UUID].shutdown()},onInfo:function(){const e=$(this).closest("tr").index(),n=b.model.hubDevices[e],o=l[n.UUID];console.log("hubDevice",o),t.pushPage("hubinfo",{title:n.hubId,props:{hubDevice:o}})},onActions:function(){t.pushPage("actionsCtrl",{title:"Actions",props:{actions:s.actions,hubDevices:Object.values(l)},onReturn:async function(e){console.log("onReturn",e),s.actions=e}})},onGamePad:function(){o.off("buttonUp",m),o.off("buttonDown",u),o.off("axe",h),t.pushPage("gamepad",{title:"Gamepad",props:{mapping:c,actions:s.actions},onBack:v,onReturn:async e=>{c=e,console.log("onReturn",c),console.log("config",s),s.mappings[e.id]=c,v()}})},onConnect:async function(){const e=await n.connect(),t=r++;l[t]=e,e.on("error",e=>{console.log(e)});const o=`HUB${b.model.hubDevices.length+1}`;e.name=o,b.model.hubDevices.push({UUID:t,hubId:o,batteryLevel:0,address:"Unknown"}),b.update(),e.on("batteryLevel",e=>{b.model.hubDevices.find(e=>e.UUID==t).batteryLevel=e.batteryLevel,b.update()}),e.on("address",e=>{console.log("address",e),b.model.hubDevices.find(e=>e.UUID==t).address=e.address,b.update()}),e.startNotification(),e.on("disconnected",()=>{console.log("disconnected");const e=b.model.hubDevices.findIndex(e=>e.UUID==t);b.model.hubDevices.splice(e,1),b.update(),delete l[t]});const a=await e.getTiltSensor(n.PortMap.TILT_SENSOR);await a.subscribe(n.DeviceMode.TILT_POS,e=>{b.model.hubDevices.find(e=>e.UUID==t).tilt=e,b.update()},10)}}});function p(e,t){a.execAction(Object.values(l),s.actions,e,t)}function u(e){if(c){const{down:t}=c.buttons[e.id];"None"!=t&&p(t,1)}}function m(e){if(c){const{up:t,down:n}=c.buttons[e.id];"Zero"==t?"None"!=n&&p(n,0):"None"!=t&&p(t,1)}}function h(e){if(c){const{action:t}=c.axes[e.id];"None"!=t&&p(t,e.value)}}function v(){console.log("initCbk"),o.on("buttonUp",m),o.on("buttonDown",u),o.on("axe",h)}o.on("connected",e=>{console.log("gamepad connnected",e),d=e.id,c=s.mappings[d],console.log({gamepadMapping:c}),b.setData({gamepadConnected:!0}),o.checkGamePadStatus(),v()}),o.on("disconnected",e=>{console.log("gamepad disconnected"),b.setData({gamepadConnected:!1}),c=null})}}),$$.control.registerControl("stepCtrl",{template:'<form bn-event="submit: onSubmit">\n    <div class="group">\n\n        <label>Type</label>\n        <div bn-control="brainjs.combobox" bn-data="{items: actionTypes}" name="type" bn-update="comboboxchange"\n            bn-val="type"></div>\n    </div>\n    \n    <div bn-if="isSleep">\n    \n        <div class="group">\n            <label>Time (ms)</label>\n            <input type="number" required name="time" min="0">\n        </div>\n    \n    </div>\n    \n    \n    <div bn-if="isSpeed">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed</label>\n            <input type="number" required name="speed" min="-100" max="100">\n        </div>\n    </div>\n    \n    <div bn-if="isSpeedtime">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed</label>\n            <input type="number" required name="speed" min="-100" max="100">\n        </div>\n        <div class="group">\n            <label>Time (ms)</label>\n            <input type="number" required name="time" min="0">\n        </div>\n        <div class="group">\n            <label>Wait End</label>\n            <input type="checkbox" name="waitFeedback">\n        </div>\n        <div class="group">\n            <label>Braking Style</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: brakeStyles}" name="brakeStyle" bn-val="brakeStyle"></div>\n        </div>\n    </div>\n    \n    <div bn-if="isDblspeedtime">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port1</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port1" bn-val="port1"></div>\n        </div>\n    \n        <div class="group">\n            <label>Port2</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port2" bn-val="port2"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed1</label>\n            <input type="number" required name="speed1" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Speed2</label>\n            <input type="number" required name="speed2" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Time (ms)</label>\n            <input type="number" required name="time" min="0">\n        </div>\n        <div class="group">\n            <label>Wait End</label>\n            <input type="checkbox" name="waitFeedback">\n        </div>\n        <div class="group">\n            <label>Braking Style</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: brakeStyles}" name="brakeStyle" bn-val="brakeStyle"></div>\n        </div>\n    </div>\n    \n    <div bn-if="isPower">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n        <div class="group">\n            <label>Power</label>\n            <input type="number" required name="power" min="-100" max="100">\n        </div>\n    </div>\n    \n    <div bn-if="isRotate">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed</label>\n            <input type="number" required name="speed" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Angle (°)</label>\n            <input type="number" required name="angle" step="1">\n        </div>\n    \n        <div class="group">\n            <label>Wait End</label>\n            <input type="checkbox" name="waitFeedback">\n        </div>\n    \n        <div class="group">\n            <label>Braking Style</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: brakeStyles}" name="brakeStyle" bn-val="brakeStyle"></div>\n        </div>\n    </div>\n    \n    <div bn-if="isDblrotate">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port1</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port1" bn-val="port1"></div>\n        </div>\n    \n        <div class="group">\n            <label>Port2</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port2" bn-val="port2"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed1</label>\n            <input type="number" required name="speed1" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Speed2</label>\n            <input type="number" required name="speed2" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Angle (°)</label>\n            <input type="number" required name="angle" step="1">\n        </div>\n    \n        <div class="group">\n            <label>Wait End</label>\n            <input type="checkbox" name="waitFeedback">\n        </div>\n    \n        <div class="group">\n            <label>Braking Style</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: brakeStyles}" name="brakeStyle" bn-val="brakeStyle"></div>\n        </div>\n    </div>\n    \n    <div bn-if="isPosition">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed</label>\n            <input type="number" required name="speed" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Angle (°)</label>\n            <input type="number" required name="angle" step="1">\n        </div>\n    \n        <div class="group">\n            <label>Wait End</label>\n            <input type="checkbox" name="waitFeedback">\n        </div>\n    \n        <div class="group">\n            <label>Braking Style</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: brakeStyles}" name="brakeStyle" bn-val="brakeStyle"></div>\n        </div>\n    </div>\n    \n    <div bn-if="isDblposition">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port1</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port1" bn-val="port1"></div>\n        </div>\n    \n        <div class="group">\n            <label>Port2</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port2" bn-val="port2"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed</label>\n            <input type="number" required name="speed" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Angle1 (°)</label>\n            <input type="number" required name="angle1" step="1">\n        </div>\n    \n        <div class="group">\n            <label>Angle2 (°)</label>\n            <input type="number" required name="angle2" step="1">\n        </div>\n    \n        <div class="group">\n            <label>Wait End</label>\n            <input type="checkbox" name="waitFeedback">\n        </div>\n    \n        <div class="group">\n            <label>Braking Style</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: brakeStyles}" name="brakeStyle" bn-val="brakeStyle"></div>\n        </div>\n    </div>\n    \n    <div bn-if="isCalibrate">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n    </div>\n    \n    \n    <div bn-if="isZero">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n    </div>\n    \n    <div bn-if="isColor">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Color</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ledColors}" name="color"></div>\n        </div>\n    \n    </div>\n    \n    <div bn-if="isRgb">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Red</label>\n            <input type="number" min="0" max="255" name="red">\n        </div>\n        <div class="group">\n            <label>Green</label>\n            <input type="number" min="0" max="255" name="green">\n        </div>\n        <div class="group">\n            <label>Blue</label>\n            <input type="number" min="0" max="255" name="blue">\n        </div>\n    </div>\n    \n    <div bn-if="isDblspeed">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port1</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port1" bn-val="port1"></div>\n        </div>\n    \n        <div class="group">\n            <label>Port2</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port2" bn-val="port2"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed1</label>\n            <input type="number" required name="speed1" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Speed2</label>\n            <input type="number" required name="speed2" min="-100" max="100">\n        </div>\n    </div>\n\n    <div bn-if="isTestvar">\n        <div class="group">\n            <label>Variable Name</label>\n            <input type="text" name="varName" required>\n        </div>\n        <div class="group">\n            <label>If variable =</label>\n            <input type="text" name="varValue" required>\n        </div>\n        <div class="group">\n            <label>Action</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: availableActions}" name="eqAction" bn-val="eqAction"></div>\n        </div>\n        <div class="group">\n            <label>Else Action</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: availableActions}" name="neqAction" bn-val="neqAction"></div>\n        </div>\n    </div>\n\n    <div bn-if="isSetvar">\n        <div class="group">\n            <label>Variable Name</label>\n            <input type="text" name="varName" required>\n        </div>\n        <div class="group">\n            <label>Value</label>\n            <input type="text" name="varValue" required>\n        </div>\n    </div>\n</form>',deps:["breizbot.pager","hub"],props:{data:null},init:function(e,t,n){let{data:o,availableActions:a}=this.props;o=o||{},a.unshift("None");const i=["SLEEP","POWER","SPEED","DBLSPEED","SPEEDTIME","DBLSPEEDTIME","ROTATE","DBLROTATE","POSITION","DBLPOSITION","CALIBRATE","ZERO","COLOR","RGB","TESTVAR","SETVAR"],s="ABCD".split(""),l=Object.entries(n.Color).map(([e,t])=>Object.assign({label:e,value:t})),r=Object.entries(n.BrakingStyle).map(([e,t])=>Object.assign({label:e,value:t})),c={port:o.port||"A",port1:o.port1||"A",port2:o.port2||"B",type:o.type||"SPEED",hub:o.hub||"HUB1",brakeStyle:o.brakeStyle||n.BrakingStyle.BRAKE,actionTypes:i,brakeStyles:r,ledColors:l,ports:s,states:["STATE1","STATE2","STATE3"],hubs:["HUB1","HUB2"],availableActions:a,eqAction:o.eqAction||"None",neqAction:o.neqAction||"None",state:o.state||"STATE1"};for(const e of i){c["is"+(e.charAt(0)+e.slice(1).toLowerCase())]=function(){return this.type==e}}$$.viewController(e,{data:c,events:{onSubmit:function(e){console.log("onSubmit"),e.preventDefault()}}});e.setFormData(o)}}),$$.control.registerControl("actionCtrl",{template:'<div class="scrollPanel">\n\n    <div bn-each="steps" bn-index="idx" \n        bn-event="click.removeBtn: onRemoveStep, click.upBtn: onMoveUp, click.downBtn: onMoveDown">\n\n        <div class="stepItem">\n            <div class="menubar" >\n                <div>\n                    <button bn-icon="fas fa-level-up-alt" class="upBtn" title="MoveUp"\n                        bn-show="canMoveUp"></button>\n                    <button bn-icon="fas fa-level-down-alt" class="downBtn" title="MoveDown"\n                        bn-show="canMoveDown"></button>\n                    <button bn-icon="fa fa-trash-alt" class="removeBtn" title="Remove" \n                    bn-show="showMenubar"></button>\n\n                </div>\n            </div>\n            <div bn-control="stepCtrl" bn-data="{data: $scope.$i, availableActions}"></div>\n        </div>\n\n    </div>\n</div>',deps:["breizbot.pager"],props:{steps:[],availableActions:[]},init:function(e,t){console.log("actionCtrl props",this.props);const{steps:n,availableActions:o}=this.props,a=$$.viewController(e,{data:{steps:n,availableActions:o,showMenubar:function(e){return e.idx>0},canMoveUp:function(e){return e.idx>0},canMoveDown:function(e){return e.idx<this.steps.length-1}},events:{onMoveUp:function(){const e=$(this).closest(".stepItem").index();a.model.steps=i();const t=a.model.steps[e];a.model.steps[e]=a.model.steps[e-1],a.model.steps[e-1]=t,a.update()},onMoveDown:function(){const e=$(this).closest(".stepItem").index();a.model.steps=i();const t=a.model.steps[e];a.model.steps[e]=a.model.steps[e+1],a.model.steps[e+1]=t,a.update()},onRemoveStep:function(){const e=$(this).closest(".stepItem").index();console.log("onRemoveStep",e),a.model.steps.splice(e,1),a.update()}}});function i(){const t=[];return e.find("form").each(function(){t.push($(this).getFormData())}),t}this.getButtons=function(){return{addStep:{title:"Add Step",icon:"fa fa-plus",onClick:function(){a.model.steps=i(),a.model.steps.push({}),a.update()}},apply:{title:"Apply",icon:"fas fa-check",onClick:function(){let n=!0;e.find("form").each(function(){const e=$(this).get(0);n=n&&e.reportValidity()}),n&&t.popPage(i())}}}}}}),$$.control.registerControl("actionsCtrl",{template:'<div bn-show="!hasActions" class="message">\n    No actions defined\n</div>\n\n<div class="scrollPanel" bn-show="hasActions">\n    <div bn-each="actions" class="items" bn-event="click.item: onItemClick, contextmenuchange.item:onItemContextMenu">\n        <div class="w3-card-2 item" bn-control="brainjs.contextmenu" bn-data="{\n                    items: {\n                        edit: {name: \'Edit\', icon: \'fas fa-edit\'},\n                        delete: {name: \'Remove\', icon: \'fas fa-trash-alt\'},\n                        duplicate: {name: \'Duplicate\', icon: \'fas fa-clone\'}\n                    }\n                }">\n            <div>\n                <strong bn-text="$scope.$i.name"></strong>\n            </div>\n        </div>\n    </div>\n</div>',deps:["breizbot.pager","actionSrv"],props:{actions:null,isEdition:!0,hubDevices:null},init:function(e,t,n){console.log("props",this.props);const{isEdition:o,hubDevices:a}=this.props,i=Array.from(this.props.actions||[]);o||(i.unshift({name:"Zero"}),i.unshift({name:"None"}));const s=$$.viewController(e,{data:{actions:i,hasActions:function(){return this.actions.length>0}},events:{onItemContextMenu:async function(e,n){const o=$(this).closest(".item").index(),a=s.model.actions[o];if("delete"==n.cmd&&(s.model.actions.splice(o,1),s.update()),"duplicate"==n.cmd){const e=await $$.ui.showPrompt({label:"New Name",title:"Add action"});if(null==e)return;const t=Object.assign({},a,{name:e});s.model.actions.push(t),s.update()}if("edit"==n.cmd){let{steps:e}=a;Array.isArray(e)||(e=[a]);const n=s.model.actions.map(e=>e.name);t.pushPage("actionCtrl",{title:a.name,props:{steps:e,availableActions:n},onReturn:function(e){s.model.actions[o]={name:a.name,steps:e}}})}},onItemClick:function(e){const i=$(this).closest(".item").index(),l=s.model.actions[i];o?n.execAction(a,s.model.actions,l.name,1):t.popPage(l.name)}}});o&&(this.getButtons=function(){return{addAction:{title:"Add Action",icon:"fa fa-plus",onClick:async function(){const e=await $$.ui.showPrompt({label:"Name",title:"Add action"});if(null==e)return;const n=s.model.actions.map(e=>e.name);t.pushPage("actionCtrl",{title:e,props:{steps:[{}],availableActions:n},onReturn:function(t){s.model.actions.push({name:e,steps:t}),s.update()}})}},save:{title:"Save",icon:"fa fa-check",onClick:function(){t.popPage(s.model.actions)}}}})}}),$$.control.registerControl("configCtrl",{template:'<div bn-show="!hasConfigs" class="message">\n    No configurations defined\n</div>\n\n<div class="scrollPanel" bn-show="hasConfigs">\n    <div bn-each="configs" class="items" bn-event="click.item: onItemClick, contextmenuchange.item:onItemContextMenu">\n        <div class="w3-card-2 item" bn-control="brainjs.contextmenu" bn-data="{\n                    items: {\n                        delete: {name: \'Remove\', icon: \'fas fa-trash-alt\'}\n                    }\n                }">\n            <div>\n                <strong bn-text="$scope.$i.name"></strong>\n            </div>\n        </div>\n    </div>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{currentConfig:""},init:function(e,t,n){const{currentConfig:o}=this.props,a=$$.viewController(e,{data:{configs:[],hasConfigs:function(){return this.configs.length>0}},events:{onItemContextMenu:async function(e,t){const s=$(this).closest(".item").index(),l=a.model.configs[s];"delete"==t.cmd&&(l.name==o?$$.ui.showAlert({content:"Cannot delete active config",title:"Warning"}):(await n.post("/delete",l),i()))},onItemClick:function(e){const n=$(this).closest(".item").index();console.log("onItemClick",n);const o=a.model.configs[n];t.popPage(o)}}});async function i(){const e=await n.get("/");console.log({configs:e}),a.setData({configs:e})}i()}}),$$.control.registerControl("gamepad",{template:'<div>\n    <h2 bn-text="id"></h2>\n</div>\n\n<h3>Axes</h3>\n<div>\n    <table class="w3-table-all axeTable">\n        <thead>\n            <tr>\n                <th>Axe</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="axes" bn-bind="axes" bn-index="idx" bn-event="click.item: onAxeClick">\n            <tr>\n                <td bn-text="getAxeLabel"></td>\n                <td>\n                    <div bn-text="$scope.$i.action" class="item"></div>\n                </td>                \n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<h3>Buttons</h3>\n<div class="commandTable">\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Button</th>\n                <th>Down</th>\n                <th>Up</th>\n            </tr>\n        </thead>\n        <tbody bn-each="buttons" bn-bind="buttons" bn-index="idx" bn-event="click.item: onButtonClick">\n            <tr>\n                <td bn-text="getButtonLabel"></td>\n                <td>\n                    <div bn-text="$scope.$i.down" class="item" data-cmd="down">\n                    </div>\n                </td>\n                <td>\n                    <div bn-text="$scope.$i.up" class="item" data-cmd="up">\n                    </div>\n                </td>\n\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","breizbot.gamepad"],props:{mapping:null,actions:null},init:function(e,t,n){const{mapping:o,actions:a}=this.props;console.log(this.props);let i=[],s=[];const l=n.getGamepads()[0];if(null!=o&&(i=o.axes,s=o.buttons),0==i.length)for(let e=0;e<l.axes.length;e++)i.push({action:"None"});if(0==s.length)for(let e=0;e<l.buttons.length;e++)s.push({up:"None",down:"None"});function r(e){const{value:t,id:n}=e;0!=t?p.find("tr").eq(n).find("td").eq(0).addClass("pressed"):p.find("tr").eq(n).find("td").eq(0).removeClass("pressed")}function c(e){u.find("tr").eq(e.id).find("td").eq(0).addClass("pressed")}function d(e){u.find("tr").eq(e.id).find("td").eq(0).removeClass("pressed")}n.on("axe",r),n.on("buttonDown",c),n.on("buttonUp",d),this.dispose=function(){console.log("dispose"),n.off("axe",r),n.off("buttonDown",c),n.off("buttonUp",d)};const b=$$.viewController(e,{data:{id:l.id,axes:i,buttons:s,getButtonLabel:function(e){return`Button ${e.idx+1}`},getAxeLabel:function(e){return`Axe ${e.idx+1}`}},events:{onButtonClick:function(){const e=$(this).closest("tr").index(),n=$(this).data("cmd");t.pushPage("actionsCtrl",{title:"Select an action",props:{isEdition:!1,actions:a},onReturn:function(t){b.model.buttons[e][n]=t,b.update()}})},onAxeClick:function(){const e=$(this).closest("tr").index();console.log("onAxeClick",e),t.pushPage("actionsCtrl",{title:"Select an action",props:{isEdition:!1,actions:a},onReturn:function(t){b.model.axes[e].action=t,b.update()}})}}}),p=b.scope.axes,u=b.scope.buttons;this.getButtons=function(){return{check:{icon:"fa fa-check",title:"Apply",onClick:function(){t.popPage(function(){const e={id:l.id,axes:[],buttons:[]};return p.find("tr").each(function(t){const n=$(this).find(".item").text();e.axes.push({action:n})}),u.find("tr").each(function(t){const n=$(this).find('[data-cmd="up"]').text(),o=$(this).find('[data-cmd="down"]').text();e.buttons.push({up:n,down:o})}),console.log({ret:e}),e}())}}}}}}),$$.control.registerControl("hubinfo",{template:'<div class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="mousedown.action: onMouseUp, mouseup.action:onMouseDown, click.portInfo: onInfo2, click.calibrate:onCalibrate">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.type"></td>\n                <td>\n                    <button class="w3-btn w3-green action" data-action="forward">FWD</button>\n                    <button class="w3-btn w3-green action" data-action="backward">BKWD</button>\n                    <button class="w3-btn w3-green calibrate">CALIBRATE</button>\n\n                    <button class="w3-btn w3-blue portInfo">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port ID</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-btn: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.portId"></td>\n                <td bn-text="$scope.$i.type"></td>\n                <td>\n                    <button class="w3-btn w3-blue">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub"],props:{hubDevice:null},init:function(e,t,n){const o=this.props.hubDevice,a=o.getHubDevices();console.log("devices",a);const i=[],s=[];for(const e of a){const{portId:t,type:n,name:o}=e;t<50?s.push({name:o,portId:t,type:n}):i.push({portId:t,type:n})}function l(e,n){t.pushPage("info",{title:n,props:{portId:e,hubDevice:o}})}function r(e){const t=e.closest("tr").index();return b.model.externalDevices[t].portId}function c(e){console.log("attach",e);const{portId:t,deviceTypeName:n}=e;a[t]=n}function d(e){console.log("detach",e),delete a[e.portId]}o.on("attach",c),o.on("detach",d),this.dispose=function(){console.log("hubInfo dispose"),o.off("attach",c),o.off("detach",d)};const b=$$.viewController(e,{data:{internalDevices:i,externalDevices:s},events:{onCalibrate:async function(){const e=r($(this));console.log("onCalibrate",e);const t=await o.getMotor(e);await t.calibrate()},onMouseUp:async function(){const e=$(this).data("action"),t=r($(this)),n=await o.getMotor(t);switch(e){case"forward":n.setPower(100);break;case"backward":n.setPower(-100)}},onMouseDown:async function(){const e=r($(this));(await o.getMotor(e)).setPower(0)},onInfo:function(){const e=$(this).closest("tr").index(),{portId:t,deviceTypeName:n}=b.model.internalDevices[e];l(t,n)},onInfo2:function(){const e=$(this).closest("tr").index(),{portId:t,deviceTypeName:n}=b.model.externalDevices[e];l(t,n)}}})}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>MODE</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>PCT</th>\n                <th>SI</th>\n                <th>VALUE FORMAT</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n                <td>\n                    dataType: <span bn-text="$scope.$i.VALUE_FORMAT.dataType"></span><br>\n                    numValues: <span bn-text="$scope.$i.VALUE_FORMAT.numValues"></span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(e,t,n){const{portId:o}=this.props,a=this.props.hubDevice,i=$$.viewController(e,{data:{modes:[],capabilities:""},events:{}});!async function(){const e=await a.getPortInformation(o);console.log("portInfo",e);const{modes:t,capabilities:n}=e;i.setData({modes:t,capabilities:n})}()}});