!function(){const t=function(...t){0},{getEnumName:e}=$$.util,n="00001623-1212-efde-1623-785feabcd123",o="00001624-1212-efde-1623-785feabcd123",a={DETACHED_IO:0,ATTACHED_IO:1,ATTACHED_VIRTUAL_IO:2},i=e(a),s={HUB_PROPERTIES:1,HUB_ACTIONS:2,HUB_ALERTS:3,HUB_ATTACHED_IO:4,GENERIC_ERROR_MESSAGES:5,HW_NETWORK_COMMANDS:8,FW_UPDATE_GO_INTO_BOOT_MODE:16,FW_UPDATE_LOCK_MEMORY:17,FW_UPDATE_LOCK_STATUS_REQUEST:18,FW_LOCK_STATUS:19,PORT_INFORMATION_REQUEST:33,PORT_MODE_INFORMATION_REQUEST:34,PORT_INPUT_FORMAT_SETUP_SINGLE:65,PORT_INPUT_FORMAT_SETUP_COMBINEDMODE:66,PORT_INFORMATION:67,PORT_MODE_INFORMATION:68,PORT_VALUE_SINGLE:69,PORT_VALUE_COMBINEDMODE:70,PORT_INPUT_FORMAT_SINGLE:71,PORT_INPUT_FORMAT_COMBINEDMODE:72,VIRTUAL_PORT_SETUP:97,PORT_OUTPUT_COMMAND:129,PORT_OUTPUT_COMMAND_FEEDBACK:130},c=e(s),r={UNKNOWN:0,SIMPLE_MEDIUM_LINEAR_MOTOR:1,TRAIN_MOTOR:2,LIGHT:8,VOLTAGE_SENSOR:20,CURRENT_SENSOR:21,PIEZO_BUZZER:22,HUB_LED:23,TILT_SENSOR:34,MOTION_SENSOR:35,COLOR_DISTANCE_SENSOR:37,MEDIUM_LINEAR_MOTOR:38,MOVE_HUB_MEDIUM_LINEAR_MOTOR:39,MOVE_HUB_TILT_SENSOR:40,DUPLO_TRAIN_BASE_MOTOR:41,DUPLO_TRAIN_BASE_SPEAKER:42,DUPLO_TRAIN_BASE_COLOR_SENSOR:43,DUPLO_TRAIN_BASE_SPEEDOMETER:44,TECHNIC_LARGE_LINEAR_MOTOR:46,TECHNIC_XLARGE_LINEAR_MOTOR:47,TECHNIC_MEDIUM_ANGULAR_MOTOR:48,TECHNIC_LARGE_ANGULAR_MOTOR:49,TECHNIC_MEDIUM_HUB_GEST_SENSOR:54,REMOTE_CONTROL_BUTTON:55,REMOTE_CONTROL_RSSI:56,TECHNIC_MEDIUM_HUB_ACCELEROMETER:57,TECHNIC_MEDIUM_HUB_GYRO_SENSOR:58,TECHNIC_MEDIUM_HUB_TILT_SENSOR:59,TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR:60,TECHNIC_COLOR_SENSOR:61,TECHNIC_DISTANCE_SENSOR:62,TECHNIC_FORCE_SENSOR:63,TECHNIC_3X3_COLOR_LIGHT_MATRIX:64,TECHNIC_SMALL_ANGULAR_MOTOR:65,MARIO_ACCELEROMETER:71,MARIO_BARCODE_SENSOR:73,MARIO_PANTS_SENSOR:74,TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY:75,TECHNIC_LARGE_ANGULAR_MOTOR_GREY:76,VIRTUAL_DEVICE:100},d=e(r),l=e({ACK:1,MACK:2,BUFFER_OVERFLOW:3,TIMEOUT:4,COMMAND_NOT_RECOGNIZED:5,INVALID_USE:6,OVERCURRENT:7,INTERNAL_ERROR:8}),u={ADVERTISING_NAME:1,BUTTON_STATE:2,FW_VERSION:3,HW_VERSION:4,RSSI:5,BATTERY_VOLTAGE:6,BATTERY_TYPE:7,MANUFACTURER_NAME:8,RADIO_FIRMWARE_VERSION:9,LWP_PROTOCOL_VERSION:10,SYSTEM_TYPE_ID:11,HW_NETWORK_ID:12,PRIMARY_MAC_ADDRESS:13,SECONDARY_MAC_ADDRESS:14,HW_NETWORK_FAMILY:15},b=e(u),h={NAME:0,RAW:1,PCT:2,SI:3,SYMBOL:4,MAPPING:5,USED_INTERNALLY:6,MOTOR_BIAS:7,CAPABILITY_BITS:8,VALUE_FORMAT:128},p=e(h),E={BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,CYAN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:255},T={A:0,B:1,C:2,D:3,HUB_LED:50,CURRENT_SENSOR:59,VOLTAGE_SENSOR:60,ACCELEROMETER:97,GYRO_SENSOR:98,TILT_SENSOR:99},_={POWER:0,SPEED:1,ROTATION:2,ABSOLUTE:3,COLOR:0,RGB:1,TILT_POS:0},O={FLOAT:0,HOLD:126,BRAKE:127},R=e(T);function I(t){const e=new Uint8Array(t);let n="";for(let t=0;t<e.byteLength&&0!=e[t];t++)n+=String.fromCharCode(e[t]);return n}function m(t){const e=new Uint8Array(4);return new DataView(e.buffer).setInt32(0,t,!0),Array.from(e)}function f(t,...e){const n=e.flat(2),o=n.length+3,a=new ArrayBuffer(o),i=new Uint8Array(a);return i[0]=o,i[1]=0,i[2]=t,i.set(n,3),a}const A=100;class g{constructor(t,e){this.hubDevice=t,this.portId=e}setPower(t){return this.hubDevice.writeDirect(this.portId,_.POWER,t)}setSpeed(t){return this.hubDevice.writePortCommand(this.portId,7,t,A,0)}rotateDegrees(t,e,n=O.BRAKE){return this.hubDevice.writePortCommand(this.portId,11,m(t),e,A,n)}gotoAngle(t,e,n=O.BRAKE){return this.hubDevice.writePortCommand(this.portId,13,m(t),e,A,n)}setSpeedForTime(t,e,n=O.BRAKE){return this.hubDevice.writePortCommand(this.portId,9,function(t){const e=new Uint8Array(2);return new DataView(e.buffer).setInt16(0,t,!0),Array.from(e)}(e),t,A,n)}resetZero(){return this.hubDevice.writeDirect(this.portId,_.ROTATION,0,0,0,0)}waitSpeed(t){return this.hubDevice.waitTestValue(this.portId,_.SPEED,t)}}class M extends EventEmitter2{constructor(){super(),this.charac=null,this.deviceModes={},this.portCmdQueue={},this.portCmdCallback={},this.hubDevices={}}async init(e){const a=await e.gatt.connect();t("Connected");const i=await a.getPrimaryService(n);this.charac=await i.getCharacteristic(o),e.addEventListener("gattserverdisconnected",()=>{t("onGattServerDisconnected"),this.emit("disconnected")}),this.charac.addEventListener("characteristicvaluechanged",t=>{this.decodeMsg(t.target.value)}),await this.charac.startNotifications()}createMotor(t){return new g(this,t)}sendBuffer(t){return this.charac.writeValueWithoutResponse(t)}sendMsg(e,...n){return t("sendMsg",c[e],n),this.sendBuffer(f(e,n))}writeDirect(t,e,...n){return this.writePortCommand(t,81,e,n)}subscribe(t,e,n=1,o=null){return this.deviceModes[t]={mode:e,cbk:o},this.sendMsg(s.PORT_INPUT_FORMAT_SETUP_SINGLE,t,e,function(t){const e=new Uint8Array(4);return new DataView(e.buffer).setUint32(0,t,!0),Array.from(e)}(n),1)}createVirtualPort(t,e){return this.sendMsg(s.VIRTUAL_PORT_SETUP,1,t,e)}shutdown(){return this.sendMsg(s.HUB_ACTIONS,1)}async writePortCommand(t,...e){return console.log("writePortCommand",{portId:t,data:e}),new Promise(async n=>{const o=f(s.PORT_OUTPUT_COMMAND,t,17,e);null==this.portCmdQueue[t]&&(this.portCmdQueue[t]=[]),0==this.portCmdQueue[t].length?(this.portCmdQueue[t].push({buffer:o,cbk:n}),await this.sendBuffer(o)):(console.log("Cmd mise en attente"),this.portCmdQueue[t].push({buffer:o,cbk:n}))})}getHubDevices(){console.log("getHubDevices",this.hubDevices);const t={};for(const[e,n]of Object.entries(this.hubDevices))t[e]=d[n];return t}getDeviceType(t){return d[this.hubDevices[t]]}async getPortInformation(t){const e=await this.getPortInformationRequest(t),{capabilities:n,count:o,output:a,input:i}=e,s=Math.max(i,a),c=[];for(let e=0;e<o;e++){const n={};if(s>>e){let o;o=await this.getPortModeInformationRequest(t,e,h.NAME),n.name=o.name,n[(o=await this.getPortModeInformationRequest(t,e,h.RAW)).type]={min:o.min,max:o.max},n[(o=await this.getPortModeInformationRequest(t,e,h.PCT)).type]={min:o.min,max:o.max},n[(o=await this.getPortModeInformationRequest(t,e,h.SI)).type]={min:o.min,max:o.max},o=await this.getPortModeInformationRequest(t,e,h.SYMBOL),n.unit=o.symbol,o=await this.getPortModeInformationRequest(t,e,h.VALUE_FORMAT);const{numValues:a,dataType:i,totalFigures:s,decimals:c}=o;n[o.type]={numValues:a,dataType:i,totalFigures:s,decimals:c}}c.push(n)}return{modes:c,capabilities:n}}async waitTestValue(e,n,o){return new Promise(async a=>{await this.subscribe(e,n,1,n=>{t("waitTestValue",n),o(n.value)&&(delete this.deviceModes[e],a())})})}getPortInformationRequest(t){return new Promise(async e=>{await this.sendMsg(s.PORT_INFORMATION_REQUEST,t,1),this.portCmdCallback[t]=e})}getPortModeInformationRequest(t,e,n){return new Promise(async o=>{await this.sendMsg(s.PORT_MODE_INFORMATION_REQUEST,t,e,n),this.portCmdCallback[t]=o})}decodeMsg(e){e.byteLength,e.getUint8(0);const n=e.getUint8(2);switch(t("decodeMsg",{msgType:c[n]}),n){case s.HUB_ATTACHED_IO:this.handlePortMsg(e);break;case s.GENERIC_ERROR_MESSAGES:this.handleGenericErrorMsg(e);break;case s.HUB_PROPERTIES:this.handleHubPropertyResponse(e);break;case s.PORT_OUTPUT_COMMAND_FEEDBACK:this.handlePortCommandFeedback(e);break;case s.PORT_MODE_INFORMATION:this.handlePortModeInformation(e);break;case s.PORT_INFORMATION:this.handlePortInformation(e);break;case s.PORT_VALUE_SINGLE:this.handlePortValueSingle(e)}}handleTiltSensorValue(t,e){let n;switch(t){case _.TILT_POS:n={yaw:e.getInt16(4,!0),pitch:e.getInt16(6,!0),roll:e.getInt16(8,!0)}}return n}handleMotorValue(t,e){let n;switch(t){case _.ABSOLUTE:n=e.getInt16(4,!0);break;case _.ROTATION:n=e.getInt32(4,!0);break;case _.SPEED:n=e.getInt8(4)}return n}handlePortValueSingle(t){const e=t.getUint8(3),n=this.hubDevices[e];if(null!=this.deviceModes[e]){const{mode:o,cbk:a}=this.deviceModes[e];let i=null;switch(n){case r.TECHNIC_LARGE_LINEAR_MOTOR:case r.TECHNIC_LARGE_ANGULAR_MOTOR_GREY:i=this.handleMotorValue(o,t);break;case r.TECHNIC_MEDIUM_HUB_TILT_SENSOR:i=this.handleTiltSensorValue(o,t)}null!=i&&"function"==typeof a&&a({mode:o,value:i,portId:e})}}handlePortModeInformation(e){const n=e.getUint8(3),o=e.getUint8(4),a=e.getUint8(5),i={portId:n,mode:o,type:p[a]};switch(a){case h.NAME:i.name=I(e.buffer.slice(6,e.byteLength));break;case h.RAW:case h.PCT:case h.SI:i.min=e.getFloat32(6,!0),i.max=e.getFloat32(10,!0);break;case h.SYMBOL:i.symbol=I(e.buffer.slice(6,e.byteLength));break;case h.VALUE_FORMAT:i.numValues=e.getUint8(6),i.dataType=["8bit","16bit","32bit","float"][e.getUint8(7)],i.totalFigures=e.getUint8(8),i.decimals=e.getUint8(9)}t("portModeInformation",i);const s=this.portCmdCallback[n];"function"==typeof s&&(s(i),delete this.portCmdCallback[n])}handlePortInformation(e){const n=e.getUint8(3);let o=e.getUint8(5);const a=e.getUint8(6),i=e.getUint16(7,!0),s=e.getUint16(9,!0);t(`Port ${n}, capabilities ${o}, total modes ${a}, \n                    input modes ${i}, output modes ${s}`);const c="output,input,logical combinable, logical synchronisable".split(",");let r=[];for(let t=0;t<4;t++)o>>t&1&&r.push(c[t]);const d={portId:n,capabilities:r.join(", "),count:a,input:i,output:s},l=this.portCmdCallback[n];"function"==typeof l&&l(d)}handleHubPropertyResponse(e){const n=e.getUint8(3);if(t({property:b[n]}),n==u.BATTERY_VOLTAGE){const n=e.getUint8(5);t({batteryLevel:n}),this.emit("batteryLevel",{batteryLevel:n})}else if(n==u.BUTTON_STATE){const n=e.getUint8(5);t({buttonState:n}),this.emit("buttonState",{buttonState:n})}}handleGenericErrorMsg(e){const n=e.getUint8(3),o=e.getUint8(4);t({cmdType:n,errorCode:l[o]}),this.emit("error",{cmdType:n,errorCode:l[o]})}handlePortCommandFeedback(e){for(let n=3;n<e.byteLength;n+=2){const o=e.getUint8(n),a=e.getUint8(n+1);if(t({portId:o,feedback:a}),10==a){const{cbk:e}=this.portCmdQueue[o].shift();"function"==typeof e&&e();const n=this.portCmdQueue[o][0];n&&(t("envoie cmd mise en attente"),this.sendBuffer(n.buffer))}}}handlePortMsg(e){const n=e.getUint8(3),o=e.getUint8(4),s=o?e.getUint16(5,!0):0,c=d[s]||"Unknown",r=i[o];if(t("handlePortMsg",{portId:n,eventName:r,deviceTypeName:c}),o==a.ATTACHED_IO)this.hubDevices[n]=s,this.emit("attach",{portId:n,deviceTypeName:c});else if(o==a.DETACHED_IO)delete this.hubDevices[n],this.emit("detach",{portId:n});else if(o==a.ATTACHED_VIRTUAL_IO){const o=R[e.getUint8(7)],a=R[e.getUint8(8)];R[n]=`${o}_${a}`,this.hubDevices[n]=100,t({portIdA:o,portIdB:a}),this.emit("attach",{portId:n,deviceTypeName:"Virtual Port"})}console.log("hubDevices",this.hubDevices)}}$$.service.registerService("hub",{init:function(){return{connect:async function(){t("connect");const e=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:[n]}),o=new M;return await o.init(e),o},Color:E,PortMap:T,PortMapNames:R,DeviceMode:_,BrakingStyle:O}}})}(),$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <div class="left">\n        <button  \n            bn-event="click: onConnect"\n            bn-show="!connected"\n        >Connect to HUB</button>\n    \n        <button  \n            bn-event="click: onShutdown"\n            bn-show="connected"\n        >Shutdown</button>\n            \n        <button  \n            bn-event="click: onHubInfo"\n            bn-show="connected"\n        >Info</button>\n\n        <button  \n            bn-event="click: onGamePad"\n            bn-show="showGamepadButton"\n            bn-icon="fas fa-gamepad"\n        ></button>\n\n    </div>\n</div>\n\n<div class="controlBar" bn-event="mousedown.w3-btn: onButtonDown, mouseup.w3-btn: onButtonUp, touchstart.w3-btn: onButtonDown, touchend.w3-btn: onButtonUp"\n    bn-show="isInit">\n    <div class="controlBarItem1">\n        <div class="top">\n            <button  bn-icon="fas fa-angle-up" data-cmd="2"></button>\n        </div>\n        <div class="middle">\n            <button  bn-icon="fas fa-angle-left" data-cmd="3"></button>\n            <button  bn-icon="fas fa-angle-right" data-cmd="4"></button>\n        </div>\n        <div class="bottom">\n            <button  bn-icon="fas fa-angle-down" data-cmd="1"></button>\n        </div>\n    \n    </div>\n    <div class="controlBarItem2">\n        <div class="top">\n            <button  bn-icon="fas fa-angle-up" data-cmd="5"></button>\n        </div>\n        <div class="bottom">\n            <button  bn-icon="fas fa-angle-down" data-cmd="6"></button>\n        </div>\n    \n    </div>\n    \n</div>\n\n\n',deps:["breizbot.pager","hub","breizbot.gamepad","breizbot.appData"],props:{},init:async function(t,e,n,o,a){const i=a.getData();console.log("appData",i);t.find("button").addClass("w3-btn w3-blue");let s=null,c=null;const r=$$.viewController(t,{data:{connected:!1,batteryLevel:0,gamepadConnected:!1,showGamepadButton:function(){return this.gamepadConnected}},events:{onGamePad:function(){o.off("buttonUp",l),o.off("buttonDown",d),e.pushPage("gamepad",{title:"Gamepad",props:{mapping:c},onBack:u,onReturn:async t=>{c=t,console.log("onReturn",c),i[t.id]=c,await a.saveData(i),u()}})},onConnect:async function(){s=await n.connect(),window.hubDevice=s,s.on("disconnected",()=>{r.setData({connected:!1,mode:"UNKNOWN"}),s=null}),s.on("error",t=>{console.log(t)}),s.on("batteryLevel",t=>{const{batteryLevel:e}=t;r.setData({batteryLevel:e})}),r.setData({connected:!0})},onHubInfo:async function(){console.log("onHubInfo",s.getHubDevices()),e.pushPage("hubinfo",{title:"Hub Info",props:{hubDevice:s}})},onShutdown:async function(){await s.shutdown()}}});function d(t){if(c&&r.model.connected){const{port:e,action:o}=c.buttons[t.id];if(console.log({port:e,action:o}),"None"!=e){s.createMotor(n.PortMap[e]).setPower("FWD"==o?100:-100)}}}function l(t){if(c&&r.model.connected){const{port:e,action:o}=c.buttons[t.id];if(console.log({port:e,action:o}),"None"!=e){s.createMotor(n.PortMap[e]).setPower(0)}}}function u(){console.log("initCbk"),o.on("buttonUp",l),o.on("buttonDown",d)}o.on("connected",t=>{console.log("gamepad connnected",t),c=i[t.id],console.log({gamepadMapping:c}),r.setData({gamepadConnected:!0}),o.checkGamePadStatus(),u()}),o.on("disconnected",t=>{console.log("gamepad disconnected"),r.setData({gamepadConnected:!1}),c=null})}}),$$.control.registerControl("gamepad",{template:'<div>\n    <h2 bn-text="id"></h2>\n</div>\n\n<h3>Axes</h3>\n<div>\n    <table class="w3-table-all axeTable">\n        <thead>\n            <tr>\n                <th>Command</th>\n                <th>Hub</th>\n                <th>Port</th>\n            </tr>\n        </thead>\n        <tbody bn-each="axes" bn-bind="axes" bn-index="idx">\n            <tr>\n                <td bn-text="getAxeLabel"></td>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: hubs}" bn-val="$scope.$i.hub" class="hub"></div>\n                </td>                \n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: ports}" bn-val="$scope.$i.port" class="port"></div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<h3>Buttons</h3>\n<div class="commandTable">\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Command</th>\n                <th>Hub</th>\n                <th>Port</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="buttons" bn-bind="buttons" bn-index="idx">\n            <tr>\n                <td bn-text="getButtonLabel"></td>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: hubs}" bn-val="$scope.$i.hub" class="hub"></div>\n                </td>                 \n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: ports}" bn-val="$scope.$i.port" class="port"></div>\n                </td>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: actions}" bn-val="$scope.$i.action" class="action"></div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","breizbot.gamepad"],props:{mapping:null},init:function(t,e,n){const{mapping:o}=this.props;console.log({mapping:o});let a=[],i=[];const s=n.getGamepads()[0];if(console.log({info:s}),null!=o)a=o.axes,i=o.buttons;else{for(let t=0;t<s.axes.length;t++)a.push({port:"None",hub:"HUB1"});for(let t=0;t<s.buttons.length;t++)i.push({port:"None",action:"FWD",hub:"HUB1"})}const c="ABCD".split("");c.unshift("None");function r(t){const{value:e,id:n}=t;0!=e?b.find("tr").eq(n).find("td").eq(0).addClass("pressed"):b.find("tr").eq(n).find("td").eq(0).removeClass("pressed")}function d(t){h.find("tr").eq(t.id).find("td").eq(0).addClass("pressed")}function l(t){h.find("tr").eq(t.id).find("td").eq(0).removeClass("pressed")}n.on("axe",r),n.on("buttonDown",d),n.on("buttonUp",l),this.dispose=function(){console.log("dispose"),n.off("axe",r),n.off("buttonDown",d),n.off("buttonUp",l)};const u=$$.viewController(t,{data:{id:s.id,axes:a,buttons:i,ports:c,actions:["FWD","REV"],hubs:["HUB1","HUB2"],getButtonLabel:function(t){return`Button ${t.idx+1}`},getAxeLabel:function(t){return`Axe ${t.idx+1}`}},events:{}}),b=u.scope.axes,h=u.scope.buttons;function p(){const t={id:s.id,axes:[],buttons:[]};return b.find("tr").each(function(e){const n=$(this).find(".hub").getValue(),o=$(this).find(".port").getValue();t.axes.push({hub:n,port:o})}),h.find("tr").each(function(e){const n=$(this).find(".hub").getValue(),o=$(this).find(".port").getValue(),a=$(this).find(".action").getValue();t.buttons.push({hub:n,port:o,action:a})}),t}this.getButtons=function(){return{check:{icon:"fa fa-check",title:"Apply",onClick:function(){console.log(p()),e.popPage(p())}}}}}}),$$.control.registerControl("hubinfo",{template:'<div class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="mousedown.action: onMouseUp, mouseup.action:onMouseDown, click.portInfo: onInfo2">\n            <tr>\n                <td bn-text="$scope.$i.portName"></td>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-btn w3-green action" data-action="forward">FWD</button>\n                    <button class="w3-btn w3-green action" data-action="backward">BKWD</button>\n                    <button class="w3-btn w3-blue portInfo">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-btn: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-btn w3-blue">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub"],props:{},init:function(t,e,n){const o=this.props.hubDevice,a=o.getHubDevices();console.log("devices",a);const i=[],s=[];for(const[t,e]of Object.entries(a)){const o=parseInt(t);o<50?s.push({portName:n.PortMapNames[o],portId:o,deviceTypeName:e}):i.push({portId:o,deviceTypeName:e})}function c(t,n){e.pushPage("info",{title:n,props:{portId:t,hubDevice:o}})}function r(t){const e=t.closest("tr").index();return u.model.externalDevices[e].portId}function d(t){console.log("attach",t);const{portId:e,deviceTypeName:n}=t;a[e]=n}function l(t){console.log("detach",t),delete a[t.portId]}o.on("attach",d),o.on("detach",l),this.dispose=function(){console.log("hubInfo dispose"),o.off("attach",d),o.off("detach",l)};const u=$$.viewController(t,{data:{internalDevices:i,externalDevices:s},events:{onMouseUp:function(){const t=$(this).data("action"),e=r($(this));switch(t){case"forward":o.createMotor(e).setPower(100);break;case"backward":o.createMotor(e).setPower(-100)}},onMouseDown:function(){const t=r($(this));o.createMotor(t).setPower(0)},onInfo:function(){const t=$(this).closest("tr").index(),{portId:e,deviceTypeName:n}=u.model.internalDevices[t];c(e,n)},onInfo2:function(){const t=$(this).closest("tr").index(),{portId:e,deviceTypeName:n}=u.model.externalDevices[t];c(e,n)}}})}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>MODE</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>PCT</th>\n                <th>SI</th>\n                <th>VALUE FORMAT</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n                <td>\n                    dataType: <span bn-text="$scope.$i.VALUE_FORMAT.dataType"></span><br>\n                    numValues: <span bn-text="$scope.$i.VALUE_FORMAT.numValues"></span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(t,e,n){const{portId:o}=this.props,a=this.props.hubDevice,i=$$.viewController(t,{data:{modes:[],capabilities:""},events:{}});!async function(){const t=await a.getPortInformation(o);console.log("portInfo",t);const{modes:e,capabilities:n}=t;i.setData({modes:e,capabilities:n})}()}});