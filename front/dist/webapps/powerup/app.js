$$.service.registerService("hub",{init:function(){let t=null,e={};const n=new EventEmitter2,o={},a={},i={},r=function(...t){0},{getEnumName:s}=$$.util,c={DETACHED_IO:0,ATTACHED_IO:1,ATTACHED_VIRTUAL_IO:2},E=s(c),T={HUB_PROPERTIES:1,HUB_ACTIONS:2,HUB_ALERTS:3,HUB_ATTACHED_IO:4,GENERIC_ERROR_MESSAGES:5,HW_NETWORK_COMMANDS:8,FW_UPDATE_GO_INTO_BOOT_MODE:16,FW_UPDATE_LOCK_MEMORY:17,FW_UPDATE_LOCK_STATUS_REQUEST:18,FW_LOCK_STATUS:19,PORT_INFORMATION_REQUEST:33,PORT_MODE_INFORMATION_REQUEST:34,PORT_INPUT_FORMAT_SETUP_SINGLE:65,PORT_INPUT_FORMAT_SETUP_COMBINEDMODE:66,PORT_INFORMATION:67,PORT_MODE_INFORMATION:68,PORT_VALUE_SINGLE:69,PORT_VALUE_COMBINEDMODE:70,PORT_INPUT_FORMAT_SINGLE:71,PORT_INPUT_FORMAT_COMBINEDMODE:72,VIRTUAL_PORT_SETUP:97,PORT_OUTPUT_COMMAND:129,PORT_OUTPUT_COMMAND_FEEDBACK:130},l=(s(T),{UNKNOWN:0,SIMPLE_MEDIUM_LINEAR_MOTOR:1,TRAIN_MOTOR:2,LIGHT:8,VOLTAGE_SENSOR:20,CURRENT_SENSOR:21,PIEZO_BUZZER:22,HUB_LED:23,TILT_SENSOR:34,MOTION_SENSOR:35,COLOR_DISTANCE_SENSOR:37,MEDIUM_LINEAR_MOTOR:38,MOVE_HUB_MEDIUM_LINEAR_MOTOR:39,MOVE_HUB_TILT_SENSOR:40,DUPLO_TRAIN_BASE_MOTOR:41,DUPLO_TRAIN_BASE_SPEAKER:42,DUPLO_TRAIN_BASE_COLOR_SENSOR:43,DUPLO_TRAIN_BASE_SPEEDOMETER:44,TECHNIC_LARGE_LINEAR_MOTOR:46,TECHNIC_XLARGE_LINEAR_MOTOR:47,TECHNIC_MEDIUM_ANGULAR_MOTOR:48,TECHNIC_LARGE_ANGULAR_MOTOR:49,TECHNIC_MEDIUM_HUB_GEST_SENSOR:54,REMOTE_CONTROL_BUTTON:55,REMOTE_CONTROL_RSSI:56,TECHNIC_MEDIUM_HUB_ACCELEROMETER:57,TECHNIC_MEDIUM_HUB_GYRO_SENSOR:58,TECHNIC_MEDIUM_HUB_TILT_SENSOR:59,TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR:60,TECHNIC_COLOR_SENSOR:61,TECHNIC_DISTANCE_SENSOR:62,TECHNIC_FORCE_SENSOR:63,TECHNIC_3X3_COLOR_LIGHT_MATRIX:64,TECHNIC_SMALL_ANGULAR_MOTOR:65,MARIO_ACCELEROMETER:71,MARIO_BARCODE_SENSOR:73,MARIO_PANTS_SENSOR:74,TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY:75,TECHNIC_LARGE_ANGULAR_MOTOR_GREY:76}),d=s(l),_=s({ACK:1,MACK:2,BUFFER_OVERFLOW:3,TIMEOUT:4,COMMAND_NOT_RECOGNIZED:5,INVALID_USE:6,OVERCURRENT:7,INTERNAL_ERROR:8}),O={ADVERTISING_NAME:1,BUTTON_STATE:2,FW_VERSION:3,HW_VERSION:4,RSSI:5,BATTERY_VOLTAGE:6,BATTERY_TYPE:7,MANUFACTURER_NAME:8,RADIO_FIRMWARE_VERSION:9,LWP_PROTOCOL_VERSION:10,SYSTEM_TYPE_ID:11,HW_NETWORK_ID:12,PRIMARY_MAC_ADDRESS:13,SECONDARY_MAC_ADDRESS:14,HW_NETWORK_FAMILY:15},R=s(O),u={NAME:0,RAW:1,PCT:2,SI:3,SYMBOL:4,MAPPING:5,USED_INTERNALLY:6,MOTOR_BIAS:7,CAPABILITY_BITS:8,VALUE_FORMAT:128},A=s(u),I={A:0,B:1,C:2,D:3,HUB_LED:50,CURRENT_SENSOR:59,VOLTAGE_SENSOR:60,ACCELEROMETER:97,GYRO_SENSOR:98,TILT_SENSOR:99},p={POWER:0,SPEED:1,ROTATION:2,ABSOLUTE:3,COLOR:0,RGB:1},N={FLOAT:0,HOLD:126,BRAKE:127},b=s(I),M={};M[T.HUB_ATTACHED_IO]=function(t){const o=t.getUint8(3),a=t.getUint8(4),i=a?t.getUint16(5,!0):0,s=d[i]||"Unknown",T=E[a];if(r("handlePortMsg",{portId:o,eventName:T,deviceTypeName:s}),a==c.ATTACHED_IO)e[o]=i,n.emit("attach",{portId:o,deviceTypeName:s});else if(a==c.DETACHED_IO)delete e[o],n.emit("detach",{portId:o});else if(a==c.ATTACHED_VIRTUAL_IO){const e=b[t.getUint8(7)],a=b[t.getUint8(8)];b[o]=`${e}_${a}`,r({portIdA:e,portIdB:a}),n.emit("attach",{portId:o,deviceTypeName:"Virtual Port"})}},M[T.GENERIC_ERROR_MESSAGES]=function(t){const e=t.getUint8(3),o=t.getUint8(4);r({cmdType:e,errorCode:_[o]}),n.emit("error",{cmdType:e,errorCode:_[o]})},M[T.HUB_PROPERTIES]=function(t){const e=t.getUint8(3);if(r({property:R[e]}),e==O.BATTERY_VOLTAGE){const e=t.getUint8(5);r({batteryLevel:e}),n.emit("batteryLevel",{batteryLevel:e})}else if(e==O.BUTTON_STATE){const e=t.getUint8(5);r({buttonState:e}),n.emit("buttonState",{buttonState:e})}},M[T.PORT_OUTPUT_COMMAND_FEEDBACK]=function(t){for(let e=3;e<t.byteLength;e+=2){const n=t.getUint8(e),o=t.getUint8(e+1);if(r({portId:n,feedback:o}),10==o||44==o){const{cbk:t}=i[n].shift();"function"==typeof t&&(r("call cbk"),t());const e=i[n][0];e&&(r("envoie cmd mise en attente"),f(e.buffer))}}},M[T.PORT_INFORMATION]=function(t){const e=t.getUint8(3);let n=t.getUint8(5);const a=t.getUint8(6),i=t.getUint16(7,!0),s=t.getUint16(9,!0);r(`Port ${e}, capabilities ${n}, total modes ${a}, \n                input modes ${i}, output modes ${s}`);const c="output,input,logical combinable, logical synchronisable".split(",");let E=[];for(let t=0;t<4;t++)n>>t&1&&E.push(c[t]);const T={portId:e,capabilities:E.join(", "),count:a,input:i,output:s},l=o[e];"function"==typeof l&&l(T)},M[T.PORT_MODE_INFORMATION]=function(t){const e=t.getUint8(3),n=t.getUint8(4),a=t.getUint8(5),i={portId:e,mode:n,type:A[a]};switch(a){case u.NAME:i.name=U(t.buffer.slice(6,t.byteLength));break;case u.RAW:case u.PCT:case u.SI:i.min=t.getFloat32(6,!0),i.max=t.getFloat32(10,!0);break;case u.SYMBOL:i.symbol=U(t.buffer.slice(6,t.byteLength));break;case u.VALUE_FORMAT:i.numValues=t.getUint8(6),i.dataType=["8bit","16bit","32bit","float"][t.getUint8(7)],i.totalFigures=t.getUint8(8),i.decimals=t.getUint8(9)}r("portModeInformation",i);const s=o[e];"function"==typeof s&&(s(i),delete o[e])},M[T.PORT_VALUE_SINGLE]=function(t){const n=t.getUint8(3),o=e[n],a=S[o];"function"==typeof a&&a(t)};const S={};function m(t){const e=t.getUint8(3);if(null!=a[e]){const{mode:n,cbk:o}=a[e];let i;switch(n){case p.ABSOLUTE:i=t.getInt16(4,!0);break;case p.ROTATION:i=t.getInt32(4,!0);break;case p.SPEED:i=t.getInt8(4)}"function"==typeof o&&o({mode:n,value:i,portId:e})}}function U(t){const e=new Uint8Array(t);let n="";for(let t=0;t<e.byteLength&&0!=e[t];t++)n+=String.fromCharCode(e[t]);return n}function C(t,...e){const n=e.flat(2),o=n.length+3,a=new ArrayBuffer(o),i=new Uint8Array(a);return i[0]=o,i[1]=0,i[2]=t,i.set(n,3),a}function f(e){return t.writeValueWithoutResponse(e)}function P(t,...e){return f(C(t,e))}function w(t,e,n=null){return a[t]={mode:e,cbk:n},P(T.PORT_INPUT_FORMAT_SETUP_SINGLE,t,e,1,0,0,0,1)}function D(t,e,n){return new Promise(async a=>{await P(T.PORT_MODE_INFORMATION_REQUEST,t,e,n),o[t]=a})}async function L(t,...e){return r("writePortCommand",{portId:t}),new Promise(async n=>{const o=C(T.PORT_OUTPUT_COMMAND,t,17,e);null==i[t]&&(i[t]=[]),0==i[t].length?(i[t].push({buffer:o,cbk:n}),await f(o)):(r("Cmd mise en attente"),i[t].push({buffer:o,cbk:n}))})}S[l.TECHNIC_LARGE_LINEAR_MOTOR]=m,S[l.TECHNIC_LARGE_ANGULAR_MOTOR_GREY]=m;const g=100;function h(t){const e=new Uint8Array(4);return new DataView(e.buffer).setInt32(0,t,!0),Array.from(e)}function v(t,e,...n){return L(t,81,e,n)}function y(t){!function(t){t.byteLength,t.getUint8(0);const e=t.getUint8(2),n=M[e];"function"==typeof n&&n(t)}(t.target.value)}function B(){r("onGattServerDisconnected"),n.emit("disconnected")}return{connect:async function(){r("connect"),e={};const n=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:["00001623-1212-efde-1623-785feabcd123"]});n.addEventListener("gattserverdisconnected",B);const o=await n.gatt.connect();r("Connected");const a=await o.getPrimaryService("00001623-1212-efde-1623-785feabcd123");(t=await a.getCharacteristic("00001624-1212-efde-1623-785feabcd123")).addEventListener("characteristicvaluechanged",y),t.startNotifications(),await P(T.HUB_PROPERTIES,O.BATTERY_TYPE,5),await P(T.HUB_PROPERTIES,O.BUTTON_STATE,2)},shutdown:function(){return P(T.HUB_ACTIONS,1)},getDeviceType:function(t){return d[e[t]]},subscribe:w,waitTestValue:async function(t,e,n){return new Promise(async o=>{await w(t,e,e=>{r("waitTestValue",e),n(e.value)&&(delete a[t],o())})})},createVirtualPort:function(t,e){return P(T.VIRTUAL_PORT_SETUP,1,t,e)},getPortInformation:async function(t){const e=await function(t){return new Promise(async e=>{await P(T.PORT_INFORMATION_REQUEST,t,1),o[t]=e})}(t),{capabilities:n,count:a,output:i,input:r}=e,s=Math.max(r,i),c=[];for(let e=0;e<a;e++){const n={};if(s>>e){let o;o=await D(t,e,u.NAME),n.name=o.name,n[(o=await D(t,e,u.RAW)).type]={min:o.min,max:o.max},n[(o=await D(t,e,u.PCT)).type]={min:o.min,max:o.max},n[(o=await D(t,e,u.SI)).type]={min:o.min,max:o.max},o=await D(t,e,u.SYMBOL),n.unit=o.symbol,o=await D(t,e,u.VALUE_FORMAT);const{numValues:a,dataType:i,totalFigures:r,decimals:s}=o;n[o.type]={numValues:a,dataType:i,totalFigures:r,decimals:s}}c.push(n)}return{modes:c,capabilities:n}},getPortIdFromName:function(t){for(const[e,n]of Object.entries(b))if(n==t)return e;return-1},on:n.on.bind(n),motor:{setPower:function(t,e){return v(t,p.POWER,e)},resetZero:function(t){return v(t,p.ROTATION,0,0,0,0)},setSpeed:async function(t,e){return L(t,7,e,g,0)},setSpeedEx:function(t,e,n){return L(t,8,e,n,g,0)},setSpeedForTime:function(t,e,n,o=N.BRAKE){return L(t,9,function(t){const e=new Uint8Array(2);return new DataView(e.buffer).setInt16(0,t,!0),Array.from(e)}(n),e,g,o)},rotateDegrees:function(t,e,n,o=N.BRAKE){return L(t,11,h(e),n,g,o)},gotoAngle:function(t,e,n,o=N.BRAKE){return L(t,13,h(e),n,g,o)}},led:{setColor:async function(t){return await w(I.HUB_LED,p.COLOR),v(I.HUB_LED,p.COLOR,t)},setRGBColor:async function(t,e,n){return await w(I.HUB_LED,p.RGB),v(I.HUB_LED,p.RGB,t,e,n)}},Color:{BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,CYAN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:255},PortMap:I,PortMapNames:b,DeviceMode:p,BrakingStyle:N}}}),$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <div class="left">\n        <button class="w3-blue w3-button" \n            bn-event="click: onConnect"\n            bn-show="!connected"\n        >Connect to HUB</button>\n    \n        <button class="w3-blue w3-button" \n            bn-event="click: onShutdown"\n            bn-show="connected"\n        >Shutdown</button>\n    \n        <button class="w3-blue w3-button" \n            bn-event="click: onCalibrate"\n            bn-show="connected"\n        >Calibrate</button>\n\n        <button class="w3-blue w3-button" \n            bn-event="click: onChangeMode"\n            bn-show="connected"\n        >Change Mode</button>\n        \n        <button class="w3-blue w3-button" \n            bn-event="click: onSendMsg"\n            bn-show="connected"\n        >Send Msg</button>\n\n        <div bn-show="connected">\n            Max Speed:<span bn-text="fmtMaxSpeed"></span>\n        </div>\n    </div>\n    <div bn-show="connected">\n        Mode:\n        <span bn-text="mode"></span>\n    </div>\n</div>\n\n\n<div bn-show="connected" class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="mousedown.action: onMouseUp, mouseup.action:onMouseDown, click.portInfo: onInfo2">\n            <tr>\n                <td bn-text="$scope.$i.portName"></td>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-button w3-green action" data-action="forward">FWD</button>\n                    <button class="w3-button w3-green action" data-action="backward">BKWD</button>\n                    <button class="w3-button w3-blue portInfo">INFO</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-button: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-button w3-blue">INFO</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub","breizbot.gamepad"],props:{},init:function(t,e,n,o){let a=0,i=0,r=0,s=0;const c=$$.util.mapRange(-1,1,100,0);function E(){const{maxSpeed:t}=O.model;return n.motor.setSpeedEx(n.getPortIdFromName("C_D"),-a*t,-i*t)}function T(t){O.setData({maxSpeed:Math.ceil(c(t))}),0==a&&0==i||E()}function l(t){const e=t.closest("tr").index();return O.model.externalDevices[e].portId}function d(t,n){e.pushPage("info",{title:n,props:{portId:t}})}async function _(){const{mode:t}=O.model;await n.motor.setSpeedEx(n.getPortIdFromName("C_D"),0,0),a=0,i=0,"RUNNING"==t?(await n.led.setColor(n.Color.YELLOW),await n.motor.rotateDegrees(n.PortMap.A,180,50),await n.led.setColor(n.Color.GREEN),O.setData({mode:"MANIPULATOR"})):"MANIPULATOR"==t&&(await n.led.setColor(n.Color.YELLOW),await n.motor.rotateDegrees(n.PortMap.A,180,-50),await n.led.setColor(n.Color.BLUE),O.setData({mode:"RUNNING"}))}o.on("axe",t=>{const{id:e,value:n}=t;2==e&&T(n)}),o.on("buttonDown",async t=>{console.log("buttonDown",t);const{id:e}=t;if(0==e)await _();else if(5==e)await n.motor.setSpeed(n.PortMap.B,100);else if(6==e)await n.motor.setSpeed(n.PortMap.B,-100);else if("RUNNING"==O.model.mode){switch(e){case 2:a=1,i=1;break;case 1:a=-1,i=-1;break;case 3:a=1,i=-1;break;case 4:a=-1,i=1}0!=a&&0!=i&&await E()}else if("MANIPULATOR"==O.model.mode){switch(e){case 2:r=n.PortMap.C,s=-100;break;case 1:r=n.PortMap.C,s=100;break;case 3:r=n.PortMap.D,s=-100;break;case 4:r=n.PortMap.D,s=100}0!=s&&await n.motor.setSpeed(r,s)}}),o.on("buttonUp",async t=>{console.log("buttonUp",t);const{id:e}=t;5==e?await n.motor.setPower(n.PortMap.B,0):6==e?await n.motor.setPower(n.PortMap.B,0):0!=a||0!=i?(a=0,i=0,await n.motor.setSpeedEx(n.getPortIdFromName("C_D"),0,0)):[1,2,3,4].includes(e)&&0!=s&&(s=0,await n.motor.setPower(r,0))}),n.on("disconnected",()=>{O.setData({connected:!1})}),n.on("attach",t=>{const{portId:e,deviceTypeName:o}=t;e<50?(O.model.externalDevices.push({portId:e,portName:n.PortMapNames[t.portId],deviceTypeName:o}),O.model.externalDevices.sort((t,e)=>t.portId-e.portId)):O.model.internalDevices.push({deviceTypeName:o,portId:e}),O.update()}),n.on("detach",t=>{const e=O.model.externalDevices.findIndex(e=>e.portId==t.portId);console.log("idx",e),O.model.externalDevices.splice(e,1),O.update()}),n.on("error",t=>{console.log(t)}),n.on("batteryLevel",t=>{const{batteryLevel:e}=t;O.setData({batteryLevel:e})});const O=$$.viewController(t,{data:{connected:!1,internalDevices:[],externalDevices:[],batteryLevel:0,mode:"UNKNOWN",maxSpeed:100,fmtMaxSpeed:function(){return this.maxSpeed.toLocaleString().padStart(4)}},events:{onMouseUp:function(){const t=$(this).data("action"),e=l($(this));switch(t){case"off":n.motor.setPower(e,0);break;case"forward":n.motor.setPower(e,100);break;case"backward":n.motor.setPower(e,-100)}},onMouseDown:function(){const t=l($(this));n.motor.setPower(t,0)},onConnect:async function(){await n.connect(),O.setData({connected:!0}),await n.createVirtualPort(n.PortMap.C,n.PortMap.D)},onCalibrate:async function(){console.log("onCalibrate"),O.setData({mode:"CALIBRATING"}),console.log("step 1"),await n.led.setColor(n.Color.RED),await n.motor.setSpeed(n.PortMap.A,-20),await $$.util.wait(200),await n.motor.setSpeed(n.PortMap.A,20),await n.waitTestValue(n.PortMap.A,n.DeviceMode.SPEED,t=>t>5),console.log("step 2"),await n.waitTestValue(n.PortMap.A,n.DeviceMode.SPEED,t=>t<6),console.log("step 3"),await n.motor.setPower(n.PortMap.A,0),await $$.util.wait(300),await n.motor.rotateDegrees(n.PortMap.A,-220,-20),await n.motor.resetZero(n.PortMap.A),await n.led.setColor(n.Color.BLUE),O.setData({mode:"RUNNING"})},onChangeMode:_,onSendMsg:async function(){console.log("onSendMsg"),await n.led.setColor(n.Color.RED),console.log("Finished"),await n.motor.resetZero(n.PortMap.B),console.log("Finished"),await n.motor.rotateDegrees(n.PortMap.B,720,100),console.log("Finished")},onShutdown:async function(){await n.shutdown()},onInfo:function(){const t=$(this).closest("tr").index(),{portId:e,deviceTypeName:n}=O.model.internalDevices[t];d(e,n)},onInfo2:function(){const t=$(this).closest("tr").index(),{portId:e,deviceTypeName:n}=O.model.externalDevices[t];d(e,n)}}});o.on("connected",t=>{console.log("gamepad connnected",t),o.checkGamePadStatus(),null!=t.axes[2]&&T(t.axes[2])})}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>NAME</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>PCT</th>\n                <th>SI</th>\n                <th>VALUE FORMAT</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n                <td>\n                    dataType: <span bn-text="$scope.$i.VALUE_FORMAT.dataType"></span><br>\n                    numValues: <span bn-text="$scope.$i.VALUE_FORMAT.numValues"></span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(t,e,n){const{portId:o}=this.props,a=$$.viewController(t,{data:{modes:[],capabilities:""},events:{}});!async function(){const t=await n.getPortInformation(o);console.log("portInfo",t);const{modes:e,capabilities:i}=t;a.setData({modes:e,capabilities:i})}()}});