$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <div class="left">\n        \n\n\n    </div>\n\n    <div></div>\n</div>\n\n<div class="toolbar">\n\n    <div class="left">\n        <button bn-event="click: onConnect">Connect to HUB</button>\n        \n        <button bn-event="click: onCode">Code</button>\n\n\n    </div>\n</div>\n\n\n<div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Hub</th>\n                <th>Actions</th>\n                <th>Battery Level</th>\n                <th>Address</th>\n            </tr>\n        </thead>\n        <tbody bn-each="hubDevices" bn-event="click.btnShutdown: onShutDown, click.btnInfo: onInfo, comboboxchange.combo: onHubChange">\n            <tr>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: hubs}" bn-val="$scope.$i.hubId" class="combo"></div>\n                </td>\n                <td>\n                    <button class="btnShutdown">Shutdown</button>\n                    <button class="btnInfo">Info</button>\n                </td>\n                <td bn-text="$scope.$i.batteryLevel"></td>\n                <td bn-text="$scope.$i.address"></td>\n            </tr>\n        </tbody>\n    </table>\n\n</div>',deps:["breizbot.pager","hub","breizbot.blocklyinterpretor"],props:{},init:async function(e,t,n,o){Blockly.Blocks.create_tacho_motor={init:function(){this.appendDummyInput().appendField("TachoMotor").appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("PORT").appendField(new Blockly.FieldDropdown([["A","A"],["B","B"],["C","C"],["D","D"]]),"PORT"),this.setOutput(!0,"Motor"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.create_motor={init:function(){this.appendDummyInput().appendField("Motor").appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("PORT").appendField(new Blockly.FieldDropdown([["A","A"],["B","B"],["C","C"],["D","D"]]),"PORT"),this.setOutput(!0,"Motor"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.create_pair_motor={init:function(){this.appendDummyInput().appendField("PairMotor").appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("PORT1").appendField(new Blockly.FieldDropdown([["A","A"],["B","B"],["C","C"],["D","D"]]),"PORT1").appendField("PORT2").appendField(new Blockly.FieldDropdown([["A","A"],["B","B"],["C","C"],["D","D"]]),"PORT2"),this.setOutput(!0,"Motor"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.pair_motor_speed={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR"),this.appendValueInput("SPEED1").setCheck("Number").appendField("Speed1"),this.appendValueInput("SPEED2").setCheck("Number").appendField("Speed2"),this.setInputsInline(!0),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.hub_color={init:function(){this.appendDummyInput().appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("Color").appendField(new Blockly.FieldDropdown([["BLACK","BLACK"],["PURPLE","PURPLE"],["BLUE","BLUE"],["LIGHT_BLUE","LIGHT_BLUE"],["CYAN","CYAN"],["GREEN","GREEN"],["PINK","PINK"],["YELLOW","YELLOW"],["ORANGE","ORANGE"],["RED","RED"],["WHITE","WHITE"]]),"COLOR"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.hub_get_tilt={init:function(){this.appendDummyInput().appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("Tilt").appendField(new Blockly.FieldDropdown([["Pitch","pitch"],["Roll","roll"],["Yaw","yaw"]]),"TYPE"),this.setOutput(!0,"Number"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.hub_get_voltage={init:function(){this.appendDummyInput().appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("Voltage (mV)"),this.setOutput(!0,"Number"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_speed_time={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR"),this.appendValueInput("SPEED").setCheck("Number").appendField("Speed"),this.appendValueInput("TIME").setCheck("Number").appendField("Time (ms)"),this.appendDummyInput().appendField("Wait").appendField(new Blockly.FieldCheckbox("TRUE"),"WAITME"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_speed_degrees={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR"),this.appendValueInput("SPEED").setCheck("Number").appendField("Speed"),this.appendValueInput("DEGREES").setCheck("Number").appendField("Degrees"),this.appendDummyInput().appendField("Wait").appendField(new Blockly.FieldCheckbox("TRUE"),"WAIT"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_speed_position={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR"),this.appendValueInput("SPEED").setCheck("Number").appendField("Speed"),this.appendValueInput("ANGLE").setCheck("Number").appendField("Angle"),this.appendDummyInput().appendField("Wait").appendField(new Blockly.FieldCheckbox("TRUE"),"WAITME"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_reset_position={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR").appendField("reset position"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_get_speed={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR").appendField("Speed"),this.setOutput(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_get_position={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR").appendField("Position"),this.setOutput(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_get_absoluteposition={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR").appendField("Absolute Position"),this.setOutput(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.sleep={init:function(){this.appendValueInput("TIME").setCheck("Number").appendField("Sleep (ms)"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_speed={init:function(){this.appendValueInput("SPEED").setCheck("Number").appendField(new Blockly.FieldVariable("item"),"VAR").appendField("Speed"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_power={init:function(){this.appendValueInput("POWER").setCheck("Number").appendField(new Blockly.FieldVariable("item"),"VAR").appendField("Power"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},e.find("button").addClass("w3-btn w3-blue");const a={};let i=1,l=null;const s=$$.viewController(e,{data:{currentConfig:"",gamepadConnected:!1,hubDevices:[],hubs:["HUB1","HUB2"]},events:{onCode:function(){t.pushPage("code",{title:"Code",props:{hubDevices:Object.values(a),config:l},onBack:function(e){l=e}})},onHubChange:function(){const e=$(this).closest("tr").index(),t=$(this).getValue(),n=a[s.model.hubDevices[e].UUID];console.log("hubDevice",n),n.name=t,s.model.hubDevices[e].hubId=t},onShutDown:function(){const e=$(this).closest("tr").index(),t=s.model.hubDevices[e];a[t.UUID].shutdown()},onInfo:function(){const e=$(this).closest("tr").index(),n=s.model.hubDevices[e],o=a[n.UUID];console.log("hubDevice",o),t.pushPage("hubinfo",{title:n.hubId,props:{hubDevice:o}})},onConnect:async function(){const e=await n.connect(),t=i++;a[t]=e,e.on("error",e=>{console.log(e)});const o=`HUB${s.model.hubDevices.length+1}`;e.name=o,s.model.hubDevices.push({UUID:t,hubId:o,batteryLevel:0,address:"Unknown"}),s.update(),e.on("batteryLevel",e=>{s.model.hubDevices.find(e=>e.UUID==t).batteryLevel=e.batteryLevel,s.update()}),e.on("address",e=>{console.log("address",e),s.model.hubDevices.find(e=>e.UUID==t).address=e.address,s.update()}),await e.startNotification(),e.on("disconnected",()=>{console.log("disconnected");const e=s.model.hubDevices.findIndex(e=>e.UUID==t);s.model.hubDevices.splice(e,1),s.update(),delete a[t]})}}})}}),$$.control.registerControl("code",{template:'<div class="toolbar">\n\n    <div>\n        <button bn-event="click: onNewConfig" bn-icon="fa fa-file" title="Reset Config"></button>\n\n        <button bn-event="click: onConfig" bn-icon="fa fa-folder-open" title="Open Config"></button>\n    \n        <button bn-event="click: onSaveConfig" bn-icon="fa fa-save" title="Save current config"></button>\n    \n        <button bn-event="click: onRun" >Run</button>\n    \n        <button bn-event="click: onGamePad" bn-show="gamepadConnected">Gamepad</button>\n    </div>\n\n    <div>\n        <div bn-show="currentConfig">\n            <label>Current Config:</label>\n            <span bn-text="currentConfig"></span>\n        </div>\n    </div>\n\n\n\n</div>\n<div id="blocklyDiv"></div>\n<div class="logPanel" bn-html="getLogs"></div>\n\n<xml id="toolbox" style="display: none;">\n    <category name="Logic" categorystyle="logic_category">\n        <block type="controls_if"></block>\n        <block type="logic_compare"></block>\n        <block type="logic_operation"></block>\n        <block type="logic_negate"></block>\n        <block type="logic_boolean"></block>\n        <block type="logic_ternary"></block>\n    </category>\n    <category name="Loop" categorystyle="loop_category">\n        <block type="controls_repeat_ext">\n            <value name="TIMES">\n                <shadow type="math_number">\n                    <field name="NUM">10</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="controls_whileUntil"></block>\n        <block type="controls_for">\n            <value name="FROM">\n                <shadow type="math_number">\n                    <field name="NUM">1</field>\n                </shadow>\n            </value>\n            <value name="TO">\n                <shadow type="math_number">\n                    <field name="NUM">10</field>\n                </shadow>\n            </value>\n            <value name="BY">\n                <shadow type="math_number">\n                    <field name="NUM">1</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="controls_forEach"></block>\n        <block type="controls_flow_statements"></block>\n    </category>\n    <category name="Math" categorystyle="math_category">\n        <block type="math_number"></block>\n        <block type="math_arithmetic"></block>\n        <block type="math_single">\n            <field name="OP">ROOT</field>\n            <value name="NUM">\n                <shadow type="math_number">\n                    <field name="NUM">9</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="math_trig">\n            <field name="OP">SIN</field>\n            <value name="NUM">\n                <shadow type="math_number">\n                    <field name="NUM">45</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="math_constant">\n            <field name="CONSTANT">PI</field>\n        </block>\n        <block type="math_random_int">\n            <value name="FROM">\n                <shadow type="math_number">\n                    <field name="NUM">1</field>\n                </shadow>\n            </value>\n            <value name="TO">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="math_round">\n            <field name="OP">ROUND</field>\n            <value name="NUM">\n                <shadow type="math_number">\n                    <field name="NUM">3.1</field>\n                </shadow>\n            </value>\n        </block>\n    </category>\n    <category name="Text" categorystyle="text_category">\n        <block type="text"></block>\n        <block type="text_print"></block>\n        <block type="text_length">\n            <value name="VALUE">\n                <shadow type="text">\n                    <field name="TEXT">abc</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="text_changeCase">\n            <field name="CASE">UPPERCASE</field>\n            <value name="TEXT">\n                <shadow type="text">\n                    <field name="TEXT">abc</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="text_append">\n            <field name="VAR" id="MHveE$^#X7/c|*RA!r{I">item</field>\n            <value name="TEXT">\n                <shadow type="text">\n                    <field name="TEXT" />\n                </shadow>\n            </value>\n        </block>\n        <block type="text_join">\n            <mutation items="2" />\n        </block>\n        <block type="text_indexOf"></block>\n        <block type="text_charAt"></block>\n        <block type="text_getSubstring"></block>\n        <block type="text_prompt_ext">\n            <mutation type="TEXT" />\n            <field name="TYPE">TEXT</field>\n            <value name="TEXT">\n                <shadow type="text">\n                    <field name="TEXT">abc</field>\n                </shadow>\n            </value>\n        </block>\n    </category>\n    <category name="Lists" categorystyle="list_category">\n        <block type="lists_create_with">\n            <mutation items="0"></mutation>\n        </block>\n        <block type="lists_create_with"></block>\n        <block type="lists_repeat">\n            <value name="NUM">\n                <shadow type="math_number">\n                    <field name="NUM">5</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="lists_length"></block>\n        <block type="lists_isEmpty"></block>\n        <block type="lists_indexOf">\n            <value name="VALUE">\n                <block type="variables_get">\n                    <field name="VAR">list</field>\n                </block>\n            </value>\n        </block>\n        <block type="lists_getIndex">\n            <value name="VALUE">\n                <block type="variables_get">\n                    <field name="VAR">list</field>\n                </block>\n            </value>\n        </block>\n        <block type="lists_setIndex">\n            <value name="LIST">\n                <block type="variables_get">\n                    <field name="VAR">list</field>\n                </block>\n            </value>\n        </block>\n        <block type="lists_getSublist">\n            <value name="LIST">\n                <block type="variables_get">\n                    <field name="VAR">list</field>\n                </block>\n            </value>\n        </block>\n        <block type="lists_split">\n            <value name="DELIM">\n                <shadow type="text">\n                    <field name="TEXT">,</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="lists_sort"></block>\n        <block type="lists_reverse"></block>\n    </category>\n    <category name="Variables" custom="VARIABLE" categorystyle="variable_category"></category>\n    <category name="Functions" custom="PROCEDURE" categorystyle="procedure_category"></category>\n    <category name="Motor" colour="355">\n        <block type="create_motor"></block>\n        <block type="motor_power">\n            <value name="POWER">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n    </category>\n    <category name="TachoMotor" colour="355">\n        <block type="create_tacho_motor"></block>\n        <block type="motor_speed">\n            <value name="SPEED">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="motor_speed_time">\n            <value name="TIME">\n                <shadow type="math_number">\n                    <field name="NUM">1000</field>\n                </shadow>\n            </value>\n            <value name="SPEED">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="motor_speed_degrees">\n            <value name="DEGREES">\n                <shadow type="math_number">\n                    <field name="NUM">180</field>\n                </shadow>\n            </value>\n            <value name="SPEED">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="motor_speed_position">\n            <value name="ANGLE">\n                <shadow type="math_number">\n                    <field name="NUM">0</field>\n                </shadow>\n            </value>\n            <value name="SPEED">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="motor_reset_position"></block>\n        <block type="motor_get_speed"></block>\n        <block type="motor_get_position"></block>\n        <block type="motor_get_absoluteposition"></block>\n\n    </category>\n    <category name="PairMotor" colour="355">\n        <block type="create_pair_motor">\n            <FIELD name="PORT2">B</FIELD>\n        </block>\n        <block type="pair_motor_speed">\n            <value name="SPEED1">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n            <value name="SPEED2">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n\n\n    </category>\n    <category name="Hub" colour="355">\n        <block type="hub_color"></block>\n        <block type="hub_get_tilt"></block>\n        <block type="hub_get_voltage"></block>\n\n\n    </category>\n    <category name="System" colour="355">\n        <block type="sleep">\n            <value name="TIME">\n                <shadow type="math_number">\n                    <field name="NUM">1000</field>\n                </shadow>\n            </value>\n        </block>\n    </category>\n\n</xml>',deps:["breizbot.pager","breizbot.blocklyinterpretor","hub","breizbot.gamepad","breizbot.http"],props:{hubDevices:null,config:null},init:function(e,t,n,o,a,i){console.log("props",this.props);const l=this.props.hubDevices;e.find("button").addClass("w3-btn w3-blue");let{config:s}=this.props;async function c(e,t){try{await n.callFunction(e,t)}catch(e){"string"==typeof e&&$$.ui.showAlert({title:"Error",content:e})}}function d(e){if(s.gamepadMapping){const{action:t}=s.gamepadMapping.axes[e.id];"None"!=t&&c(t,e.value)}}function p(e){if(console.log("buttonDown",e.id),s.gamepadMapping){const{down:t}=s.gamepadMapping.buttons[e.id];"None"!=t&&c(t,1)}}function r(e){if(console.log("buttonDown",e.id),s.gamepadMapping){const{up:t,down:n}=s.gamepadMapping.buttons[e.id];"Zero"==t?"None"!=n&&c(n,0):"None"!=t&&c(t,1)}}null==s&&(s={code:null,gamepadId:"",mappings:{},name:""}),console.log("config",s),a.on("connected",e=>{console.log("gamepad connnected",e),s.gamepadId=e.id,s.gamepadMapping=s.mappings[e.id],console.log({gamepadMapping:s.gamepadMapping}),f.setData({gamepadConnected:!0}),a.checkGamePadStatus()}),a.on("disconnected",e=>{console.log("gamepad disconnected"),f.setData({gamepadConnected:!1}),s.gamepadMapping=null,s.gamepadId=""}),a.on("axe",d),a.on("buttonDown",p),a.on("buttonUp",r),this.dispose=function(){console.log("dispose"),a.off("axe",d),a.off("buttonDown",p),a.off("buttonUp",r)};Blockly.inject("blocklyDiv",{media:"../lib/blockly/media/",toolbox:document.getElementById("toolbox")});function u(e){const t=e.fields.HUB,n=l.find(e=>e.name==t);if(null==n)throw`Hub ${t} is not connected`;return n}function b(e){const t=e.fields.VAR.id,a=n.getVarValue(t);if("object"!=typeof a||!o.isTachoMotor(a)){throw`variable '${n.getVarName(t)}' is not of type TachoMotor`}return a}async function h(e,t,n){return u(e).getDevice(t).getValue(n)}function m(e){const t=Blockly.getMainWorkspace();Blockly.serialization.workspaces.load(e,t)}function g(){return Blockly.serialization.workspaces.save(Blockly.getMainWorkspace())}n.setLlogFunction(e=>{f.model.logs.push(e),f.update()}),n.addBlockType("create_pair_motor",async e=>{const t=e.fields.PORT1,n=e.fields.PORT2,a=u(e);return await a.getDblMotor(o.PortMap[t],o.PortMap[n])}),n.addBlockType("create_tacho_motor",async e=>{const t=e.fields.PORT,n=u(e).getDevice(o.PortMap[t]);if(!o.isTachoMotor(n))throw`Device connected to port '${t}' is not of a TachoMotor`;return n}),n.addBlockType("create_motor",async e=>{const t=e.fields.PORT,n=u(e).getDevice(o.PortMap[t]);if(!o.isMotor(n))throw`Device connected to port '${t}' is not of a Motor`;return n}),n.addBlockType("motor_power",async e=>{const t=await n.evalCode(e.inputs.POWER),a=function(e){const t=e.fields.VAR.id,a=n.getVarValue(t);if("object"!=typeof a||!o.isMotor(a))throw`variable '${n.getVarName(t)}' is not of type Motor`;return a}(e);console.log({power:t}),await a.setPower(t)}),n.addBlockType("motor_speed",async e=>{const t=await n.evalCode(e.inputs.SPEED),o=b(e);console.log({speed:t}),await o.setSpeed(t)}),n.addBlockType("pair_motor_speed",async e=>{const t=await n.evalCode(e.inputs.SPEED1),a=await n.evalCode(e.inputs.SPEED2),i=function(e){const t=e.fields.VAR.id,a=n.getVarValue(t);if(console.log("motor",a),"object"!=typeof a||!o.isDoubleMotor(a))throw`variable '${n.getVarName(t)}' is not of type PairMotor`;return a}(e);console.log({speed1:t,speed2:a,motor:i}),await i.setSpeed(t,a)}),n.addBlockType("motor_speed_time",async e=>{const t=await n.evalCode(e.inputs.SPEED),a=e.fields.WAIT,i=await n.evalCode(e.inputs.TIME),l=b(e);console.log({speed:t,time:i,waitFeedback:a}),await l.setSpeedForTime(t,i,a,o.BrakingStyle.FLOAT)}),n.addBlockType("motor_speed_degrees",async e=>{const t=b(e),a=await n.evalCode(e.inputs.SPEED),i=e.fields.WAIT,l=await n.evalCode(e.inputs.DEGREES);console.log({speed:a,degrees:l,waitFeedback:i}),await t.rotateDegrees(l,a,i,o.BrakingStyle.BRAKE)}),n.addBlockType("motor_speed_position",async e=>{const t=b(e),a=await n.evalCode(e.inputs.SPEED),i=e.fields.WAIT,l=await n.evalCode(e.inputs.ANGLE);console.log({speed:a,angle:l,waitFeedback:i}),await t.gotoAngle(l,a,i,o.BrakingStyle.FLOAT)}),n.addBlockType("motor_reset_position",async e=>{const t=b(e);await t.resetZero()}),n.addBlockType("motor_get_speed",async e=>{return b(e).getSpeed()}),n.addBlockType("motor_get_position",async e=>{return b(e).getPosition()}),n.addBlockType("motor_get_absoluteposition",async e=>{return b(e).getAbsolutePosition()}),n.addBlockType("hub_color",async e=>{const t=e.fields.COLOR,n=u(e).getDevice(o.PortMap.HUB_LED);await n.setColor(o.Color[t])}),n.addBlockType("hub_get_voltage",async e=>h(e,o.PortMap.VOLTAGE_SENSOR,0)),n.addBlockType("hub_get_tilt",async e=>{const t=e.fields.TYPE;return(await h(e,o.PortMap.TILT_SENSOR,o.DeviceMode.TILT_POS))[t]}),n.addBlockType("sleep",async e=>{const t=await n.evalCode(e.inputs.TIME);console.log({time:t}),await $$.util.wait(t)}),null!=s.code&&m(s.code),this.onBack=function(){return s.code=g(),s};const f=$$.viewController(e,{data:{currentConfig:s.name,gamepadConnected:""!=s.gamepadId,logs:[],getLogs:function(){return this.logs.join("<br>")}},events:{onGamePad:function(){const e=g();console.log("config",s),t.pushPage("gamepad",{title:"Gamepad",props:{mapping:s.gamepadMapping,actions:null!=e?n.getFunctionNames(e):[]},onReturn:async e=>{console.log("onReturn",e),s.gamepadMapping=e,s.mappings[e.id]=e}})},onNewConfig:function(){s.mapping={},s.gamepadMapping=null,Blockly.getMainWorkspace().clear(),f.setData({currentConfig:""})},onSaveConfig:async function(){if(console.log("oncodeSaveConfig",s),""==f.model.currentConfig){const e=await $$.ui.showPrompt({title:"Save Config",label:"Config Name:"});e&&(await i.post("/add",{name:e,code:g(),mappings:s.mappings}),f.setData({currentConfig:e}))}else await i.post("/update",{code:g(),mappings:s.mappings}),$.notify(`Config '${s.name}' updated`,"success")},onConfig:function(){t.pushPage("configCtrl",{title:"Configurations",props:{currentConfig:f.model.currentConfig},onReturn:function(e){console.log("newConfig",e),s.code=e.code,s.name=e.name,s.mappings=e.mappings,f.setData({currentConfig:e.name}),s.gamepadMapping=s.mappings[s.gamepadId],m(s.code)}})},onRun:async function(){console.log("onRun");const e=g();f.setData({logs:[]});try{await n.startCode(e)}catch(e){"string"==typeof e&&$$.ui.showAlert({title:"Error",content:e})}}}})}}),$$.control.registerControl("configCtrl",{template:'<div bn-show="!hasConfigs" class="message">\n    No configurations defined\n</div>\n\n<div class="scrollPanel" bn-show="hasConfigs">\n    <div bn-each="configs" class="items" bn-event="click.item: onItemClick, contextmenuchange.item:onItemContextMenu">\n        <div class="w3-card-2 item" bn-control="brainjs.contextmenu" bn-data="{\n                    items: {\n                        delete: {name: \'Remove\', icon: \'fas fa-trash-alt\'}\n                    }\n                }">\n            <div>\n                <strong bn-text="$scope.$i.name"></strong>\n            </div>\n        </div>\n    </div>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{currentConfig:""},init:function(e,t,n){const{currentConfig:o}=this.props,a=$$.viewController(e,{data:{configs:[],hasConfigs:function(){return this.configs.length>0}},events:{onItemContextMenu:async function(e,t){const l=$(this).closest(".item").index(),s=a.model.configs[l];"delete"==t.cmd&&(s.name==o?$$.ui.showAlert({content:"Cannot delete active config",title:"Warning"}):(await n.post("/delete",s),i()))},onItemClick:function(e){const n=$(this).closest(".item").index();console.log("onItemClick",n);const o=a.model.configs[n];t.popPage(o)}}});async function i(){const e=await n.get("/");console.log({configs:e}),a.setData({configs:e})}i()}}),$$.control.registerControl("gamepad",{template:'<div>\n    <h2 bn-text="id"></h2>\n</div>\n\n<h3>Axes</h3>\n<div>\n    <table class="w3-table-all axeTable">\n        <thead>\n            <tr>\n                <th>Axe</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="axes" bn-bind="axes" bn-index="idx">\n            <tr>\n                <td bn-text="getAxeLabel"></td>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: actions}" bn-val="$scope.$i.action" class="item"></div>\n                </td>                \n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<h3>Buttons</h3>\n<div class="commandTable">\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Button</th>\n                <th>Down</th>\n                <th>Up</th>\n            </tr>\n        </thead>\n        <tbody bn-each="buttons" bn-bind="buttons" bn-index="idx" bn-event="click.item: onButtonClick">\n            <tr>\n                <td bn-text="getButtonLabel"></td>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: actions}" bn-val="$scope.$i.down" class="down"></div>\n                    </div>\n                </td>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: actions}" bn-val="$scope.$i.up" class="up"></div>\n                    </div>\n                </td>\n\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","breizbot.gamepad"],props:{mapping:null,actions:null},init:function(e,t,n){const{mapping:o,actions:a}=this.props;a.unshift("Zero"),a.unshift("None"),console.log(this.props);let i=[],l=[];const s=n.getGamepads()[0];if(console.log({info:s}),null!=o&&(i=o.axes,l=o.buttons),0==i.length)for(let e=0;e<s.axes.length;e++)i.push({action:"None"});if(0==l.length)for(let e=0;e<s.buttons.length;e++)l.push({up:"None",down:"None"});function c(e){const{value:t,id:n}=e;0!=t?u.find("tr").eq(n).find("td").eq(0).addClass("pressed"):u.find("tr").eq(n).find("td").eq(0).removeClass("pressed")}function d(e){b.find("tr").eq(e.id).find("td").eq(0).addClass("pressed")}function p(e){b.find("tr").eq(e.id).find("td").eq(0).removeClass("pressed")}n.on("axe",c),n.on("buttonDown",d),n.on("buttonUp",p),this.dispose=function(){console.log("dispose"),n.off("axe",c),n.off("buttonDown",d),n.off("buttonUp",p)};const r=$$.viewController(e,{data:{id:s.id,axes:i,buttons:l,actions:a,getButtonLabel:function(e){return`Button ${e.idx+1}`},getAxeLabel:function(e){return`Axe ${e.idx+1}`}},events:{}}),u=r.scope.axes,b=r.scope.buttons;this.getButtons=function(){return{check:{icon:"fa fa-check",title:"Apply",onClick:function(){t.popPage(function(){const e={id:s.id,axes:[],buttons:[]};return u.find("tr").each(function(t){const n=$(this).find(".item").getValue();e.axes.push({action:n})}),b.find("tr").each(function(t){const n=$(this).find(".up").getValue(),o=$(this).find(".down").getValue();e.buttons.push({up:n,down:o})}),console.log({ret:e}),e}())}}}}}}),$$.control.registerControl("hubinfo",{template:'<div class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="\n            mousedown.motorMouseAction: onMouseUp, \n            mouseup.motorMouseAction:onMouseDown, \n            click.motorAction:onMotorAction, \n            click.ledAction: onLedAction,\n            click.portInfo: onInfo2, \n            click.calibrate:onCalibrate">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.type"></td>\n                <td>\n                    <span bn-if="isMotor" class="spanButtons">\n                        <button class="w3-btn w3-green motorMouseAction" data-action="forward">FWD</button>\n                        <button class="w3-btn w3-green motorMouseAction" data-action="backward">BKWD</button>\n                    </span>\n                    <span bn-if="isTachoMotor" class="spanButtons">\n                        <button class="w3-btn w3-green motorAction" data-action="reset">RESET</button>\n                        <button class="w3-btn w3-green motorAction" data-action="gozero">GO ZERO</button>\n                    </span>\n                    <span bn-if="isLed" class="spanButtons">\n                        <button class="w3-btn w3-green ledAction" data-action="on">ON</button>\n                        <button class="w3-btn w3-green ledAction" data-action="off">OFF</button>\n                    </span>\n\n                    <button class="w3-btn w3-blue portInfo">MODE</button>\n                </td>\n\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port ID</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-btn: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.portId"></td>\n                <td bn-text="$scope.$i.type"></td>\n                <td>\n                    <button class="w3-btn w3-blue">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub"],props:{hubDevice:null},init:function(e,t,n){const o=this.props.hubDevice;function a(e,n){t.pushPage("info",{title:n,props:{portId:e,hubDevice:o}})}function i(e){const t=e.closest("tr").index();return c.model.externalDevices[t].portId}async function l(e){console.log("attach",e);const{portId:t,name:n,type:o}=e,a={portId:t,name:n,type:o};c.model.externalDevices.push(a),c.update()}function s(e){console.log("detach",e);const t=c.model.externalDevices.findIndex(t=>t.portId==e.portId);c.model.externalDevices.splice(t,1),c.update()}o.on("attach",l),o.on("detach",s),this.dispose=async function(){console.log("hubInfo dispose"),o.off("attach",l),o.off("detach",s)};const c=$$.viewController(e,{data:{internalDevices:[],externalDevices:[],isMotor:function(e){return n.isMotor(o.getDevice(e.$i.portId))},isLed:function(e){return n.isLed(o.getDevice(e.$i.portId))},isTachoMotor:function(e){return n.isTachoMotor(o.getDevice(e.$i.portId))}},events:{onMotorAction:async function(){const e=i($(this)),t=$(this).data("action");console.log("onMotorAction",e,t);const n=await o.getTachoMotor(e);switch(t){case"reset":n.resetZero();break;case"gozero":n.gotoAngle(0,50,!1)}},onLedAction:async function(){const e=i($(this)),t=$(this).data("action");console.log("onLedAction",e,t),(await o.getLed(e)).setBrightness("on"==t?100:0)},onCalibrate:async function(){const e=i($(this));console.log("onCalibrate",e);const t=await o.getMotor(e);await t.calibrate()},onMouseUp:async function(){const e=$(this).data("action"),t=i($(this)),n=await o.getMotor(t);switch(e){case"forward":n.setPower(100);break;case"backward":n.setPower(-100)}},onMouseDown:async function(){const e=i($(this));(await o.getMotor(e)).setPower(0)},onInfo:function(){const e=$(this).closest("tr").index(),{portId:t,deviceTypeName:n}=c.model.internalDevices[e];a(t,n)},onInfo2:function(){const e=$(this).closest("tr").index(),{portId:t,deviceTypeName:n}=c.model.externalDevices[e];a(t,n)}}});!async function(){const e=o.getHubDevices();console.log("devices",e);const t=[],n=[];for(const o of e){const{portId:e,type:a,name:i}=o;if(e<50){const t={name:i,portId:e,type:a};n.push(t)}else t.push({portId:e,type:a})}c.setData({internalDevices:t,externalDevices:n})}()}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>MODE</th>\n                <th>CAPABILITIES</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>SI</th>\n                <th>VALUE FORMAT</th>\n                <th>Value</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes" bn-event="click.btnGet: onBtnGet">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="getCapabilites"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n                <td>\n                    dataType: <span bn-text="$scope.$i.VALUE_FORMAT.dataType"></span><br>\n                    numValues: <span bn-text="$scope.$i.VALUE_FORMAT.numValues"></span>\n                </td>\n                <td>\n                    <div bn-if="isInput">\n                        <button class="w3-btn w3-green btnGet">Get</button>\n                        <span></span>\n                    </div>\n\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(e,t,n){const{portId:o}=this.props,a=this.props.hubDevice,i=$$.viewController(e,{data:{modes:[],capabilities:"",isInput:function(e){return 0!=(1&e.$i.mode)},getCapabilites:function(e){return 2==e.$i.mode?"OUT":1==e.$i.mode?"IN":3==e.$i.mode?"IN/OUT":void 0}},events:{onBtnGet:async function(e){const t=$(this).closest("tr").index();console.log("onBtnGet",t);const n=a.getDevice(o),i=await n.getValue(t);console.log("values",i),$(this).closest("td").find("span").text(JSON.stringify(i,null,4))}}});!async function(){const e=await a.getPortInformation(o);console.log("portInfo",e);const{modes:t,capabilities:n}=e;i.setData({modes:t,capabilities:n})}()}});