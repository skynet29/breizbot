$$.service.registerService("hub",{init:function(){let t=null,n={};const e=new EventEmitter2,o={},a={},i=function(...t){console.log.apply(console,t)};function c(t){const n={};return Object.entries(t).forEach(([t,e])=>{n[e]=t}),n}const s={DETACHED_IO:0,ATTACHED_IO:1,ATTACHED_VIRTUAL_IO:2},E=c(s),r={HUB_PROPERTIES:1,HUB_ACTIONS:2,HUB_ALERTS:3,HUB_ATTACHED_IO:4,GENERIC_ERROR_MESSAGES:5,HW_NETWORK_COMMANDS:8,FW_UPDATE_GO_INTO_BOOT_MODE:16,FW_UPDATE_LOCK_MEMORY:17,FW_UPDATE_LOCK_STATUS_REQUEST:18,FW_LOCK_STATUS:19,PORT_INFORMATION_REQUEST:33,PORT_MODE_INFORMATION_REQUEST:34,PORT_INPUT_FORMAT_SETUP_SINGLE:65,PORT_INPUT_FORMAT_SETUP_COMBINEDMODE:66,PORT_INFORMATION:67,PORT_MODE_INFORMATION:68,PORT_VALUE_SINGLE:69,PORT_VALUE_COMBINEDMODE:70,PORT_INPUT_FORMAT_SINGLE:71,PORT_INPUT_FORMAT_COMBINEDMODE:72,VIRTUAL_PORT_SETUP:97,PORT_OUTPUT_COMMAND:129,PORT_OUTPUT_COMMAND_FEEDBACK:130},_=c(r),T={UNKNOWN:0,SIMPLE_MEDIUM_LINEAR_MOTOR:1,TRAIN_MOTOR:2,LIGHT:8,VOLTAGE_SENSOR:20,CURRENT_SENSOR:21,PIEZO_BUZZER:22,HUB_LED:23,TILT_SENSOR:34,MOTION_SENSOR:35,COLOR_DISTANCE_SENSOR:37,MEDIUM_LINEAR_MOTOR:38,MOVE_HUB_MEDIUM_LINEAR_MOTOR:39,MOVE_HUB_TILT_SENSOR:40,DUPLO_TRAIN_BASE_MOTOR:41,DUPLO_TRAIN_BASE_SPEAKER:42,DUPLO_TRAIN_BASE_COLOR_SENSOR:43,DUPLO_TRAIN_BASE_SPEEDOMETER:44,TECHNIC_LARGE_LINEAR_MOTOR:46,TECHNIC_XLARGE_LINEAR_MOTOR:47,TECHNIC_MEDIUM_ANGULAR_MOTOR:48,TECHNIC_LARGE_ANGULAR_MOTOR:49,TECHNIC_MEDIUM_HUB_GEST_SENSOR:54,REMOTE_CONTROL_BUTTON:55,REMOTE_CONTROL_RSSI:56,TECHNIC_MEDIUM_HUB_ACCELEROMETER:57,TECHNIC_MEDIUM_HUB_GYRO_SENSOR:58,TECHNIC_MEDIUM_HUB_TILT_SENSOR:59,TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR:60,TECHNIC_COLOR_SENSOR:61,TECHNIC_DISTANCE_SENSOR:62,TECHNIC_FORCE_SENSOR:63,TECHNIC_3X3_COLOR_LIGHT_MATRIX:64,TECHNIC_SMALL_ANGULAR_MOTOR:65,MARIO_ACCELEROMETER:71,MARIO_BARCODE_SENSOR:73,MARIO_PANTS_SENSOR:74,TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY:75,TECHNIC_LARGE_ANGULAR_MOTOR_GREY:76},O=c(T),R=c({ACK:1,MACK:2,BUFFER_OVERFLOW:3,TIMEOUT:4,COMMAND_NOT_RECOGNIZED:5,INVALID_USE:6,OVERCURRENT:7,INTERNAL_ERROR:8}),d={ADVERTISING_NAME:1,BUTTON_STATE:2,FW_VERSION:3,HW_VERSION:4,RSSI:5,BATTERY_VOLTAGE:6,BATTERY_TYPE:7,MANUFACTURER_NAME:8,RADIO_FIRMWARE_VERSION:9,LWP_PROTOCOL_VERSION:10,SYSTEM_TYPE_ID:11,HW_NETWORK_ID:12,PRIMARY_MAC_ADDRESS:13,SECONDARY_MAC_ADDRESS:14,HW_NETWORK_FAMILY:15},I=c(d),l={NAME:0,RAW:1,PCT:2,SI:3,SYMBOL:4,MAPPING:5,USED_INTERNALLY:6,MOTOR_BIAS:7,CAPABILITY_BITS:8,VALUE_FORMAT:128},A=c(l),N={A:0,B:1,C:2,D:3,HUB_LED:50,CURRENT_SENSOR:59,VOLTAGE_SENSOR:60,ACCELEROMETER:97,GYRO_SENSOR:98,TILT_SENSOR:99},u={POWER:0,SPEED:1,ROTATION:2,ABSOLUTE:3,COLOR:0,RGB:1},p=c(N),M={};M[r.HUB_ATTACHED_IO]=function(t){const o=t.getUint8(3),a=t.getUint8(4),c=a?t.getUint16(5,!0):0,r=O[c]||"Unknown",_=E[a];if(i("handlePortMsg",{portId:o,eventName:_,deviceTypeName:r}),a==s.ATTACHED_IO)n[o]=c,e.emit("attach",{portId:o,deviceTypeName:r});else if(a==s.DETACHED_IO)delete n[o],e.emit("detach",{portId:o});else if(a==s.ATTACHED_VIRTUAL_IO){const n=p[t.getUint8(7)],a=p[t.getUint8(8)];p[o]=`${n}-${a}`,i({portIdA:n,portIdB:a}),e.emit("attach",{portId:o,deviceTypeName:"Virtual Port"})}},M[r.GENERIC_ERROR_MESSAGES]=function(t){const n=t.getUint8(3),o=t.getUint8(4);i({cmdType:n,errorCode:R[o]}),e.emit("error",{cmdType:n,errorCode:R[o]})},M[r.HUB_PROPERTIES]=function(t){const n=t.getUint8(3);if(i({property:I[n]}),n==d.BATTERY_VOLTAGE){const n=t.getUint8(5);i({batteryLevel:n}),e.emit("batteryLevel",{batteryLevel:n})}},M[r.PORT_OUTPUT_COMMAND_FEEDBACK]=function(t){for(let n=3;n<t.byteLength;n+=2){const e=t.getUint8(n),o=t.getUint8(n+1);i({portId:e,feedback:o}),f[e].shift();const a=f[e][0];a&&(i("envoie message mis en attente",a),L(a))}},M[r.PORT_INFORMATION]=function(t){const n=t.getUint8(3);let e=t.getUint8(5);const a=t.getUint8(6),c=t.getUint16(7,!0),s=t.getUint16(9,!0);i(`Port ${n}, capabilities ${e}, total modes ${a}, \n                input modes ${c}, output modes ${s}`);const E="output,input,logical combinable, logical synchronisable".split(",");let r=[];for(let t=0;t<4;t++)e>>t&1&&r.push(E[t]);const _={portId:n,capabilities:r.join(", "),count:a,input:c,output:s},T=o[n];"function"==typeof T&&T(_)},M[r.PORT_MODE_INFORMATION]=function(t){const n=t.getUint8(3),e=t.getUint8(4),a=t.getUint8(5),c={portId:n,mode:e,type:A[a]};switch(a){case l.NAME:c.name=b(t.buffer.slice(6,t.byteLength));break;case l.RAW:case l.PCT:case l.SI:c.min=t.getFloat32(6,!0),c.max=t.getFloat32(10,!0);break;case l.SYMBOL:c.symbol=b(t.buffer.slice(6,t.byteLength));break;case l.VALUE_FORMAT:c.numValues=t.getUint8(6),c.dataType=["8bit","16bit","32bit","float"][t.getUint8(7)],c.totalFigures=t.getUint8(8),c.decimals=t.getUint8(9)}i("portModeInformation",c);const s=o[n];"function"==typeof s&&(s(c),delete o[n])},M[r.PORT_VALUE_SINGLE]=function(t){i("msg",t);const e=t.getUint8(3),o=n[e];i("handlePortValueSingle",{portId:e,device:o});const a=U[o];"function"==typeof a&&a(t)};const U={};function S(t){const n=t.getUint8(3),o=a[n];if(o==u.ABSOLUTE){const a=t.getInt16(4,!0);e.emit("rotate",{portId:n,degrees:a,mode:o})}else if(o==u.ROTATION){const a=t.getInt32(4,!0);e.emit("rotate",{portId:n,degrees:a,mode:o})}}function b(t){const n=new Uint8Array(t);let e="";for(let t=0;t<n.byteLength&&0!=n[t];t++)e+=String.fromCharCode(n[t]);return e}function C(...t){const n=t.flat(),e=n.length+2,o=new ArrayBuffer(e),a=new Uint8Array(o);return a[0]=e,a[1]=0,a.set(n,2),o}async function L(n){i("sendMsg",n),await t.writeValueWithoutResponse(n)}async function m(t,n){await L(C(r.PORT_INPUT_FORMAT_SETUP_SINGLE,t,n,1,0,0,0,1)),a[t]=n}function D(t,n,e){return new Promise(async a=>{await L(C(r.PORT_MODE_INFORMATION_REQUEST,t,n,e)),o[t]=a})}U[T.TECHNIC_LARGE_LINEAR_MOTOR]=S,U[T.TECHNIC_LARGE_ANGULAR_MOTOR_GREY]=S;const f={};async function P(t,n,...e){const o=C(r.PORT_OUTPUT_COMMAND,t,17,81,n,e);null==f[t]&&(f[t]=[]),0==f[t].length?(f[t].push(o),await L(o)):(i("Message mis en attente"),f[t].push(o))}function g(t){!function(t){const n=t.byteLength,e=t.getUint8(0),o=t.getUint8(2);i("decodeMsg",{msgLen:e,bufferLen:n,msgType:_[o]});const a=M[o];"function"==typeof a&&a(t)}(t.target.value)}function h(){i("onGattServerDisconnected"),e.emit("disconnected")}return{connect:async function(){i("connect"),n={};const e=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:["00001623-1212-efde-1623-785feabcd123"]});e.addEventListener("gattserverdisconnected",h);const o=await e.gatt.connect();i("Connected");const a=await o.getPrimaryService("00001623-1212-efde-1623-785feabcd123");(t=await a.getCharacteristic("00001624-1212-efde-1623-785feabcd123")).addEventListener("characteristicvaluechanged",g),t.startNotifications()},shutdown:function(){return L(C(r.HUB_ACTIONS,1))},getDeviceType:function(t){return O[n[t]]},subscribe:m,createVirtualPort:function(t,n){return L(C(r.VIRTUAL_PORT_SETUP,1,t,n))},getPortInformation:async function(t){const n=await function(t){return new Promise(async n=>{await L(C(r.PORT_INFORMATION_REQUEST,t,1)),o[t]=n})}(t),{capabilities:e,count:a,output:i,input:c}=n,s=Math.max(c,i),E=[];for(let n=0;n<a;n++){const e={};if(s>>n){let o;o=await D(t,n,l.NAME),e.name=o.name,e[(o=await D(t,n,l.RAW)).type]={min:o.min,max:o.max},e[(o=await D(t,n,l.PCT)).type]={min:o.min,max:o.max},e[(o=await D(t,n,l.SI)).type]={min:o.min,max:o.max},o=await D(t,n,l.SYMBOL),e.unit=o.symbol,o=await D(t,n,l.VALUE_FORMAT);const{numValues:a,dataType:i,totalFigures:c,decimals:s}=o;e[o.type]={numValues:a,dataType:i,totalFigures:c,decimals:s}}E.push(e)}return{modes:E,capabilities:e}},on:e.on.bind(e),motor:{setPower:function(t,n){return P(t,u.POWER,n)},resetZero:function(t){return P(t,u.ROTATION,0,0,0,0)}},led:{setColor:async function(t){return await m(N.HUB_LED,u.COLOR),P(N.HUB_LED,u.COLOR,t)},setRGBColor:async function(t,n,e){return await m(N.HUB_LED,u.RGB),P(N.HUB_LED,u.RGB,t,n,e)}},Color:{BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,CYAN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:255},PortMap:N,PortMapNames:p,DeviceMode:u}}}),$$.control.registerControl("rootPage",{template:'<div>\n    <button class="w3-blue w3-button" \n        bn-event="click: onConnect"\n        bn-show="!connected"\n    >Connect to HUB</button>\n\n    <button class="w3-blue w3-button" \n        bn-event="click: onShutdown"\n        bn-show="connected"\n    >Shutdown</button>\n\n\n    <button class="w3-blue w3-button" \n        bn-event="click: onSendMsg"\n        bn-show="connected"\n    >Send Msg</button>\n</div>\n\n<div bn-show="connected" class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="mousedown.action: onMouseUp, mouseup.action:onMouseDown, click.portInfo: onInfo2">\n            <tr>\n                <td bn-text="$scope.$i.portName"></td>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-button w3-green action" data-action="forward">FWD</button>\n                    <button class="w3-button w3-green action" data-action="backward">BKWD</button>\n                    <button class="w3-button w3-blue portInfo">INFO</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-button: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-button w3-blue">INFO</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub"],props:{},init:function(t,n,e){function o(t){const n=t.closest("tr").index();return i.model.externalDevices[n].portId}function a(t,e){n.pushPage("info",{title:e,props:{portId:t}})}e.on("disconnected",()=>{i.setData({connected:!1})}),e.on("attach",t=>{const{portId:n,deviceTypeName:o}=t;n<50?(i.model.externalDevices.push({portId:n,portName:e.PortMapNames[t.portId],deviceTypeName:o}),i.model.externalDevices.sort((t,n)=>t.portId-n.portId)):i.model.internalDevices.push({deviceTypeName:o,portId:n}),i.update()}),e.on("detach",t=>{const n=i.model.externalDevices.findIndex(n=>n.portId==t.portId);console.log("idx",n),i.model.externalDevices.splice(n,1),i.update()}),e.on("rotate",t=>{console.log("rotate",t)}),e.on("error",t=>{console.log(t)});const i=$$.viewController(t,{data:{connected:!1,internalDevices:[],externalDevices:[]},events:{onMouseUp:function(){console.log("onMouseUp");const t=$(this).data("action"),n=o($(this));switch(t){case"off":e.motor.setPower(n,0);break;case"forward":e.motor.setPower(n,100);break;case"backward":e.motor.setPower(n,-100)}},onMouseDown:function(){console.log("onMouseDown");const t=o($(this));e.motor.setPower(t,0)},onConnect:async function(){await e.connect(),i.setData({connected:!0})},onSendMsg:async function(){console.log("onSendMsg"),e.createVirtualPort(e.PortMap.C,e.PortMap.D)},onShutdown:async function(){await e.shutdown()},onInfo:function(){const t=$(this).closest("tr").index(),{portId:n,deviceTypeName:e}=i.model.internalDevices[t];a(n,e)},onInfo2:function(){const t=$(this).closest("tr").index(),{portId:n,deviceTypeName:e}=i.model.externalDevices[t];a(n,e)}}})}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>NAME</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>PCT</th>\n                <th>SI</th>\n                <th>VALUE FORMAT</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n                <td>\n                    dataType: <span bn-text="$scope.$i.VALUE_FORMAT.dataType"></span><br>\n                    numValues: <span bn-text="$scope.$i.VALUE_FORMAT.numValues"></span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(t,n,e){const{portId:o}=this.props,a=$$.viewController(t,{data:{modes:[],capabilities:""},events:{}});!async function(){const t=await e.getPortInformation(o);console.log("portInfo",t);const{modes:n,capabilities:i}=t;a.setData({modes:n,capabilities:i})}()}});