Blockly.Blocks.object_getfield={init:function(){this.appendValueInput("OBJECT").setCheck(null).appendField("in Object"),this.appendDummyInput().appendField("get field").appendField(new Blockly.FieldTextInput(""),"FIELD"),this.setInputsInline(!0),this.setOutput(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.create_device={init:function(){this.appendDummyInput().appendField("Device").appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("PORT").appendField(new Blockly.FieldNumber(0,0,1/0,1),"PORT"),this.setOutput(!0,"Device"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.device_getvalue={init:function(){this.appendValueInput("DEVICE").setCheck(null).appendField("Device"),this.appendDummyInput().appendField("Mode").appendField(new Blockly.FieldNumber(0,0,1/0,1),"MODE").appendField("getValue"),this.appendDummyInput(),this.setInputsInline(!0),this.setOutput(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.wait_until_device={init:function(){this.appendValueInput("DEVICE").setCheck(null).appendField("Wait until Device"),this.appendDummyInput().appendField("Mode").appendField(new Blockly.FieldNumber(0,0,1/0,1),"MODE"),this.appendValueInput("TEST").setCheck("Boolean").appendField(new Blockly.FieldVariable("value"),"VAR").appendField("Test"),this.setInputsInline(!0),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.create_tacho_motor={init:function(){this.appendDummyInput().appendField("TachoMotor").appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("PORT").appendField(new Blockly.FieldDropdown([["A","A"],["B","B"],["C","C"],["D","D"]]),"PORT"),this.setOutput(!0,"Motor"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.create_motor={init:function(){this.appendDummyInput().appendField("Motor").appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("PORT").appendField(new Blockly.FieldDropdown([["A","A"],["B","B"],["C","C"],["D","D"]]),"PORT"),this.setOutput(!0,"Motor"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.create_pair_motor={init:function(){this.appendDummyInput().appendField("PairMotor").appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("PORT1").appendField(new Blockly.FieldDropdown([["A","A"],["B","B"],["C","C"],["D","D"]]),"PORT1").appendField("PORT2").appendField(new Blockly.FieldDropdown([["A","A"],["B","B"],["C","C"],["D","D"]]),"PORT2"),this.setOutput(!0,"Motor"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.pair_motor_speed={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR"),this.appendValueInput("SPEED1").setCheck("Number").appendField("Speed1"),this.appendValueInput("SPEED2").setCheck("Number").appendField("Speed2"),this.setInputsInline(!0),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.hub_color={init:function(){this.appendDummyInput().appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("Color").appendField(new Blockly.FieldDropdown([["BLACK","BLACK"],["PURPLE","PURPLE"],["BLUE","BLUE"],["LIGHT_BLUE","LIGHT_BLUE"],["CYAN","CYAN"],["GREEN","GREEN"],["PINK","PINK"],["YELLOW","YELLOW"],["ORANGE","ORANGE"],["RED","RED"],["WHITE","WHITE"]]),"COLOR"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.hub_get_tilt={init:function(){this.appendDummyInput().appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("Tilt").appendField(new Blockly.FieldDropdown([["Pitch","pitch"],["Roll","roll"],["Yaw","yaw"]]),"TYPE"),this.setOutput(!0,"Number"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.hub_get_voltage={init:function(){this.appendDummyInput().appendField("HUB").appendField(new Blockly.FieldDropdown([["HUB1","HUB1"],["HUB2","HUB2"]]),"HUB").appendField("Voltage (mV)"),this.setOutput(!0,"Number"),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_speed_time={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR"),this.appendValueInput("SPEED").setCheck("Number").appendField("Speed"),this.appendValueInput("TIME").setCheck("Number").appendField("Time (sec)"),this.appendDummyInput().appendField("Wait").appendField(new Blockly.FieldCheckbox("TRUE"),"WAIT"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_speed_degrees={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR"),this.appendValueInput("SPEED").setCheck("Number").appendField("Speed"),this.appendValueInput("DEGREES").setCheck("Number").appendField("Degrees"),this.appendDummyInput().appendField("Wait").appendField(new Blockly.FieldCheckbox("TRUE"),"WAIT"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_speed_position={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR"),this.appendValueInput("SPEED").setCheck("Number").appendField("Speed"),this.appendValueInput("ANGLE").setCheck("Number").appendField("Angle"),this.appendDummyInput().appendField("Wait").appendField(new Blockly.FieldCheckbox("TRUE"),"WAIT"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_reset_position={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR").appendField("reset position"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_get_speed={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR").appendField("Speed"),this.setOutput(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_get_position={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR").appendField("Position"),this.setOutput(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_get_absoluteposition={init:function(){this.appendDummyInput().appendField(new Blockly.FieldVariable("item"),"VAR").appendField("Absolute Position"),this.setOutput(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.sleep={init:function(){this.appendValueInput("TIME").setCheck("Number").appendField("Sleep (sec)"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_speed={init:function(){this.appendValueInput("SPEED").setCheck("Number").appendField(new Blockly.FieldVariable("item"),"VAR").appendField("Speed"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.motor_power={init:function(){this.appendValueInput("POWER").setCheck("Number").appendField(new Blockly.FieldVariable("item"),"VAR").appendField("Power"),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},Blockly.Blocks.device_subscribe={init:function(){this.appendValueInput("DEVICE").setCheck(null).appendField("Device"),this.appendDummyInput().appendField("Mode").appendField(new Blockly.FieldNumber(0,0,1/0,1),"MODE").appendField("delta").appendField(new Blockly.FieldNumber(1,1),"DELTA").appendField("subscribe").appendField(new Blockly.FieldVariable("value"),"VAR"),this.appendStatementInput("DO").setCheck(null),this.setInputsInline(!0),this.setPreviousStatement(!0,null),this.setNextStatement(!0,null),this.setColour(230),this.setTooltip(""),this.setHelpUrl("")}},$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n\n    <div class="left">\n        <button bn-event="click: onConnect">Connect to HUB</button>\n        \n        <button bn-event="click: onCode">Code</button>\n\n\n    </div>\n</div>\n\n\n<div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Hub</th>\n                <th>Actions</th>\n                <th>Battery Level</th>\n                <th>Address</th>\n            </tr>\n        </thead>\n        <tbody bn-each="hubDevices" bn-event="click.btnShutdown: onShutDown, click.btnInfo: onInfo, comboboxchange.combo: onHubChange">\n            <tr>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: hubs}" bn-val="$scope.$i.hubId" class="combo"></div>\n                </td>\n                <td>\n                    <button class="btnShutdown">Shutdown</button>\n                    <button class="btnInfo">Info</button>\n                </td>\n                <td bn-text="$scope.$i.batteryLevel"></td>\n                <td bn-text="$scope.$i.address"></td>\n            </tr>\n        </tbody>\n    </table>\n\n</div>',deps:["breizbot.pager","hub","breizbot.blocklyinterpretor"],props:{},init:async function(e,t,n,o){e.find("button").addClass("w3-btn w3-blue");const i={};let a=1,l=null;const s=$$.viewController(e,{data:{currentConfig:"",gamepadConnected:!1,hubDevices:[],hubs:["HUB1","HUB2"]},events:{onCode:function(){t.pushPage("code",{title:"Code",props:{hubDevices:Object.values(i),config:l},onBack:function(e){l=e}})},onHubChange:function(){const e=$(this).closest("tr").index(),t=$(this).getValue(),n=i[s.model.hubDevices[e].UUID];console.log("hubDevice",n),n.name=t,s.model.hubDevices[e].hubId=t},onShutDown:function(){const e=$(this).closest("tr").index(),t=s.model.hubDevices[e];i[t.UUID].shutdown()},onInfo:function(){const e=$(this).closest("tr").index(),n=s.model.hubDevices[e],o=i[n.UUID];console.log("hubDevice",o),t.pushPage("hubinfo",{title:n.hubId,props:{hubDevice:o}})},onConnect:async function(){const e=await n.connect(),t=a++;i[t]=e,e.on("error",e=>{console.log(e)});const o=`HUB${s.model.hubDevices.length+1}`;e.name=o,s.model.hubDevices.push({UUID:t,hubId:o,batteryLevel:0,address:"Unknown"}),s.update(),e.on("batteryLevel",e=>{s.model.hubDevices.find(e=>e.UUID==t).batteryLevel=e.batteryLevel,s.update()}),e.on("address",e=>{console.log("address",e),s.model.hubDevices.find(e=>e.UUID==t).address=e.address,s.update()}),await e.startNotification(),e.on("disconnected",()=>{console.log("disconnected");const e=s.model.hubDevices.findIndex(e=>e.UUID==t);s.model.hubDevices.splice(e,1),s.update(),delete i[t]})}}})}}),$$.control.registerControl("code",{template:'<div class="toolbar">\n\n    <div>\n        <button bn-event="click: onExport"  title="Export current config">Export</button>\n        <button bn-event="click: onImport"  title="Import config">Import</button>\n\n        <button bn-event="click: onNewConfig" bn-icon="fa fa-file" title="Reset Config"></button>\n\n        <button bn-event="click: onConfig" bn-icon="fa fa-folder-open" title="Open Config"></button>\n\n        <button bn-event="click: onSaveConfig" bn-icon="fa fa-save" title="Save current config"></button>\n\n        <button bn-event="click: onRun">Run</button>\n\n        <button bn-event="click: onStop">Stop</button>\n\n        <button bn-event="click: onGamePad" bn-show="gamepadConnected">Gamepad</button>\n    </div>\n\n\n    <div>\n        <div bn-show="currentConfig">\n            <label>Current Config:</label>\n            <span bn-text="currentConfig"></span>\n        </div>\n    </div>\n\n\n\n</div>\n<div id="blocklyDiv"></div>\n<div class="logPanel" bn-html="getLogs" bn-bind="logPanel"></div>\n\n<xml id="toolbox" style="display: none;">\n    <category name="Logic" categorystyle="logic_category">\n        <block type="controls_if"></block>\n        <block type="logic_compare"></block>\n        <block type="logic_operation"></block>\n        <block type="logic_negate"></block>\n        <block type="logic_boolean"></block>\n        <block type="logic_ternary"></block>\n    </category>\n    <category name="Loop" categorystyle="loop_category">\n        <block type="controls_repeat_ext">\n            <value name="TIMES">\n                <shadow type="math_number">\n                    <field name="NUM">10</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="controls_whileUntil"></block>\n        <block type="controls_for">\n            <value name="FROM">\n                <shadow type="math_number">\n                    <field name="NUM">1</field>\n                </shadow>\n            </value>\n            <value name="TO">\n                <shadow type="math_number">\n                    <field name="NUM">10</field>\n                </shadow>\n            </value>\n            <value name="BY">\n                <shadow type="math_number">\n                    <field name="NUM">1</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="controls_forEach"></block>\n        <block type="controls_flow_statements"></block>\n    </category>\n    <category name="Math" categorystyle="math_category">\n        <block type="math_number"></block>\n        <block type="math_arithmetic"></block>\n        <block type="math_single">\n            <field name="OP">ROOT</field>\n            <value name="NUM">\n                <shadow type="math_number">\n                    <field name="NUM">9</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="math_trig">\n            <field name="OP">SIN</field>\n            <value name="NUM">\n                <shadow type="math_number">\n                    <field name="NUM">45</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="math_constant">\n            <field name="CONSTANT">PI</field>\n        </block>\n        <block type="math_random_int">\n            <value name="FROM">\n                <shadow type="math_number">\n                    <field name="NUM">1</field>\n                </shadow>\n            </value>\n            <value name="TO">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="math_round">\n            <field name="OP">ROUND</field>\n            <value name="NUM">\n                <shadow type="math_number">\n                    <field name="NUM">3.1</field>\n                </shadow>\n            </value>\n        </block>\n    </category>\n    <category name="Text" categorystyle="text_category">\n        <block type="text"></block>\n        <block type="text_print"></block>\n        <block type="text_length">\n            <value name="VALUE">\n                <shadow type="text">\n                    <field name="TEXT">abc</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="text_changeCase">\n            <field name="CASE">UPPERCASE</field>\n            <value name="TEXT">\n                <shadow type="text">\n                    <field name="TEXT">abc</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="text_append">\n            <field name="VAR" id="MHveE$^#X7/c|*RA!r{I">item</field>\n            <value name="TEXT">\n                <shadow type="text">\n                    <field name="TEXT" />\n                </shadow>\n            </value>\n        </block>\n        <block type="text_join">\n            <mutation items="2" />\n        </block>\n        <block type="text_indexOf"></block>\n        <block type="text_charAt"></block>\n        <block type="text_getSubstring"></block>\n        <block type="text_prompt_ext">\n            <mutation type="TEXT" />\n            <field name="TYPE">TEXT</field>\n            <value name="TEXT">\n                <shadow type="text">\n                    <field name="TEXT">abc</field>\n                </shadow>\n            </value>\n        </block>\n    </category>\n    <category name="Lists" categorystyle="list_category">\n        <block type="lists_create_with">\n            <mutation items="0"></mutation>\n        </block>\n        <block type="lists_create_with"></block>\n        <block type="lists_repeat">\n            <value name="NUM">\n                <shadow type="math_number">\n                    <field name="NUM">5</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="lists_length"></block>\n        <block type="lists_isEmpty"></block>\n        <block type="lists_indexOf">\n            <value name="VALUE">\n                <block type="variables_get">\n                    <field name="VAR">list</field>\n                </block>\n            </value>\n        </block>\n        <block type="lists_getIndex">\n            <value name="VALUE">\n                <block type="variables_get">\n                    <field name="VAR">list</field>\n                </block>\n            </value>\n        </block>\n        <block type="lists_setIndex">\n            <value name="LIST">\n                <block type="variables_get">\n                    <field name="VAR">list</field>\n                </block>\n            </value>\n        </block>\n        <block type="lists_getSublist">\n            <value name="LIST">\n                <block type="variables_get">\n                    <field name="VAR">list</field>\n                </block>\n            </value>\n        </block>\n        <block type="lists_split">\n            <value name="DELIM">\n                <shadow type="text">\n                    <field name="TEXT">,</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="lists_sort"></block>\n        <block type="lists_reverse"></block>\n    </category>\n    <category name="Variables" custom="VARIABLE" categorystyle="variable_category"></category>\n    <category name="Functions" custom="PROCEDURE" categorystyle="procedure_category"></category>\n    <category name="Object" colour="355">\n        <block type="object_getfield">\n            <value name="OBJECT">\n                <block type="variables_get">\n                    <field name="VAR">object</field>\n                </block>\n            </value>\n        </block>\n    </category>\n    <category name="Device" colour="355">\n        <block type="create_device"></block>\n        <block type="device_getvalue">\n            <value name="DEVICE">\n                <block type="variables_get">\n                    <field name="VAR">device</field>\n                </block>\n            </value>\n        </block>\n        <block type="wait_until_device">\n            <value name="DEVICE">\n                <block type="variables_get">\n                    <field name="VAR">device</field>\n                </block>\n            </value>\n        </block>\n        <block type="device_subscribe">\n            <value name="DEVICE">\n                <block type="variables_get">\n                    <field name="VAR">device</field>\n                </block>\n            </value>\n        </block>\n    </category>\n    <category name="Motor" colour="355">\n        <block type="create_motor"></block>\n        <block type="motor_power">\n            <value name="POWER">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n    </category>\n    <category name="TachoMotor" colour="355">\n        <block type="create_tacho_motor"></block>\n        <block type="motor_speed">\n            <value name="SPEED">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="motor_speed_time">\n            <value name="TIME">\n                <shadow type="math_number">\n                    <field name="NUM">1</field>\n                </shadow>\n            </value>\n            <value name="SPEED">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="motor_speed_degrees">\n            <value name="DEGREES">\n                <shadow type="math_number">\n                    <field name="NUM">180</field>\n                </shadow>\n            </value>\n            <value name="SPEED">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="motor_speed_position">\n            <value name="ANGLE">\n                <shadow type="math_number">\n                    <field name="NUM">0</field>\n                </shadow>\n            </value>\n            <value name="SPEED">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n        <block type="motor_reset_position"></block>\n        <block type="motor_get_speed"></block>\n        <block type="motor_get_position"></block>\n        <block type="motor_get_absoluteposition"></block>\n\n    </category>\n    <category name="PairMotor" colour="355">\n        <block type="create_pair_motor">\n            <FIELD name="PORT2">B</FIELD>\n        </block>\n        <block type="pair_motor_speed">\n            <value name="SPEED1">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n            <value name="SPEED2">\n                <shadow type="math_number">\n                    <field name="NUM">100</field>\n                </shadow>\n            </value>\n        </block>\n\n\n    </category>\n    <category name="Hub" colour="355">\n        <block type="hub_color"></block>\n        <block type="hub_get_tilt"></block>\n        <block type="hub_get_voltage"></block>\n    </category>\n    <category name="System" colour="355">\n        <block type="sleep">\n            <value name="TIME">\n                <shadow type="math_number">\n                    <field name="NUM">1</field>\n                </shadow>\n            </value>\n        </block>\n    </category>\n\n</xml>',deps:["breizbot.pager","breizbot.blocklyinterpretor","hub","breizbot.gamepad","breizbot.http","breizbot.files"],props:{hubDevices:null,config:null},init:function(e,t,n,o,i,a,l){console.log("props",this.props);const s=$$.ui.progressDialog("Loading device info"),c=this.props.hubDevices;e.find("button").addClass("w3-btn w3-blue");let{config:d}=this.props;async function p(e,t){try{await n.callFunction(e,t)}catch(e){"string"==typeof e&&$$.ui.showAlert({title:"Error",content:e})}}null==d&&(d={code:null,gamepadId:"",mappings:{},name:""}),console.log("config",d),i.on("connected",e=>{console.log("gamepad connnected",e),d.gamepadId=e.id,d.gamepadMapping=d.mappings[e.id],console.log({gamepadMapping:d.gamepadMapping}),B.setData({gamepadConnected:!0}),i.checkGamePadStatus()}),i.on("disconnected",e=>{console.log("gamepad disconnected"),B.setData({gamepadConnected:!1}),d.gamepadMapping=null,d.gamepadId=""});let r={};async function u(e){if(d.gamepadMapping){const{action:t}=d.gamepadMapping.axes[e.id];let{value:n}=e;"None"!=t&&(n=100*Math.sign(n))!=(r[e.id]||0)&&(r[e.id]=n,await p(t,n))}}async function b(e){if(console.log("buttonDown",e.id),d.gamepadMapping){const{down:t,downValue:n}=d.gamepadMapping.buttons[e.id];"None"!=t&&await p(t,n)}}async function m(e){if(console.log("buttonDown",e.id),d.gamepadMapping){const{up:t,upValue:n}=d.gamepadMapping.buttons[e.id];"None"!=t&&await p(t,n)}}function h(e){e?(i.on("axe",u),i.on("buttonDown",b),i.on("buttonUp",m)):(i.off("axe",u),i.off("buttonDown",b),i.off("buttonUp",m))}h(!0),this.dispose=function(){console.log("dispose"),h(!1)};Blockly.inject("blocklyDiv",{media:"../lib/blockly/media/",toolbox:document.getElementById("toolbox")});function g(e){const t=e.fields.HUB,n=c.find(e=>e.name==t);if(null==n)throw`Hub ${t} is not connected`;return n}function f(e){const t=e.fields.VAR.id,i=n.getVarValue(t);if("object"!=typeof i||!o.isTachoMotor(i)){throw`variable '${n.getVarName(t)}' is not of type TachoMotor`}return i}async function y(e,t,n){const o=g(e).getDevice(t);return console.log("getHubValue",{portId:t,mode:n,device:o}),o.getValue(n)}function v(e){const t=Blockly.getMainWorkspace();Blockly.serialization.workspaces.load(e,t)}function k(){return Blockly.serialization.workspaces.save(Blockly.getMainWorkspace())}async function w(){for(const e of c)for(const t of e.getHubDevices())o.isMotor(t)&&await t.setPower(0),await t.unsubscribe()}n.setLogFunction(e=>{B.model.logs.push(e),B.update(),D.scrollToBottom()}),n.addBlockType("object_getfield",async e=>{const t=e.fields.FIELD,o=await n.evalCode(e.inputs.OBJECT);return console.log({fieldName:t,object:o}),o[t]}),n.addBlockType("create_device",async e=>{const t=e.fields.PORT;return console.log({port:t}),g(e).getDevice(t)}),n.addBlockType("device_getvalue",async e=>{const t=e.fields.MODE,o=await n.evalCode(e.inputs.DEVICE);return console.log({mode:t,device:o}),o.getValue(t)}),n.addBlockType("wait_until_device",async e=>{const t=e.fields.MODE,o=await n.evalCode(e.inputs.DEVICE),i=e.fields.VAR.id;console.log({mode:t,device:o}),await o.waitTestValue(t,async t=>{return console.log("waitTestValue",t),n.setVarValue(i,t),await n.evalCode(e.inputs.TEST)})}),n.addBlockType("device_subscribe",async e=>{const t=e.fields.MODE,o=e.fields.DELTA,i=await n.evalCode(e.inputs.DEVICE);console.log({mode:t,deltaInterval:o,device:i});const a=e.fields.VAR.id;await i.subscribe(t,async t=>{n.setVarValue(a,t),await n.evalCode(e.inputs.DO)},o)}),n.addBlockType("create_pair_motor",async e=>{const t=e.fields.PORT1,n=e.fields.PORT2,i=g(e);return await i.getDblMotor(o.PortMap[t],o.PortMap[n])}),n.addBlockType("create_tacho_motor",async e=>{const t=e.fields.PORT,n=g(e).getDevice(o.PortMap[t]);if(!o.isTachoMotor(n))throw`Device connected to port '${t}' is not of a TachoMotor`;return n}),n.addBlockType("create_motor",async e=>{const t=e.fields.PORT,n=g(e).getDevice(o.PortMap[t]);if(!o.isMotor(n))throw`Device connected to port '${t}' is not of a Motor`;return n}),n.addBlockType("motor_power",async e=>{const t=await n.evalCode(e.inputs.POWER),i=function(e){const t=e.fields.VAR.id,i=n.getVarValue(t);if("object"!=typeof i||!o.isMotor(i))throw`variable '${n.getVarName(t)}' is not of type Motor`;return i}(e);console.log({power:t}),await i.setPower(t)}),n.addBlockType("motor_speed",async e=>{const t=await n.evalCode(e.inputs.SPEED),o=f(e);console.log({speed:t}),await o.setSpeed(t)}),n.addBlockType("pair_motor_speed",async e=>{const t=await n.evalCode(e.inputs.SPEED1),i=await n.evalCode(e.inputs.SPEED2),a=function(e){const t=e.fields.VAR.id,i=n.getVarValue(t);if(console.log("motor",i),"object"!=typeof i||!o.isDoubleMotor(i))throw`variable '${n.getVarName(t)}' is not of type PairMotor`;return i}(e);console.log({speed1:t,speed2:i,motor:a}),await a.setSpeed(t,i)}),n.addBlockType("motor_speed_time",async e=>{const t=await n.evalCode(e.inputs.SPEED),i=e.fields.WAIT,a=await n.evalCode(e.inputs.TIME),l=f(e);console.log({speed:t,time:a,waitEnd:i}),await l.setSpeedForTime(t,1e3*a,i,o.BrakingStyle.FLOAT)}),n.addBlockType("motor_speed_degrees",async e=>{const t=f(e),i=await n.evalCode(e.inputs.SPEED),a=e.fields.WAIT,l=await n.evalCode(e.inputs.DEGREES);console.log({speed:i,degrees:l,waitEnd:a}),await t.rotateDegrees(l,i,a,o.BrakingStyle.BRAKE)}),n.addBlockType("motor_speed_position",async e=>{const t=f(e),i=await n.evalCode(e.inputs.SPEED),a=e.fields.WAIT,l=await n.evalCode(e.inputs.ANGLE);console.log({speed:i,angle:l,waitEnd:a}),await t.gotoAngle(l,i,a,o.BrakingStyle.FLOAT)}),n.addBlockType("motor_reset_position",async e=>{const t=f(e);await t.resetZero()}),n.addBlockType("motor_get_speed",async e=>{return f(e).getSpeed()}),n.addBlockType("motor_get_position",async e=>{return f(e).getPosition()}),n.addBlockType("motor_get_absoluteposition",async e=>{return f(e).getAbsolutePosition()}),n.addBlockType("hub_color",async e=>{const t=e.fields.COLOR,n=g(e).getDevice(o.PortMap.HUB_LED);await n.setColor(o.Color[t])}),n.addBlockType("hub_get_voltage",async e=>y(e,o.PortMap.VOLTAGE_SENSOR,0)),n.addBlockType("hub_get_tilt",async e=>{const t=e.fields.TYPE;return(await y(e,o.PortMap.TILT_SENSOR,o.DeviceMode.TILT_POS))[t]}),n.addBlockType("sleep",async e=>{const t=await n.evalCode(e.inputs.TIME);console.log({time:t}),await $$.util.wait(1e3*t)}),null!=d.code&&v(d.code),this.onBack=function(){return d.code=k(),d};const B=$$.viewController(e,{data:{currentConfig:d.name,gamepadConnected:""!=d.gamepadId,logs:[],getLogs:function(){return this.logs.join("<br>")}},events:{onExport:async function(){let e=await $$.ui.showPrompt({title:"Export",label:"FileName: "});if(e){const t=JSON.stringify({code:k(),mappings:d.mappings}),n=new Blob([t],{type:"application/json"});e+=".pow",await l.saveFile(n,e),$.notify("Code exported","success")}},onImport:function(){t.pushPage("breizbot.files",{title:"Open File",props:{filterExtension:"pow"},events:{fileclick:function(e,n){t.popPage(n)}},onReturn:async function(e){const t=l.fileUrl(e.rootDir+e.fileName),n=await fetch(t),{code:o,mappings:i}=await n.json();console.log({code:o,mappings:i}),d.code=o,d.name="",d.mappings=i,B.setData({currentConfig:""}),d.gamepadMapping=d.mappings[d.gamepadId],v(d.code)}})},onStop:async function(){await w()},onGamePad:function(){const e=k();console.log("code",e),h(!1),t.pushPage("gamepad",{title:"Gamepad",props:{mapping:d.gamepadMapping,actions:null!=e?n.getFunctionNames(e):[]},onReturn:async e=>{console.log("onReturn",e),d.gamepadMapping=e,d.mappings[e.id]=e,h(!0)},onBack:()=>{h(!0)}})},onNewConfig:function(){d.mappings={},d.gamepadMapping=null,d.name="",Blockly.getMainWorkspace().clear(),B.setData({currentConfig:""})},onSaveConfig:async function(){if(console.log("oncodeSaveConfig",d),""==B.model.currentConfig){const e=await $$.ui.showPrompt({title:"Save Config",label:"Config Name:"});e&&(await a.post("/add",{name:e,code:k(),mappings:d.mappings}),B.setData({currentConfig:e}),d.name=e)}else await a.post("/update",{name:d.name,code:k(),mappings:d.mappings}),$.notify(`Config '${d.name}' updated`,"success")},onConfig:function(){t.pushPage("configCtrl",{title:"Configurations",props:{currentConfig:B.model.currentConfig},onReturn:function(e){console.log("newConfig",e),d.code=e.code,d.name=e.name,d.mappings=e.mappings,B.setData({currentConfig:e.name}),d.gamepadMapping=d.mappings[d.gamepadId],v(d.code)}})},onRun:async function(){console.log("onRun"),await w(),s.setPercentage(0),s.show();let e=0;for(const t of c)e+=t.getHubDevices().length;console.log({nbAccess:e});const t=$$.util.mapRange(0,e,0,1);let o=0;for(const e of c)for(const n of e.getHubDevices())await n.readInfo(),s.setPercentage(t(++o));s.hide();const i=k();r={},B.setData({logs:[]});try{await n.startCode(i)}catch(e){"string"==typeof e&&$$.ui.showAlert({title:"Error",content:e})}}}}),D=B.scope.logPanel}}),$$.control.registerControl("configCtrl",{template:'<div bn-show="!hasConfigs" class="message">\n    No configurations defined\n</div>\n\n<div class="scrollPanel" bn-show="hasConfigs">\n    <div bn-each="configs" class="items" bn-event="click.item: onItemClick, contextmenuchange.item:onItemContextMenu">\n        <div class="w3-card-2 item" bn-control="brainjs.contextmenu" bn-data="{\n                    items: {\n                        delete: {name: \'Remove\', icon: \'fas fa-trash-alt\'}\n                    }\n                }">\n            <div>\n                <strong bn-text="$scope.$i.name"></strong>\n            </div>\n        </div>\n    </div>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{currentConfig:""},init:function(e,t,n){const{currentConfig:o}=this.props,i=$$.viewController(e,{data:{configs:[],hasConfigs:function(){return this.configs.length>0}},events:{onItemContextMenu:async function(e,t){const l=$(this).closest(".item").index(),s=i.model.configs[l];"delete"==t.cmd&&(s.name==o?$$.ui.showAlert({content:"Cannot delete active config",title:"Warning"}):(await n.post("/delete",s),a()))},onItemClick:function(e){const n=$(this).closest(".item").index();console.log("onItemClick",n);const o=i.model.configs[n];t.popPage(o)}}});async function a(){const e=await n.get("/");console.log({configs:e}),i.setData({configs:e})}a()}}),$$.control.registerControl("gamepad",{template:'<div>\n    <h2 bn-text="id"></h2>\n</div>\n\n<h3>Axes</h3>\n<div>\n    <table class="w3-table-all axeTable">\n        <thead>\n            <tr>\n                <th>Axe</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="axes" bn-bind="axes" bn-index="idx">\n            <tr>\n                <td bn-text="getAxeLabel"></td>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: actions}" bn-val="$scope.$i.action"\n                        class="item"></div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<h3>Buttons</h3>\n<div class="commandTable">\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Button</th>\n                <th>Down</th>\n                <th>Up</th>\n            </tr>\n        </thead>\n        <tbody bn-each="buttons" bn-bind="buttons" bn-index="idx">\n            <tr>\n                <td bn-text="getButtonLabel"></td>\n                <td>\n                    <div class="item">\n                        <div bn-control="brainjs.combobox" bn-data="{items: actions}" bn-val="$scope.$i.down"\n                            class="down"></div>\n                        <input bn-val="$scope.$i.downValue" type="number" class="downValue">\n\n                    </div>\n\n                </td>\n                <td>\n                    <div class="item">\n                        <div bn-control="brainjs.combobox" bn-data="{items: actions}" bn-val="$scope.$i.up" class="up">\n                        </div>\n                        <input bn-val="$scope.$i.upValue" type="number" class="upValue">\n                    </div>\n\n\n                </td>\n\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","breizbot.gamepad"],props:{mapping:null,actions:null},init:function(e,t,n){console.log("props",this.props);const{mapping:o,actions:i}=this.props;i.unshift("None"),console.log(this.props);let a=[],l=[];const s=n.getGamepads()[0];if(console.log({info:s}),null!=o&&(a=o.axes,l=o.buttons),0==a.length)for(let e=0;e<s.axes.length;e++)a.push({action:"None"});if(0==l.length)for(let e=0;e<s.buttons.length;e++)l.push({up:"None",down:"None",upValue:0,downValue:1});function c(){let e=[],t=[];for(let t=0;t<s.axes.length;t++)e.push({action:"None"});for(let e=0;e<s.buttons.length;e++)t.push({up:"None",down:"None",upValue:0,downValue:1});u.setData({axes:e,buttons:t})}function d(e){const{value:t,id:n}=e;0!=t?b.find("tr").eq(n).find("td").eq(0).addClass("pressed"):b.find("tr").eq(n).find("td").eq(0).removeClass("pressed")}function p(e){m.find("tr").eq(e.id).find("td").eq(0).addClass("pressed")}function r(e){m.find("tr").eq(e.id).find("td").eq(0).removeClass("pressed")}n.on("axe",d),n.on("buttonDown",p),n.on("buttonUp",r),this.dispose=function(){console.log("dispose"),n.off("axe",d),n.off("buttonDown",p),n.off("buttonUp",r)};const u=$$.viewController(e,{data:{id:s.id,axes:a,buttons:l,actions:i,getButtonLabel:function(e){return`Button ${e.idx+1}`},getAxeLabel:function(e){return`Axe ${e.idx+1}`}},events:{}}),b=u.scope.axes,m=u.scope.buttons;this.getButtons=function(){return{check:{icon:"fa fa-check",title:"Apply",onClick:function(){t.popPage(function(){const e={id:s.id,axes:[],buttons:[]};return b.find("tr").each(function(t){const n=$(this).find(".item").getValue();e.axes.push({action:n})}),m.find("tr").each(function(t){const n=$(this).find(".up").getValue(),o=$(this).find(".down").getValue(),i=$(this).find(".upValue").getValue(),a=$(this).find(".downValue").getValue();e.buttons.push({up:n,down:o,upValue:i,downValue:a})}),console.log({ret:e}),e}())}},reset:{icon:"fas fa-sync",title:"Reset value",onClick:c}}}}}),$$.control.registerControl("hubinfo",{template:'<div class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="\n            mousedown.motorMouseAction: onMouseUp, \n            mouseup.motorMouseAction:onMouseDown, \n            click.motorAction:onMotorAction, \n            click.ledAction: onLedAction,\n            click.portInfo: onInfo2, \n            click.calibrate:onCalibrate">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.type"></td>\n                <td>\n                    <span bn-if="isMotor" class="spanButtons">\n                        <button class="w3-btn w3-green motorMouseAction" data-action="forward">FWD</button>\n                        <button class="w3-btn w3-green motorMouseAction" data-action="backward">BKWD</button>\n                    </span>\n                    <span bn-if="isTachoMotor" class="spanButtons">\n                        <button class="w3-btn w3-green motorAction" data-action="reset">RESET</button>\n                        <button class="w3-btn w3-green motorAction" data-action="gozero">GO ZERO</button>\n                    </span>\n                    <span bn-if="isLed" class="spanButtons">\n                        <button class="w3-btn w3-green ledAction" data-action="on">ON</button>\n                        <button class="w3-btn w3-green ledAction" data-action="off">OFF</button>\n                    </span>\n\n                    <button class="w3-btn w3-blue portInfo">MODE</button>\n                </td>\n\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port ID</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-btn: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.portId"></td>\n                <td bn-text="$scope.$i.type"></td>\n                <td>\n                    <button class="w3-btn w3-blue">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub"],props:{hubDevice:null},init:function(e,t,n){const o=this.props.hubDevice;function i(e,n){t.pushPage("info",{title:n,props:{device:o.getDevice(e)}})}function a(e){const t=e.closest("tr").index();return c.model.externalDevices[t].portId}async function l(e){console.log("attach",e);const{portId:t,name:n,type:o}=e,i={portId:t,name:n,type:o};c.model.externalDevices.push(i),c.update()}function s(e){console.log("detach",e);const t=c.model.externalDevices.findIndex(t=>t.portId==e.portId);c.model.externalDevices.splice(t,1),c.update()}o.on("attach",l),o.on("detach",s),this.dispose=async function(){console.log("hubInfo dispose"),o.off("attach",l),o.off("detach",s)};const c=$$.viewController(e,{data:{internalDevices:[],externalDevices:[],isMotor:function(e){return n.isMotor(o.getDevice(e.$i.portId))},isLed:function(e){return n.isLed(o.getDevice(e.$i.portId))},isTachoMotor:function(e){return n.isTachoMotor(o.getDevice(e.$i.portId))}},events:{onMotorAction:async function(){const e=a($(this)),t=$(this).data("action");console.log("onMotorAction",e,t);const n=await o.getTachoMotor(e);switch(t){case"reset":n.resetZero();break;case"gozero":n.gotoAngle(0,50,!1)}},onLedAction:async function(){const e=a($(this)),t=$(this).data("action");console.log("onLedAction",e,t),(await o.getLed(e)).setBrightness("on"==t?100:0)},onCalibrate:async function(){const e=a($(this));console.log("onCalibrate",e);const t=await o.getMotor(e);await t.calibrate()},onMouseUp:async function(){const e=$(this).data("action"),t=a($(this)),n=await o.getMotor(t);switch(e){case"forward":n.setPower(100);break;case"backward":n.setPower(-100)}},onMouseDown:async function(){const e=a($(this));(await o.getMotor(e)).setPower(0)},onInfo:function(){const e=$(this).closest("tr").index(),{portId:t,deviceTypeName:n}=c.model.internalDevices[e];i(t,n)},onInfo2:function(){const e=$(this).closest("tr").index(),{portId:t,deviceTypeName:n}=c.model.externalDevices[e];i(t,n)}}});!async function(){const e=o.getHubDevices();console.log("devices",e);const t=[],n=[];for(const o of e){const{portId:e,type:i,name:a}=o;if(e<50){const t={name:a,portId:e,type:i};n.push(t)}else t.push({portId:e,type:i})}c.setData({internalDevices:t,externalDevices:n})}()}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>MODE</th>\n                <th>CAPABILITIES</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>SI</th>\n                <th>VALUE FORMAT</th>\n                <th>Value</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes" bn-event="click.btnGet: onBtnGet">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="getCapabilites"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n                <td>\n                    dataType: <span bn-text="$scope.$i.VALUE_FORMAT.dataType"></span><br>\n                    numValues: <span bn-text="$scope.$i.VALUE_FORMAT.numValues"></span>\n                </td>\n                <td>\n                    <div bn-if="isInput">\n                        <button class="w3-btn w3-green btnGet">Get</button>\n                        <span></span>\n                    </div>\n\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{device:null},init:function(e,t,n){const o=this.props.device,i=$$.viewController(e,{data:{modes:[],capabilities:"",isInput:function(e){return 0!=(1&e.$i.mode)},getCapabilites:function(e){return 2==e.$i.mode?"OUT":1==e.$i.mode?"IN":3==e.$i.mode?"IN/OUT":void 0}},events:{onBtnGet:async function(e){const t=$(this).closest("tr").index();console.log("onBtnGet",t);const n=await o.getValue(t);console.log("values",n),$(this).closest("td").find("span").text(JSON.stringify(n,null,4))}}});!async function(){const{modes:e,capabilities:t}=await o.readInfo();i.setData({modes:e,capabilities:t})}()}});