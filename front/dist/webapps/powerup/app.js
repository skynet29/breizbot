$$.service.registerService("actionSrv",{deps:["hub"],init:function(n,e){let t={};const o=new EventEmitter2;async function a(n,t,o){if("SLEEP"==t.type)return void await $$.util.wait(t.time);const a=n.find(n=>n.name==t.hub);if(!a)return`Hub ${t.hub} is not connected`;if("POWER"==t.type){const n=await a.getMotor(e.PortMap[t.port]);await n.setPower(t.power*o)}else if("BRIGHTNESS"==t.type){const n=await a.getLed(e.PortMap[t.port]);await n.setBrightness(t.brightness*o)}else if("SPEED"==t.type){const n=await a.getMotor(e.PortMap[t.port]);await n.setSpeed(t.speed*o)}else if("SPEEDTIME"==t.type){const n=await a.getMotor(e.PortMap[t.port]);await n.setSpeedForTime(t.speed,t.time,t.waitFeedback,t.brakeStyle)}else if("ROTATE"==t.type){const n=await a.getMotor(e.PortMap[t.port]);await n.rotateDegrees(t.angle*o,t.speed,t.waitFeedback)}else if("POSITION"==t.type){const n=await a.getMotor(e.PortMap[t.port]);await n.gotoAngle(t.angle*o,t.speed,t.waitFeedback)}else if("ZERO"==t.type){const n=await a.getMotor(e.PortMap[t.port]);await n.resetZero()}else if("COLOR"==t.type){const n=await a.getRgbLed(e.PortMap.HUB_LED);await n.setColor(t.color)}else if("RGB"==t.type){const n=await a.getRgbLed(e.PortMap.HUB_LED);await n.setRGBColor(t.red,t.green,t.blue)}else if("CALIBRATE"==t.type){const n=await a.getMotor(e.PortMap[t.port]);await n.calibrate()}else if("DBLSPEED"==t.type){const n=e.PortMap[t.port1],i=e.PortMap[t.port2],s=await a.getDblMotor(n,i);await s.setSpeed(t.speed1*o,t.speed2*o)}else if("DBLSPEEDTIME"==t.type){const n=e.PortMap[t.port1],o=e.PortMap[t.port2],i=await a.getDblMotor(n,o);await i.setSpeedForTime(t.speed1,t.speed2,t.time,t.waitFeedback,t.brakeStyle)}else if("DBLROTATE"==t.type){const n=e.PortMap[t.port1],i=e.PortMap[t.port2],s=await a.getDblMotor(n,i);await s.rotateDegrees(t.angle,t.speed1*o,t.speed2*o,t.waitFeedback,t.brakeStyle)}else{if("DBLPOSITION"!=t.type)return`type ${t.type} not implemented`;{const n=e.PortMap[t.port1],i=e.PortMap[t.port2],s=await a.getDblMotor(n,i);await s.gotoAngle(t.angle1,t.angle2,t.speed*o,t.waitFeedback,t.brakeStyle)}}return null}return{execAction:async function n(e,i,s,l){console.log("execAction",e,s,l);const c=i.find(n=>n.name==s);let{steps:b}=c;Array.isArray(b)||(b=[c]);for(const s of b)if("SETVAR"==s.type){console.log("SETVAR",s);const{varName:n,varValue:e}=s;t[n]=e,o.emit("varChange",{varName:n,varValue:e})}else if("TESTVAR"==s.type){const{varName:o}=s,a=t[o];a==s.varValue&&"None"!=s.eqAction&&n(e,i,s.eqAction,1),a!=s.varValue&&"None"!=s.neqAction&&n(e,i,s.neqAction,1)}else{const n=await a(e,s,l);if(null!=n){$.notify(n,"error");break}}},on:o.on.bind(o),getVariables:function(){return Object.entries(t).map(([n,e])=>({name:n,value:e}))},resetVariables:function(){t={},o.emit("varChange")}}}}),$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <div class="left">\n        \n        <button bn-event="click: onNewConfig" bn-icon="fa fa-file" title="Reset Config"></button>\n\n        <button bn-event="click: onConfig" bn-icon="fa fa-folder-open" title="Open Config"></button>\n\n        <button bn-event="click: onSaveConfig" bn-icon="fa fa-save" title="Save current config"></button>\n\n        <div bn-show="currentConfig">\n            <label>Current Config:</label>\n            <span bn-text="currentConfig"></span>\n        </div>\n\n    </div>\n\n    <div></div>\n</div>\n\n<div class="toolbar">\n\n    <div class="left">\n        <button bn-event="click: onConnect">Connect to HUB</button>\n        \n        <button bn-event="click: onActions">Actions</button>\n\n        <button bn-event="click: onGamePad" bn-show="gamepadConnected">Gamepad</button>\n\n\n    </div>\n</div>\n\n<div bn-show="hasVariables" class="variables">\n    <table class="w3-table-all">\n        <thead>\n            <th>Variable Name</th>\n            <th>Value</th>\n        </thead>\n        <tbody bn-each="variables">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.value"></td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Hub</th>\n                <th>Actions</th>\n                <th>Battery Level</th>\n                <th>Angle</th>\n                <th>Address</th>\n            </tr>\n        </thead>\n        <tbody bn-each="hubDevices" bn-event="click.btnShutdown: onShutDown, click.btnInfo: onInfo, comboboxchange.combo: onHubChange">\n            <tr>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: hubs}" bn-val="$scope.$i.hubId" class="combo"></div>\n                </td>\n                <td>\n                    <button class="btnShutdown">Shutdown</button>\n                    <button class="btnInfo">Info</button>\n                </td>\n                <td bn-text="$scope.$i.batteryLevel"></td>\n                <td >\n                    <div class="angleInfo">\n                        <label>Roll</label>\n                        <span bn-text="$scope.$i.tilt.roll"></span>\n                    </div>\n                    <div class="angleInfo">\n                        <label>Pitch</label>\n                        <span bn-text="$scope.$i.tilt.pitch"></span>\n                    </div>\n                    <div class="angleInfo">\n                        <label>Yaw</label>\n                        <span bn-text="$scope.$i.tilt.yaw"></span>\n                    </div>                    \n                </td>\n                <td bn-text="$scope.$i.address"></td>\n            </tr>\n        </tbody>\n    </table>\n\n</div>',deps:["breizbot.pager","hub","breizbot.gamepad","actionSrv","breizbot.http"],props:{},init:async function(n,e,t,o,a,i){let s={actions:[],mappings:{}};n.find("button").addClass("w3-btn w3-blue");const l={};let c=1,b=null,d="";a.on("varChange",n=>{console.log("onVarChange",n);const e=a.getVariables();console.log("variables",e),r.setData({variables:e})});const r=$$.viewController(n,{data:{currentConfig:"",gamepadConnected:!1,hubDevices:[],hubs:["HUB1","HUB2"],variables:[],hasVariables:function(){return this.variables.length>0}},events:{onNewConfig:function(){s={actions:[],mappings:{}},b=null,r.setData({currentConfig:""}),a.resetVariables()},onSaveConfig:async function(){if(""==r.model.currentConfig){const n=await $$.ui.showPrompt({title:"Save Config",label:"Config Name:"});n&&(await i.post("/add",{name:n,actions:s.actions,mappings:s.mappings}),r.setData({currentConfig:n}))}else await i.post("/update",s),$.notify(`Config '${s.name}' updated`,"success")},onConfig:function(){e.pushPage("configCtrl",{title:"Configurations",props:{currentConfig:r.model.currentConfig},onReturn:function(n){s=n,r.setData({currentConfig:n.name}),b=s.mappings[d],a.resetVariables()}})},onHubChange:function(){const n=$(this).closest("tr").index(),e=$(this).getValue(),t=l[r.model.hubDevices[n].UUID];console.log("hubDevice",t),t.name=e,r.model.hubDevices[n].hubId=e},onShutDown:function(){const n=$(this).closest("tr").index(),e=r.model.hubDevices[n];l[e.UUID].shutdown()},onInfo:function(){const n=$(this).closest("tr").index(),t=r.model.hubDevices[n],o=l[t.UUID];console.log("hubDevice",o),e.pushPage("hubinfo",{title:t.hubId,props:{hubDevice:o}})},onActions:function(){e.pushPage("actionsCtrl",{title:"Actions",props:{actions:s.actions,hubDevices:Object.values(l)},onReturn:async function(n){console.log("onReturn",n),s.actions=n}})},onGamePad:function(){o.off("buttonUp",v),o.off("buttonDown",u),o.off("axe",m),e.pushPage("gamepad",{title:"Gamepad",props:{mapping:b,actions:s.actions},onBack:h,onReturn:async n=>{b=n,console.log("onReturn",b),console.log("config",s),s.mappings[n.id]=b,h()}})},onConnect:async function(){const n=await t.connect(),e=c++;l[e]=n,n.on("error",n=>{console.log(n)});const o=`HUB${r.model.hubDevices.length+1}`;n.name=o,r.model.hubDevices.push({UUID:e,hubId:o,batteryLevel:0,address:"Unknown"}),r.update(),n.on("batteryLevel",n=>{r.model.hubDevices.find(n=>n.UUID==e).batteryLevel=n.batteryLevel,r.update()}),n.on("address",n=>{console.log("address",n),r.model.hubDevices.find(n=>n.UUID==e).address=n.address,r.update()}),await n.startNotification(),n.on("disconnected",()=>{console.log("disconnected");const n=r.model.hubDevices.findIndex(n=>n.UUID==e);r.model.hubDevices.splice(n,1),r.update(),delete l[e]});const a=await n.getTiltSensor(t.PortMap.TILT_SENSOR);await a.subscribe(t.DeviceMode.TILT_POS,n=>{r.model.hubDevices.find(n=>n.UUID==e).tilt=n,r.update()},10)}}});function p(n,e){a.execAction(Object.values(l),s.actions,n,e)}function u(n){if(b){const{down:e}=b.buttons[n.id];"None"!=e&&p(e,1)}}function v(n){if(b){const{up:e,down:t}=b.buttons[n.id];"Zero"==e?"None"!=t&&p(t,0):"None"!=e&&p(e,1)}}function m(n){if(b){const{action:e}=b.axes[n.id];"None"!=e&&p(e,n.value)}}function h(){console.log("initCbk"),o.on("buttonUp",v),o.on("buttonDown",u),o.on("axe",m)}o.on("connected",n=>{console.log("gamepad connnected",n),d=n.id,b=s.mappings[d],console.log({gamepadMapping:b}),r.setData({gamepadConnected:!0}),o.checkGamePadStatus(),h()}),o.on("disconnected",n=>{console.log("gamepad disconnected"),r.setData({gamepadConnected:!1}),b=null})}}),$$.control.registerControl("stepCtrl",{template:'<form bn-event="submit: onSubmit">\n    <div class="group">\n\n        <label>Type</label>\n        <div bn-control="brainjs.combobox" bn-data="{items: actionTypes}" name="type" bn-update="comboboxchange"\n            bn-val="type"></div>\n    </div>\n    \n    <div bn-if="isSleep">\n    \n        <div class="group">\n            <label>Time (ms)</label>\n            <input type="number" required name="time" min="0">\n        </div>\n    \n    </div>\n    \n    \n    <div bn-if="isSpeed">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed</label>\n            <input type="number" required name="speed" min="-100" max="100">\n        </div>\n    </div>\n    \n    <div bn-if="isSpeedtime">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed</label>\n            <input type="number" required name="speed" min="-100" max="100">\n        </div>\n        <div class="group">\n            <label>Time (ms)</label>\n            <input type="number" required name="time" min="0">\n        </div>\n        <div class="group">\n            <label>Wait End</label>\n            <input type="checkbox" name="waitFeedback">\n        </div>\n        <div class="group">\n            <label>Braking Style</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: brakeStyles}" name="brakeStyle" bn-val="brakeStyle"></div>\n        </div>\n    </div>\n    \n    <div bn-if="isDblspeedtime">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port1</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port1" bn-val="port1"></div>\n        </div>\n    \n        <div class="group">\n            <label>Port2</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port2" bn-val="port2"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed1</label>\n            <input type="number" required name="speed1" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Speed2</label>\n            <input type="number" required name="speed2" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Time (ms)</label>\n            <input type="number" required name="time" min="0">\n        </div>\n        <div class="group">\n            <label>Wait End</label>\n            <input type="checkbox" name="waitFeedback">\n        </div>\n        <div class="group">\n            <label>Braking Style</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: brakeStyles}" name="brakeStyle" bn-val="brakeStyle"></div>\n        </div>\n    </div>\n    \n    <div bn-if="isPower">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n        <div class="group">\n            <label>Power</label>\n            <input type="number" required name="power" min="-100" max="100">\n        </div>\n    </div>\n    \n    <div bn-if="isRotate">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed</label>\n            <input type="number" required name="speed" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Angle (°)</label>\n            <input type="number" required name="angle" step="1">\n        </div>\n    \n        <div class="group">\n            <label>Wait End</label>\n            <input type="checkbox" name="waitFeedback">\n        </div>\n    \n        <div class="group">\n            <label>Braking Style</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: brakeStyles}" name="brakeStyle" bn-val="brakeStyle"></div>\n        </div>\n    </div>\n    \n    <div bn-if="isDblrotate">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port1</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port1" bn-val="port1"></div>\n        </div>\n    \n        <div class="group">\n            <label>Port2</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port2" bn-val="port2"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed1</label>\n            <input type="number" required name="speed1" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Speed2</label>\n            <input type="number" required name="speed2" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Angle (°)</label>\n            <input type="number" required name="angle" step="1">\n        </div>\n    \n        <div class="group">\n            <label>Wait End</label>\n            <input type="checkbox" name="waitFeedback">\n        </div>\n    \n        <div class="group">\n            <label>Braking Style</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: brakeStyles}" name="brakeStyle" bn-val="brakeStyle"></div>\n        </div>\n    </div>\n    \n    <div bn-if="isPosition">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed</label>\n            <input type="number" required name="speed" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Angle (°)</label>\n            <input type="number" required name="angle" step="1">\n        </div>\n    \n        <div class="group">\n            <label>Wait End</label>\n            <input type="checkbox" name="waitFeedback">\n        </div>\n    \n        <div class="group">\n            <label>Braking Style</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: brakeStyles}" name="brakeStyle" bn-val="brakeStyle"></div>\n        </div>\n    </div>\n    \n    <div bn-if="isDblposition">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port1</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port1" bn-val="port1"></div>\n        </div>\n    \n        <div class="group">\n            <label>Port2</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port2" bn-val="port2"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed</label>\n            <input type="number" required name="speed" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Angle1 (°)</label>\n            <input type="number" required name="angle1" step="1">\n        </div>\n    \n        <div class="group">\n            <label>Angle2 (°)</label>\n            <input type="number" required name="angle2" step="1">\n        </div>\n    \n        <div class="group">\n            <label>Wait End</label>\n            <input type="checkbox" name="waitFeedback">\n        </div>\n    \n        <div class="group">\n            <label>Braking Style</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: brakeStyles}" name="brakeStyle" bn-val="brakeStyle"></div>\n        </div>\n    </div>\n    \n    <div bn-if="isCalibrate">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n    </div>\n    \n    \n    <div bn-if="isZero">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>\n    \n    </div>\n    \n    <div bn-if="isColor">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Color</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ledColors}" name="color"></div>\n        </div>\n    \n    </div>\n    \n    <div bn-if="isRgb">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Red</label>\n            <input type="number" min="0" max="255" name="red">\n        </div>\n        <div class="group">\n            <label>Green</label>\n            <input type="number" min="0" max="255" name="green">\n        </div>\n        <div class="group">\n            <label>Blue</label>\n            <input type="number" min="0" max="255" name="blue">\n        </div>\n    </div>\n\n    <div bn-if="isBrightness">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port" bn-val="port"></div>\n        </div>  \n        <div class="group">\n            <label>Brightness</label>\n            <input type="number" min="0" name="brightness">\n        </div>\n\n    </div>\n    \n    <div bn-if="isDblspeed">\n        <div class="group">\n            <label>HUB</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: hubs}" name="hub"  bn-val="hub">\n            </div>\n        </div>\n        <div class="group">\n            <label>Port1</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port1" bn-val="port1"></div>\n        </div>\n    \n        <div class="group">\n            <label>Port2</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: ports}" name="port2" bn-val="port2"></div>\n        </div>\n    \n        <div class="group">\n            <label>Speed1</label>\n            <input type="number" required name="speed1" min="-100" max="100">\n        </div>\n    \n        <div class="group">\n            <label>Speed2</label>\n            <input type="number" required name="speed2" min="-100" max="100">\n        </div>\n    </div>\n\n    <div bn-if="isTestvar">\n        <div class="group">\n            <label>Variable Name</label>\n            <input type="text" name="varName" required>\n        </div>\n        <div class="group">\n            <label>If variable =</label>\n            <input type="text" name="varValue" required>\n        </div>\n        <div class="group">\n            <label>Action</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: availableActions}" name="eqAction" bn-val="eqAction"></div>\n        </div>\n        <div class="group">\n            <label>Else Action</label>\n            <div bn-control="brainjs.combobox" bn-data="{items: availableActions}" name="neqAction" bn-val="neqAction"></div>\n        </div>\n    </div>\n\n    <div bn-if="isSetvar">\n        <div class="group">\n            <label>Variable Name</label>\n            <input type="text" name="varName" required>\n        </div>\n        <div class="group">\n            <label>Value</label>\n            <input type="text" name="varValue" required>\n        </div>\n    </div>\n</form>',deps:["breizbot.pager","hub"],props:{data:null},init:function(n,e,t){let{data:o,availableActions:a}=this.props;o=o||{},a.unshift("None");const i=["SLEEP","POWER","SPEED","DBLSPEED","SPEEDTIME","DBLSPEEDTIME","ROTATE","DBLROTATE","POSITION","DBLPOSITION","CALIBRATE","ZERO","COLOR","RGB","BRIGHTNESS","TESTVAR","SETVAR"],s="ABCD".split(""),l=Object.entries(t.Color).map(([n,e])=>Object.assign({label:n,value:e})),c=Object.entries(t.BrakingStyle).map(([n,e])=>Object.assign({label:n,value:e})),b={port:o.port||"A",port1:o.port1||"A",port2:o.port2||"B",type:o.type||"SPEED",hub:o.hub||"HUB1",brakeStyle:o.brakeStyle||t.BrakingStyle.BRAKE,actionTypes:i,brakeStyles:c,ledColors:l,ports:s,states:["STATE1","STATE2","STATE3"],hubs:["HUB1","HUB2"],availableActions:a,eqAction:o.eqAction||"None",neqAction:o.neqAction||"None",state:o.state||"STATE1"};for(const n of i){b["is"+(n.charAt(0)+n.slice(1).toLowerCase())]=function(){return this.type==n}}$$.viewController(n,{data:b,events:{onSubmit:function(n){console.log("onSubmit"),n.preventDefault()}}});n.setFormData(o)}}),$$.control.registerControl("actionCtrl",{template:'<div class="scrollPanel">\n\n    <div bn-each="steps" bn-index="idx" \n        bn-event="click.removeBtn: onRemoveStep, click.upBtn: onMoveUp, click.downBtn: onMoveDown">\n\n        <div class="stepItem">\n            <div class="menubar" >\n                <div>\n                    <button bn-icon="fas fa-level-up-alt" class="upBtn" title="MoveUp"\n                        bn-show="canMoveUp"></button>\n                    <button bn-icon="fas fa-level-down-alt" class="downBtn" title="MoveDown"\n                        bn-show="canMoveDown"></button>\n                    <button bn-icon="fa fa-trash-alt" class="removeBtn" title="Remove" \n                    bn-show="showMenubar"></button>\n\n                </div>\n            </div>\n            <div bn-control="stepCtrl" bn-data="{data: $scope.$i, availableActions}"></div>\n        </div>\n\n    </div>\n</div>',deps:["breizbot.pager"],props:{steps:[],availableActions:[]},init:function(n,e){console.log("actionCtrl props",this.props);const{steps:t,availableActions:o}=this.props,a=$$.viewController(n,{data:{steps:t,availableActions:o,showMenubar:function(n){return n.idx>0},canMoveUp:function(n){return n.idx>0},canMoveDown:function(n){return n.idx<this.steps.length-1}},events:{onMoveUp:function(){const n=$(this).closest(".stepItem").index();a.model.steps=i();const e=a.model.steps[n];a.model.steps[n]=a.model.steps[n-1],a.model.steps[n-1]=e,a.update()},onMoveDown:function(){const n=$(this).closest(".stepItem").index();a.model.steps=i();const e=a.model.steps[n];a.model.steps[n]=a.model.steps[n+1],a.model.steps[n+1]=e,a.update()},onRemoveStep:function(){const n=$(this).closest(".stepItem").index();console.log("onRemoveStep",n),a.model.steps.splice(n,1),a.update()}}});function i(){const e=[];return n.find("form").each(function(){e.push($(this).getFormData())}),e}this.getButtons=function(){return{addStep:{title:"Add Step",icon:"fa fa-plus",onClick:function(){a.model.steps=i(),a.model.steps.push({}),a.update()}},apply:{title:"Apply",icon:"fas fa-check",onClick:function(){let t=!0;n.find("form").each(function(){const n=$(this).get(0);t=t&&n.reportValidity()}),t&&e.popPage(i())}}}}}}),$$.control.registerControl("actionsCtrl",{template:'<div bn-show="!hasActions" class="message">\n    No actions defined\n</div>\n\n<div class="scrollPanel" bn-show="hasActions">\n    <div bn-each="actions" class="items" bn-event="click.item: onItemClick, contextmenuchange.item:onItemContextMenu">\n        <div class="w3-card-2 item" bn-control="brainjs.contextmenu" bn-data="{\n                    items: {\n                        edit: {name: \'Edit\', icon: \'fas fa-edit\'},\n                        delete: {name: \'Remove\', icon: \'fas fa-trash-alt\'},\n                        duplicate: {name: \'Duplicate\', icon: \'fas fa-clone\'}\n                    }\n                }">\n            <div>\n                <strong bn-text="$scope.$i.name"></strong>\n            </div>\n        </div>\n    </div>\n</div>',deps:["breizbot.pager","actionSrv"],props:{actions:null,isEdition:!0,hubDevices:null},init:function(n,e,t){console.log("props",this.props);const{isEdition:o,hubDevices:a}=this.props,i=Array.from(this.props.actions||[]);o||(i.unshift({name:"Zero"}),i.unshift({name:"None"}));const s=$$.viewController(n,{data:{actions:i,hasActions:function(){return this.actions.length>0}},events:{onItemContextMenu:async function(n,t){const o=$(this).closest(".item").index(),a=s.model.actions[o];if("delete"==t.cmd&&(s.model.actions.splice(o,1),s.update()),"duplicate"==t.cmd){const n=await $$.ui.showPrompt({label:"New Name",title:"Add action"});if(null==n)return;const e=Object.assign({},a,{name:n});s.model.actions.push(e),s.update()}if("edit"==t.cmd){let{steps:n}=a;Array.isArray(n)||(n=[a]);const t=s.model.actions.map(n=>n.name);e.pushPage("actionCtrl",{title:a.name,props:{steps:n,availableActions:t},onReturn:function(n){s.model.actions[o]={name:a.name,steps:n}}})}},onItemClick:function(n){const i=$(this).closest(".item").index(),l=s.model.actions[i];o?t.execAction(a,s.model.actions,l.name,1):e.popPage(l.name)}}});o&&(this.getButtons=function(){return{addAction:{title:"Add Action",icon:"fa fa-plus",onClick:async function(){const n=await $$.ui.showPrompt({label:"Name",title:"Add action"});if(null==n)return;const t=s.model.actions.map(n=>n.name);e.pushPage("actionCtrl",{title:n,props:{steps:[{}],availableActions:t},onReturn:function(e){s.model.actions.push({name:n,steps:e}),s.update()}})}},save:{title:"Save",icon:"fa fa-check",onClick:function(){e.popPage(s.model.actions)}}}})}}),$$.control.registerControl("configCtrl",{template:'<div bn-show="!hasConfigs" class="message">\n    No configurations defined\n</div>\n\n<div class="scrollPanel" bn-show="hasConfigs">\n    <div bn-each="configs" class="items" bn-event="click.item: onItemClick, contextmenuchange.item:onItemContextMenu">\n        <div class="w3-card-2 item" bn-control="brainjs.contextmenu" bn-data="{\n                    items: {\n                        delete: {name: \'Remove\', icon: \'fas fa-trash-alt\'}\n                    }\n                }">\n            <div>\n                <strong bn-text="$scope.$i.name"></strong>\n            </div>\n        </div>\n    </div>\n</div>',deps:["breizbot.pager","breizbot.http"],props:{currentConfig:""},init:function(n,e,t){const{currentConfig:o}=this.props,a=$$.viewController(n,{data:{configs:[],hasConfigs:function(){return this.configs.length>0}},events:{onItemContextMenu:async function(n,e){const s=$(this).closest(".item").index(),l=a.model.configs[s];"delete"==e.cmd&&(l.name==o?$$.ui.showAlert({content:"Cannot delete active config",title:"Warning"}):(await t.post("/delete",l),i()))},onItemClick:function(n){const t=$(this).closest(".item").index();console.log("onItemClick",t);const o=a.model.configs[t];e.popPage(o)}}});async function i(){const n=await t.get("/");console.log({configs:n}),a.setData({configs:n})}i()}}),$$.control.registerControl("gamepad",{template:'<div>\n    <h2 bn-text="id"></h2>\n</div>\n\n<h3>Axes</h3>\n<div>\n    <table class="w3-table-all axeTable">\n        <thead>\n            <tr>\n                <th>Axe</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="axes" bn-bind="axes" bn-index="idx" bn-event="click.item: onAxeClick">\n            <tr>\n                <td bn-text="getAxeLabel"></td>\n                <td>\n                    <div bn-text="$scope.$i.action" class="item"></div>\n                </td>                \n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<h3>Buttons</h3>\n<div class="commandTable">\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Button</th>\n                <th>Down</th>\n                <th>Up</th>\n            </tr>\n        </thead>\n        <tbody bn-each="buttons" bn-bind="buttons" bn-index="idx" bn-event="click.item: onButtonClick">\n            <tr>\n                <td bn-text="getButtonLabel"></td>\n                <td>\n                    <div bn-text="$scope.$i.down" class="item" data-cmd="down">\n                    </div>\n                </td>\n                <td>\n                    <div bn-text="$scope.$i.up" class="item" data-cmd="up">\n                    </div>\n                </td>\n\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","breizbot.gamepad"],props:{mapping:null,actions:null},init:function(n,e,t){const{mapping:o,actions:a}=this.props;console.log(this.props);let i=[],s=[];const l=t.getGamepads()[0];if(null!=o&&(i=o.axes,s=o.buttons),0==i.length)for(let n=0;n<l.axes.length;n++)i.push({action:"None"});if(0==s.length)for(let n=0;n<l.buttons.length;n++)s.push({up:"None",down:"None"});function c(n){const{value:e,id:t}=n;0!=e?p.find("tr").eq(t).find("td").eq(0).addClass("pressed"):p.find("tr").eq(t).find("td").eq(0).removeClass("pressed")}function b(n){u.find("tr").eq(n.id).find("td").eq(0).addClass("pressed")}function d(n){u.find("tr").eq(n.id).find("td").eq(0).removeClass("pressed")}t.on("axe",c),t.on("buttonDown",b),t.on("buttonUp",d),this.dispose=function(){console.log("dispose"),t.off("axe",c),t.off("buttonDown",b),t.off("buttonUp",d)};const r=$$.viewController(n,{data:{id:l.id,axes:i,buttons:s,getButtonLabel:function(n){return`Button ${n.idx+1}`},getAxeLabel:function(n){return`Axe ${n.idx+1}`}},events:{onButtonClick:function(){const n=$(this).closest("tr").index(),t=$(this).data("cmd");e.pushPage("actionsCtrl",{title:"Select an action",props:{isEdition:!1,actions:a},onReturn:function(e){r.model.buttons[n][t]=e,r.update()}})},onAxeClick:function(){const n=$(this).closest("tr").index();console.log("onAxeClick",n),e.pushPage("actionsCtrl",{title:"Select an action",props:{isEdition:!1,actions:a},onReturn:function(e){r.model.axes[n].action=e,r.update()}})}}}),p=r.scope.axes,u=r.scope.buttons;this.getButtons=function(){return{check:{icon:"fa fa-check",title:"Apply",onClick:function(){e.popPage(function(){const n={id:l.id,axes:[],buttons:[]};return p.find("tr").each(function(e){const t=$(this).find(".item").text();n.axes.push({action:t})}),u.find("tr").each(function(e){const t=$(this).find('[data-cmd="up"]').text(),o=$(this).find('[data-cmd="down"]').text();n.buttons.push({up:t,down:o})}),console.log({ret:n}),n}())}}}}}}),$$.control.registerControl("hubinfo",{template:'<div class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n                <th>Value</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="\n            mousedown.motorMouseAction: onMouseUp, \n            mouseup.motorMouseAction:onMouseDown, \n            click.motorAction:onMotorAction, \n            click.ledAction: onLedAction,\n            click.portInfo: onInfo2, \n            click.calibrate:onCalibrate">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.type"></td>\n                <td>\n                    <span bn-if="isMotor" class="spanButtons">\n                        <button class="w3-btn w3-green motorMouseAction" data-action="forward">FWD</button>\n                        <button class="w3-btn w3-green motorMouseAction" data-action="backward">BKWD</button>\n                    </span>\n                    <span bn-if="isTachoMotor" class="spanButtons">\n                        <button class="w3-btn w3-green motorAction" data-action="reset">RESET</button>\n                        <button class="w3-btn w3-green motorAction" data-action="gozero">GO ZERO</button>\n                    </span>\n                    <span bn-if="isLed" class="spanButtons">\n                        <button class="w3-btn w3-green ledAction" data-action="on">ON</button>\n                        <button class="w3-btn w3-green ledAction" data-action="off">OFF</button>\n                    </span>\n\n                    <button class="w3-btn w3-blue portInfo">MODE</button>\n                </td>\n                <td>\n                    <div bn-if="isTachoMotor">\n                        <span bn-text="$scope.$i.value"></span>\n                    </div>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port ID</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-btn: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.portId"></td>\n                <td bn-text="$scope.$i.type"></td>\n                <td>\n                    <button class="w3-btn w3-blue">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub"],props:{hubDevice:null},init:function(n,e,t){const o=this.props.hubDevice;function a(n,t){e.pushPage("info",{title:t,props:{portId:n,hubDevice:o}})}function i(n){const e=n.closest("tr").index();return c.model.externalDevices[e].portId}async function s(n){console.log("attach",n);const{portId:e,name:a,type:i}=n,s={portId:e,name:a,type:i};if(c.model.externalDevices.push(s),c.update(),o.isTachoMotor(e)){(await o.getTachoMotor(e)).subscribe(t.DeviceMode.ROTATION,n=>{s.value=n,c.update()},2)}}function l(n){console.log("detach",n);const e=c.model.externalDevices.findIndex(e=>e.portId==n.portId);c.model.externalDevices.splice(e,1),c.update()}o.on("attach",s),o.on("detach",l),this.dispose=async function(){console.log("hubInfo dispose"),o.off("attach",s),o.off("detach",l);const n=o.getHubDevices();console.log("devices",n);for(const e of n){const{portId:n}=e;if(n<50&&o.isTachoMotor(n)){const e=await o.getTachoMotor(n);await e.setMode(t.DeviceMode.ROTATION,!1)}}};const c=$$.viewController(n,{data:{internalDevices:[],externalDevices:[],isMotor:function(n){return o.isMotor(n.$i.portId)},isLed:function(n){return o.isLed(n.$i.portId)},isTachoMotor:function(n){return o.isTachoMotor(n.$i.portId)}},events:{onMotorAction:async function(){const n=i($(this)),e=$(this).data("action");console.log("onMotorAction",n,e);const t=await o.getTachoMotor(n);switch(e){case"reset":t.resetZero();break;case"gozero":t.gotoAngle(0,50,!1)}},onLedAction:async function(){const n=i($(this)),e=$(this).data("action");console.log("onLedAction",n,e),(await o.getLed(n)).setBrightness("on"==e?100:0)},onCalibrate:async function(){const n=i($(this));console.log("onCalibrate",n);const e=await o.getMotor(n);await e.calibrate()},onMouseUp:async function(){const n=$(this).data("action"),e=i($(this)),t=await o.getMotor(e);switch(n){case"forward":t.setPower(100);break;case"backward":t.setPower(-100)}},onMouseDown:async function(){const n=i($(this));(await o.getMotor(n)).setPower(0)},onInfo:function(){const n=$(this).closest("tr").index(),{portId:e,deviceTypeName:t}=c.model.internalDevices[n];a(e,t)},onInfo2:function(){const n=$(this).closest("tr").index(),{portId:e,deviceTypeName:t}=c.model.externalDevices[n];a(e,t)}}});!async function(){const n=o.getHubDevices();console.log("devices",n);const e=[],a=[];for(const i of n){const{portId:n,type:s,name:l}=i;if(n<50){const e={name:l,portId:n,type:s};if(a.push(e),o.isTachoMotor(n)){const a=await o.getTachoMotor(n);await a.subscribe(t.DeviceMode.ROTATION,n=>{e.value=n,c.update()},2)}}else e.push({portId:n,type:s})}c.setData({internalDevices:e,externalDevices:a})}()}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>MODE</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>PCT</th>\n                <th>SI</th>\n                <th>VALUE FORMAT</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n                <td>\n                    dataType: <span bn-text="$scope.$i.VALUE_FORMAT.dataType"></span><br>\n                    numValues: <span bn-text="$scope.$i.VALUE_FORMAT.numValues"></span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(n,e,t){const{portId:o}=this.props,a=this.props.hubDevice,i=$$.viewController(n,{data:{modes:[],capabilities:""},events:{}});!async function(){const n=await a.getPortInformation(o);console.log("portInfo",n);const{modes:e,capabilities:t}=n;i.setData({modes:e,capabilities:t})}()}});