$$.service.registerService("hub",{init:function(){let t=null,n={};const e=new EventEmitter2,o={},a={},i={},c="00001623-1212-efde-1623-785feabcd123",s="00001624-1212-efde-1623-785feabcd123",r=function(...t){0},{getEnumName:d}=$$.util,u={DETACHED_IO:0,ATTACHED_IO:1,ATTACHED_VIRTUAL_IO:2},l=d(u),E={HUB_PROPERTIES:1,HUB_ACTIONS:2,HUB_ALERTS:3,HUB_ATTACHED_IO:4,GENERIC_ERROR_MESSAGES:5,HW_NETWORK_COMMANDS:8,FW_UPDATE_GO_INTO_BOOT_MODE:16,FW_UPDATE_LOCK_MEMORY:17,FW_UPDATE_LOCK_STATUS_REQUEST:18,FW_LOCK_STATUS:19,PORT_INFORMATION_REQUEST:33,PORT_MODE_INFORMATION_REQUEST:34,PORT_INPUT_FORMAT_SETUP_SINGLE:65,PORT_INPUT_FORMAT_SETUP_COMBINEDMODE:66,PORT_INFORMATION:67,PORT_MODE_INFORMATION:68,PORT_VALUE_SINGLE:69,PORT_VALUE_COMBINEDMODE:70,PORT_INPUT_FORMAT_SINGLE:71,PORT_INPUT_FORMAT_COMBINEDMODE:72,VIRTUAL_PORT_SETUP:97,PORT_OUTPUT_COMMAND:129,PORT_OUTPUT_COMMAND_FEEDBACK:130},T=(d(E),{UNKNOWN:0,SIMPLE_MEDIUM_LINEAR_MOTOR:1,TRAIN_MOTOR:2,LIGHT:8,VOLTAGE_SENSOR:20,CURRENT_SENSOR:21,PIEZO_BUZZER:22,HUB_LED:23,TILT_SENSOR:34,MOTION_SENSOR:35,COLOR_DISTANCE_SENSOR:37,MEDIUM_LINEAR_MOTOR:38,MOVE_HUB_MEDIUM_LINEAR_MOTOR:39,MOVE_HUB_TILT_SENSOR:40,DUPLO_TRAIN_BASE_MOTOR:41,DUPLO_TRAIN_BASE_SPEAKER:42,DUPLO_TRAIN_BASE_COLOR_SENSOR:43,DUPLO_TRAIN_BASE_SPEEDOMETER:44,TECHNIC_LARGE_LINEAR_MOTOR:46,TECHNIC_XLARGE_LINEAR_MOTOR:47,TECHNIC_MEDIUM_ANGULAR_MOTOR:48,TECHNIC_LARGE_ANGULAR_MOTOR:49,TECHNIC_MEDIUM_HUB_GEST_SENSOR:54,REMOTE_CONTROL_BUTTON:55,REMOTE_CONTROL_RSSI:56,TECHNIC_MEDIUM_HUB_ACCELEROMETER:57,TECHNIC_MEDIUM_HUB_GYRO_SENSOR:58,TECHNIC_MEDIUM_HUB_TILT_SENSOR:59,TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR:60,TECHNIC_COLOR_SENSOR:61,TECHNIC_DISTANCE_SENSOR:62,TECHNIC_FORCE_SENSOR:63,TECHNIC_3X3_COLOR_LIGHT_MATRIX:64,TECHNIC_SMALL_ANGULAR_MOTOR:65,MARIO_ACCELEROMETER:71,MARIO_BARCODE_SENSOR:73,MARIO_PANTS_SENSOR:74,TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY:75,TECHNIC_LARGE_ANGULAR_MOTOR_GREY:76,VIRTUAL_DEVICE:100}),O=d(T),_=d({ACK:1,MACK:2,BUFFER_OVERFLOW:3,TIMEOUT:4,COMMAND_NOT_RECOGNIZED:5,INVALID_USE:6,OVERCURRENT:7,INTERNAL_ERROR:8}),R={ADVERTISING_NAME:1,BUTTON_STATE:2,FW_VERSION:3,HW_VERSION:4,RSSI:5,BATTERY_VOLTAGE:6,BATTERY_TYPE:7,MANUFACTURER_NAME:8,RADIO_FIRMWARE_VERSION:9,LWP_PROTOCOL_VERSION:10,SYSTEM_TYPE_ID:11,HW_NETWORK_ID:12,PRIMARY_MAC_ADDRESS:13,SECONDARY_MAC_ADDRESS:14,HW_NETWORK_FAMILY:15},b=d(R),p={NAME:0,RAW:1,PCT:2,SI:3,SYMBOL:4,MAPPING:5,USED_INTERNALLY:6,MOTOR_BIAS:7,CAPABILITY_BITS:8,VALUE_FORMAT:128},I=d(p),A={A:0,B:1,C:2,D:3,HUB_LED:50,CURRENT_SENSOR:59,VOLTAGE_SENSOR:60,ACCELEROMETER:97,GYRO_SENSOR:98,TILT_SENSOR:99},N={POWER:0,SPEED:1,ROTATION:2,ABSOLUTE:3,COLOR:0,RGB:1,TILT_POS:0},f={FLOAT:0,HOLD:126,BRAKE:127},m=d(A),M={};M[E.HUB_ATTACHED_IO]=function(t){const o=t.getUint8(3),a=t.getUint8(4),i=a?t.getUint16(5,!0):0,c=O[i]||"Unknown",s=l[a];if(r("handlePortMsg",{portId:o,eventName:s,deviceTypeName:c}),a==u.ATTACHED_IO)n[o]=i,e.emit("attach",{portId:o,deviceTypeName:c});else if(a==u.DETACHED_IO)delete n[o],e.emit("detach",{portId:o});else if(a==u.ATTACHED_VIRTUAL_IO){const a=m[t.getUint8(7)],i=m[t.getUint8(8)];m[o]=`${a}_${i}`,n[o]=100,r({portIdA:a,portIdB:i}),e.emit("attach",{portId:o,deviceTypeName:"Virtual Port"})}},M[E.GENERIC_ERROR_MESSAGES]=function(t){const n=t.getUint8(3),o=t.getUint8(4);r({cmdType:n,errorCode:_[o]}),e.emit("error",{cmdType:n,errorCode:_[o]})},M[E.HUB_PROPERTIES]=function(t){const n=t.getUint8(3);if(r({property:b[n]}),n==R.BATTERY_VOLTAGE){const n=t.getUint8(5);r({batteryLevel:n}),e.emit("batteryLevel",{batteryLevel:n})}else if(n==R.BUTTON_STATE){const n=t.getUint8(5);r({buttonState:n}),e.emit("buttonState",{buttonState:n})}},M[E.PORT_OUTPUT_COMMAND_FEEDBACK]=function(t){for(let n=3;n<t.byteLength;n+=2){const e=t.getUint8(n),o=t.getUint8(n+1);if(r({portId:e,feedback:o}),10==o){const{cbk:t}=i[e].shift();"function"==typeof t&&t();const n=i[e][0];n&&(r("envoie cmd mise en attente"),g(n.buffer))}}},M[E.PORT_INFORMATION]=function(t){const n=t.getUint8(3);let e=t.getUint8(5);const a=t.getUint8(6),i=t.getUint16(7,!0),c=t.getUint16(9,!0);r(`Port ${n}, capabilities ${e}, total modes ${a}, \n                input modes ${i}, output modes ${c}`);const s="output,input,logical combinable, logical synchronisable".split(",");let d=[];for(let t=0;t<4;t++)e>>t&1&&d.push(s[t]);const u={portId:n,capabilities:d.join(", "),count:a,input:i,output:c},l=o[n];"function"==typeof l&&l(u)},M[E.PORT_MODE_INFORMATION]=function(t){const n=t.getUint8(3),e=t.getUint8(4),a=t.getUint8(5),i={portId:n,mode:e,type:I[a]};switch(a){case p.NAME:i.name=S(t.buffer.slice(6,t.byteLength));break;case p.RAW:case p.PCT:case p.SI:i.min=t.getFloat32(6,!0),i.max=t.getFloat32(10,!0);break;case p.SYMBOL:i.symbol=S(t.buffer.slice(6,t.byteLength));break;case p.VALUE_FORMAT:i.numValues=t.getUint8(6),i.dataType=["8bit","16bit","32bit","float"][t.getUint8(7)],i.totalFigures=t.getUint8(8),i.decimals=t.getUint8(9)}r("portModeInformation",i);const c=o[n];"function"==typeof c&&(c(i),delete o[n])},M[E.PORT_VALUE_SINGLE]=function(t){const e=t.getUint8(3),o=n[e],i=U[o];if("function"==typeof i&&null!=a[e]){const{mode:n,cbk:o}=a[e],c=i(n,t);"function"==typeof o&&o({mode:n,value:c,portId:e})}};const U={};function C(t,n){let e;switch(t){case N.ABSOLUTE:e=n.getInt16(4,!0);break;case N.ROTATION:e=n.getInt32(4,!0);break;case N.SPEED:e=n.getInt8(4)}return e}function S(t){const n=new Uint8Array(t);let e="";for(let t=0;t<n.byteLength&&0!=n[t];t++)e+=String.fromCharCode(n[t]);return e}function w(t){for(const[n,e]of Object.entries(m))if(e==t)return n;return-1}function h(t,...n){const e=n.flat(2),o=e.length+3,a=new ArrayBuffer(o),i=new Uint8Array(a);return i[0]=o,i[1]=0,i[2]=t,i.set(e,3),a}function g(n){return t.writeValueWithoutResponse(n)}function L(t,...n){return g(h(t,n))}function D(t,n,e=1,o=null){return a[t]={mode:n,cbk:o},L(E.PORT_INPUT_FORMAT_SETUP_SINGLE,t,n,function(t){const n=new Uint8Array(4);return new DataView(n.buffer).setUint32(0,t,!0),Array.from(n)}(e),1)}function v(t,n){return L(E.VIRTUAL_PORT_SETUP,1,t,n)}function P(t,n,e){return new Promise(async a=>{await L(E.PORT_MODE_INFORMATION_REQUEST,t,n,e),o[t]=a})}async function y(t,...n){return r("writePortCommand",{portId:t}),new Promise(async e=>{const o=h(E.PORT_OUTPUT_COMMAND,t,17,n);null==i[t]&&(i[t]=[]),0==i[t].length?(i[t].push({buffer:o,cbk:e}),await g(o)):(r("Cmd mise en attente"),i[t].push({buffer:o,cbk:e}))})}async function B(t,n,e){return new Promise(async o=>{await D(t,n,1,n=>{r("waitTestValue",n),e(n.value)&&(delete a[t],o())})})}U[T.TECHNIC_LARGE_LINEAR_MOTOR]=C,U[T.TECHNIC_LARGE_ANGULAR_MOTOR_GREY]=C,U[T.TECHNIC_MEDIUM_HUB_TILT_SENSOR]=function(t,n){let e;switch(t){case N.TILT_POS:e={yaw:n.getInt16(4,!0),pitch:n.getInt16(6,!0),roll:n.getInt16(8,!0)}}return e};const $=100;function H(t){const n=new Uint8Array(4);return new DataView(n.buffer).setInt32(0,t,!0),Array.from(n)}function G(t,n,...e){return y(t,81,n,e)}function x(t){!function(t){t.byteLength,t.getUint8(0);const n=t.getUint8(2),e=M[n];"function"==typeof e&&e(t)}(t.target.value)}function F(){r("onGattServerDisconnected"),e.emit("disconnected")}return{connect:async function(){r("connect"),n={};const e=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:[c]});e.addEventListener("gattserverdisconnected",F);const o=await e.gatt.connect();r("Connected");const a=await o.getPrimaryService(c);(t=await a.getCharacteristic(s)).addEventListener("characteristicvaluechanged",x),await t.startNotifications(),await L(E.HUB_PROPERTIES,R.BUTTON_STATE,2)},getHubDevices:function(){const t={};for(const[e,o]of Object.entries(n))t[e]=O[o];return t},shutdown:function(){return L(E.HUB_ACTIONS,1)},getDeviceType:function(t){return O[n[t]]},subscribe:D,waitTestValue:B,createVirtualPort:v,getPortInformation:async function(t){const n=await function(t){return new Promise(async n=>{await L(E.PORT_INFORMATION_REQUEST,t,1),o[t]=n})}(t),{capabilities:e,count:a,output:i,input:c}=n,s=Math.max(c,i),r=[];for(let n=0;n<a;n++){const e={};if(s>>n){let o;o=await P(t,n,p.NAME),e.name=o.name,e[(o=await P(t,n,p.RAW)).type]={min:o.min,max:o.max},e[(o=await P(t,n,p.PCT)).type]={min:o.min,max:o.max},e[(o=await P(t,n,p.SI)).type]={min:o.min,max:o.max},o=await P(t,n,p.SYMBOL),e.unit=o.symbol,o=await P(t,n,p.VALUE_FORMAT);const{numValues:a,dataType:i,totalFigures:c,decimals:s}=o;e[o.type]={numValues:a,dataType:i,totalFigures:c,decimals:s}}r.push(e)}return{modes:r,capabilities:e}},getPortIdFromName:w,on:e.on.bind(e),Motor:function(t){return{setPower:function(n){return G(t,N.POWER,n)},setSpeed:function(n){return y(t,7,n,$,0)},rotateDegrees:function(n,e,o=f.BRAKE){return y(t,11,H(n),e,$,o)},gotoAngle:function(n,e,o=f.BRAKE){return y(t,13,H(n),e,$,o)},setSpeedForTime:function(n,e,o=f.BRAKE){return y(t,9,function(t){const n=new Uint8Array(2);return new DataView(n.buffer).setInt16(0,t,!0),Array.from(n)}(e),n,$,o)},resetZero:function(){return G(t,N.ROTATION,0,0,0,0)},waitSpeed:function(n){return B(t,N.SPEED,n)}}},DoubleMotor:function(t,n){const e=`${m[t]}_${m[n]}`;return{create:function(){return v(t,n)},setSpeed:function(t,n){return y(w(e),8,t,n,$,0)}}},Led:function(t){return{setColor:async function(n){return await D(t,N.COLOR),G(t,N.COLOR,n)},setRGBColor:async function(n,e,o){return await D(t,N.RGB),G(t,N.RGB,n,e,o)}}},Color:{BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,CYAN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:255},PortMap:A,PortMapNames:m,DeviceMode:N,BrakingStyle:f}}}),$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <div class="left">\n        <button  \n            bn-event="click: onConnect"\n            bn-show="!connected"\n        >Connect to HUB</button>\n    \n        <button  \n            bn-event="click: onShutdown"\n            bn-show="connected"\n        >Shutdown</button>\n    \n        <button  \n            bn-event="click: onCalibrate"\n            bn-show="connected"\n        >Calibrate</button>\n\n        <button  \n            bn-event="click: onChangeMode"\n            bn-show="isInit"\n        >Change Mode</button>\n        \n        <button  \n            bn-event="click: onHubInfo"\n            bn-show="connected"\n        >Info</button>\n\n        <button  \n            bn-event="click: onGamePad"\n            bn-show="showGamepadButton"\n            bn-icon="fas fa-gamepad"\n        ></button>\n\n    </div>\n    <div bn-show="connected" class="mode">\n        <div>Max Speed:<span bn-text="fmtMaxSpeed"></span></div>\n        <div>Mode: <span bn-text="mode"></span></div>\n    </div>\n</div>\n\n<div class="controlBar" bn-event="mousedown.w3-btn: onButtonDown, mouseup.w3-btn: onButtonUp, touchstart.w3-btn: onButtonDown, touchend.w3-btn: onButtonUp"\n    bn-show="isInit">\n    <div class="controlBarItem1">\n        <div class="top">\n            <button  bn-icon="fas fa-angle-up" data-cmd="2"></button>\n        </div>\n        <div class="middle">\n            <button  bn-icon="fas fa-angle-left" data-cmd="3"></button>\n            <button  bn-icon="fas fa-angle-right" data-cmd="4"></button>\n        </div>\n        <div class="bottom">\n            <button  bn-icon="fas fa-angle-down" data-cmd="1"></button>\n        </div>\n    \n    </div>\n    <div class="controlBarItem2">\n        <div class="top">\n            <button  bn-icon="fas fa-angle-up" data-cmd="5"></button>\n        </div>\n        <div class="bottom">\n            <button  bn-icon="fas fa-angle-down" data-cmd="6"></button>\n        </div>\n    \n    </div>\n    \n</div>\n\n\n',deps:["breizbot.pager","hub","breizbot.gamepad","breizbot.appData"],props:{},init:async function(t,n,e,o,a){let i={};const c=a.getData();console.log("appData",c);const s=e.Motor(e.PortMap.A),r=e.Motor(e.PortMap.B),d=e.Motor(e.PortMap.C),u=e.Motor(e.PortMap.D),l=e.DoubleMotor(e.PortMap.C,e.PortMap.D),E=e.Led(e.PortMap.HUB_LED),T=[{name:"Change Mode",fn:p},{name:"Move Forward",mode:"RUNNING",value:[-100,-100],key:2},{name:"Move Backward",mode:"RUNNING",value:[100,100],key:1},{name:"Move Left",mode:"RUNNING",value:[-100,100],key:3},{name:"Move Right",mode:"RUNNING",value:[100,-100],key:4},{name:"Arm Up",mode:"MANIPULATOR",motor:d,value:-100,key:1},{name:"Arm Down",mode:"MANIPULATOR",motor:d,value:100,key:2},{name:"Elbow Up",mode:"MANIPULATOR",motor:u,value:100,key:3},{name:"Elbow Down",mode:"MANIPULATOR",motor:u,value:-100,key:4},{name:"Hand Open",motor:r,value:-100,key:5},{name:"Hand Close",motor:r,value:100,key:6}];async function O(t){if(null!=t){console.log(t);const{motor:n,value:e,fn:o}=t;if("function"==typeof o)o();else if(Array.isArray(e)){const[t,n]=e;await l.setSpeed(t,n)}else await n.setSpeed(e)}}async function _(t){if(null!=t){const{value:n,motor:e}=t;Array.isArray(n)?await l.setSpeed(0,0):null!=e&&await e.setSpeed(0)}}function R(t){const{mode:n}=I.model,e=T.find(e=>(null==e.mode||e.mode==n)&&e.key==t);return e||null}function b(t){const{mode:n}=I.model,e=T.find(e=>(null==e.mode||e.mode==n)&&e.button==t);return e||null}async function p(){const{mode:t}=I.model;await l.setSpeed(0,0),"RUNNING"==t?(await E.setColor(e.Color.YELLOW),await s.rotateDegrees(180,50),await E.setColor(e.Color.GREEN),I.setData({mode:"MANIPULATOR"})):"MANIPULATOR"==t&&(await E.setColor(e.Color.YELLOW),await s.rotateDegrees(180,-50),await E.setColor(e.Color.BLUE),I.setData({mode:"RUNNING"}))}o.on("buttonDown",t=>{O(b(t.id))}),o.on("buttonUp",t=>{_(b(t.id))}),e.on("disconnected",()=>{I.setData({connected:!1,mode:"UNKNOWN"})}),e.on("error",t=>{console.log(t)}),e.on("batteryLevel",t=>{const{batteryLevel:n}=t;I.setData({batteryLevel:n})}),t.find("button").addClass("w3-btn w3-blue");const I=$$.viewController(t,{data:{connected:!1,batteryLevel:0,mode:"UNKNOWN",maxSpeed:100,gamepadConnected:!1,fmtMaxSpeed:function(){return this.maxSpeed.toLocaleString().padStart(4)},isInit:function(){return this.connected&&["RUNNING","MANIPULATOR"].includes(this.mode)},showGamepadButton:function(){return this.connected&&this.gamepadConnected}},events:{onGamePad:function(){n.pushPage("gamepad",{title:"Gamepad",props:{actions:T},onReturn:async t=>{console.log("onReturn",t);const n=o.getGamepads()[0].id;c[n]=t,await a.saveData(c)}})},onButtonDown:function(){O(R($(this).data("cmd")))},onButtonUp:function(){_(R($(this).data("cmd")))},onConnect:async function(){await e.connect(),I.setData({connected:!0}),await l.create()},onCalibrate:async function(){console.log("onCalibrate"),I.setData({mode:"CALIBRATING"}),console.log("step 1"),await E.setColor(e.Color.RED),await s.setSpeed(-20),await $$.util.wait(200),await s.setSpeed(20),console.log("step 11"),await s.waitSpeed(t=>t>5),console.log("step 2"),await s.waitSpeed(t=>t<6),console.log("step 3"),await s.setPower(0),await $$.util.wait(300),await s.rotateDegrees(-220,-20),await E.setColor(e.Color.BLUE),I.setData({mode:"RUNNING"})},onChangeMode:p,onHubInfo:async function(){console.log("onHubInfo"),n.pushPage("hubinfo",{title:"Hub Info",props:{devices:i}})},onShutdown:async function(){await e.shutdown()}}});o.on("connected",t=>{console.log("gamepad connnected",t);const n=c[t.id];if(n)for(const{actionId:t,button:e}of n)T[t].button=e;I.setData({gamepadConnected:!0}),o.checkGamePadStatus()}),o.on("disconnected",t=>{console.log("gamepad disconnected"),I.setData({gamepadConnected:!1})})}}),$$.control.registerControl("gamepad",{template:'<div>\n    <h2 bn-text="id"></h2>\n</div>\n\n<div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Action</th>\n                <th>Button</th>\n                <th>Mode</th>\n            </tr>\n        </thead>\n        <tbody bn-each="actions">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td>\n                    <div bn-control="brainjs.combobox" bn-data="{items: buttons}" bn-val="$scope.$i.button"></div>\n                </td>\n                <td bn-text="$scope.$i.mode"></td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","breizbot.gamepad"],props:{actions:[]},init:function(t,n,e){const{actions:o}=this.props;console.log({actions:o});const a=e.getGamepads()[0],i=[];for(let t=0;t<a.buttons.length;t++)i.push({label:`Button ${t+1}`,value:t});$$.viewController(t,{data:{id:a.id,actions:o,buttons:i},events:{}});this.getButtons=function(){return{check:{icon:"fa fa-check",title:"Apply",onClick:function(){n.popPage(function(){const n=[];return t.find(".brainjs-combobox").each(function(t){const e=$(this).getValue();null!=e&&(o[t].button=e,n.push({actionId:t,button:e}))}),n}())}}}}}}),$$.control.registerControl("hubinfo",{template:'<div class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="mousedown.action: onMouseUp, mouseup.action:onMouseDown, click.portInfo: onInfo2">\n            <tr>\n                <td bn-text="$scope.$i.portName"></td>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-btn w3-green action" data-action="forward">FWD</button>\n                    <button class="w3-btn w3-green action" data-action="backward">BKWD</button>\n                    <button class="w3-btn w3-blue portInfo">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-btn: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-btn w3-blue">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub"],props:{},init:function(t,n,e){const o=e.getHubDevices();console.log("devices",o);const a=[],i=[];for(const[t,n]of Object.entries(o)){const o=parseInt(t);o<50?i.push({portName:e.PortMapNames[o],portId:o,deviceTypeName:n}):a.push({portId:o,deviceTypeName:n})}function c(t,e){n.pushPage("info",{title:e,props:{portId:t}})}function s(t){const n=t.closest("tr").index();return r.model.externalDevices[n].portId}e.on("attach",t=>{console.log("attach",t);const{portId:n,deviceTypeName:e}=t;o[n]=e}),e.on("detach",t=>{console.log("detach",t),delete o[t.portId]});const r=$$.viewController(t,{data:{internalDevices:a,externalDevices:i},events:{onMouseUp:function(){const t=$(this).data("action"),n=s($(this));switch(t){case"forward":e.Motor(n).setPower(100);break;case"backward":e.Motor(n).setPower(-100)}},onMouseDown:function(){const t=s($(this));e.Motor(t).setPower(0)},onInfo:function(){const t=$(this).closest("tr").index(),{portId:n,deviceTypeName:e}=r.model.internalDevices[t];c(n,e)},onInfo2:function(){const t=$(this).closest("tr").index(),{portId:n,deviceTypeName:e}=r.model.externalDevices[t];c(n,e)}}})}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>MODE</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>PCT</th>\n                <th>SI</th>\n                <th>VALUE FORMAT</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n                <td>\n                    dataType: <span bn-text="$scope.$i.VALUE_FORMAT.dataType"></span><br>\n                    numValues: <span bn-text="$scope.$i.VALUE_FORMAT.numValues"></span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(t,n,e){const{portId:o}=this.props,a=$$.viewController(t,{data:{modes:[],capabilities:""},events:{}});!async function(){const t=await e.getPortInformation(o);console.log("portInfo",t);const{modes:n,capabilities:i}=t;a.setData({modes:n,capabilities:i})}()}});