$$.service.registerService("hub",{init:function(){let t=null,n={};const e=new EventEmitter2,o={},a={},i={},c="00001623-1212-efde-1623-785feabcd123",s="00001624-1212-efde-1623-785feabcd123",r=function(...t){0},{getEnumName:u}=$$.util,l={DETACHED_IO:0,ATTACHED_IO:1,ATTACHED_VIRTUAL_IO:2},E=u(l),d={HUB_PROPERTIES:1,HUB_ACTIONS:2,HUB_ALERTS:3,HUB_ATTACHED_IO:4,GENERIC_ERROR_MESSAGES:5,HW_NETWORK_COMMANDS:8,FW_UPDATE_GO_INTO_BOOT_MODE:16,FW_UPDATE_LOCK_MEMORY:17,FW_UPDATE_LOCK_STATUS_REQUEST:18,FW_LOCK_STATUS:19,PORT_INFORMATION_REQUEST:33,PORT_MODE_INFORMATION_REQUEST:34,PORT_INPUT_FORMAT_SETUP_SINGLE:65,PORT_INPUT_FORMAT_SETUP_COMBINEDMODE:66,PORT_INFORMATION:67,PORT_MODE_INFORMATION:68,PORT_VALUE_SINGLE:69,PORT_VALUE_COMBINEDMODE:70,PORT_INPUT_FORMAT_SINGLE:71,PORT_INPUT_FORMAT_COMBINEDMODE:72,VIRTUAL_PORT_SETUP:97,PORT_OUTPUT_COMMAND:129,PORT_OUTPUT_COMMAND_FEEDBACK:130},T=(u(d),{UNKNOWN:0,SIMPLE_MEDIUM_LINEAR_MOTOR:1,TRAIN_MOTOR:2,LIGHT:8,VOLTAGE_SENSOR:20,CURRENT_SENSOR:21,PIEZO_BUZZER:22,HUB_LED:23,TILT_SENSOR:34,MOTION_SENSOR:35,COLOR_DISTANCE_SENSOR:37,MEDIUM_LINEAR_MOTOR:38,MOVE_HUB_MEDIUM_LINEAR_MOTOR:39,MOVE_HUB_TILT_SENSOR:40,DUPLO_TRAIN_BASE_MOTOR:41,DUPLO_TRAIN_BASE_SPEAKER:42,DUPLO_TRAIN_BASE_COLOR_SENSOR:43,DUPLO_TRAIN_BASE_SPEEDOMETER:44,TECHNIC_LARGE_LINEAR_MOTOR:46,TECHNIC_XLARGE_LINEAR_MOTOR:47,TECHNIC_MEDIUM_ANGULAR_MOTOR:48,TECHNIC_LARGE_ANGULAR_MOTOR:49,TECHNIC_MEDIUM_HUB_GEST_SENSOR:54,REMOTE_CONTROL_BUTTON:55,REMOTE_CONTROL_RSSI:56,TECHNIC_MEDIUM_HUB_ACCELEROMETER:57,TECHNIC_MEDIUM_HUB_GYRO_SENSOR:58,TECHNIC_MEDIUM_HUB_TILT_SENSOR:59,TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR:60,TECHNIC_COLOR_SENSOR:61,TECHNIC_DISTANCE_SENSOR:62,TECHNIC_FORCE_SENSOR:63,TECHNIC_3X3_COLOR_LIGHT_MATRIX:64,TECHNIC_SMALL_ANGULAR_MOTOR:65,MARIO_ACCELEROMETER:71,MARIO_BARCODE_SENSOR:73,MARIO_PANTS_SENSOR:74,TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY:75,TECHNIC_LARGE_ANGULAR_MOTOR_GREY:76,VIRTUAL_DEVICE:100}),_=u(T),O=u({ACK:1,MACK:2,BUFFER_OVERFLOW:3,TIMEOUT:4,COMMAND_NOT_RECOGNIZED:5,INVALID_USE:6,OVERCURRENT:7,INTERNAL_ERROR:8}),R={ADVERTISING_NAME:1,BUTTON_STATE:2,FW_VERSION:3,HW_VERSION:4,RSSI:5,BATTERY_VOLTAGE:6,BATTERY_TYPE:7,MANUFACTURER_NAME:8,RADIO_FIRMWARE_VERSION:9,LWP_PROTOCOL_VERSION:10,SYSTEM_TYPE_ID:11,HW_NETWORK_ID:12,PRIMARY_MAC_ADDRESS:13,SECONDARY_MAC_ADDRESS:14,HW_NETWORK_FAMILY:15},b=u(R),I={NAME:0,RAW:1,PCT:2,SI:3,SYMBOL:4,MAPPING:5,USED_INTERNALLY:6,MOTOR_BIAS:7,CAPABILITY_BITS:8,VALUE_FORMAT:128},p=u(I),A={A:0,B:1,C:2,D:3,HUB_LED:50,CURRENT_SENSOR:59,VOLTAGE_SENSOR:60,ACCELEROMETER:97,GYRO_SENSOR:98,TILT_SENSOR:99},N={POWER:0,SPEED:1,ROTATION:2,ABSOLUTE:3,COLOR:0,RGB:1,TILT_POS:0},f={FLOAT:0,HOLD:126,BRAKE:127},S=u(A),M={};M[d.HUB_ATTACHED_IO]=function(t){const o=t.getUint8(3),a=t.getUint8(4),i=a?t.getUint16(5,!0):0,c=_[i]||"Unknown",s=E[a];if(r("handlePortMsg",{portId:o,eventName:s,deviceTypeName:c}),a==l.ATTACHED_IO)n[o]=i,e.emit("attach",{portId:o,deviceTypeName:c});else if(a==l.DETACHED_IO)delete n[o],e.emit("detach",{portId:o});else if(a==l.ATTACHED_VIRTUAL_IO){const a=S[t.getUint8(7)],i=S[t.getUint8(8)];S[o]=`${a}_${i}`,n[o]=100,r({portIdA:a,portIdB:i}),e.emit("attach",{portId:o,deviceTypeName:"Virtual Port"})}},M[d.GENERIC_ERROR_MESSAGES]=function(t){const n=t.getUint8(3),o=t.getUint8(4);r({cmdType:n,errorCode:O[o]}),e.emit("error",{cmdType:n,errorCode:O[o]})},M[d.HUB_PROPERTIES]=function(t){const n=t.getUint8(3);if(r({property:b[n]}),n==R.BATTERY_VOLTAGE){const n=t.getUint8(5);r({batteryLevel:n}),e.emit("batteryLevel",{batteryLevel:n})}else if(n==R.BUTTON_STATE){const n=t.getUint8(5);r({buttonState:n}),e.emit("buttonState",{buttonState:n})}},M[d.PORT_OUTPUT_COMMAND_FEEDBACK]=function(t){for(let n=3;n<t.byteLength;n+=2){const e=t.getUint8(n),o=t.getUint8(n+1);if(r({portId:e,feedback:o}),10==o){const{cbk:t}=i[e].shift();"function"==typeof t&&t();const n=i[e][0];n&&(r("envoie cmd mise en attente"),D(n.buffer))}}},M[d.PORT_INFORMATION]=function(t){const n=t.getUint8(3);let e=t.getUint8(5);const a=t.getUint8(6),i=t.getUint16(7,!0),c=t.getUint16(9,!0);r(`Port ${n}, capabilities ${e}, total modes ${a}, \n                input modes ${i}, output modes ${c}`);const s="output,input,logical combinable, logical synchronisable".split(",");let u=[];for(let t=0;t<4;t++)e>>t&1&&u.push(s[t]);const l={portId:n,capabilities:u.join(", "),count:a,input:i,output:c},E=o[n];"function"==typeof E&&E(l)},M[d.PORT_MODE_INFORMATION]=function(t){const n=t.getUint8(3),e=t.getUint8(4),a=t.getUint8(5),i={portId:n,mode:e,type:p[a]};switch(a){case I.NAME:i.name=C(t.buffer.slice(6,t.byteLength));break;case I.RAW:case I.PCT:case I.SI:i.min=t.getFloat32(6,!0),i.max=t.getFloat32(10,!0);break;case I.SYMBOL:i.symbol=C(t.buffer.slice(6,t.byteLength));break;case I.VALUE_FORMAT:i.numValues=t.getUint8(6),i.dataType=["8bit","16bit","32bit","float"][t.getUint8(7)],i.totalFigures=t.getUint8(8),i.decimals=t.getUint8(9)}r("portModeInformation",i);const c=o[n];"function"==typeof c&&(c(i),delete o[n])},M[d.PORT_VALUE_SINGLE]=function(t){const e=t.getUint8(3),o=n[e],i=U[o];if("function"==typeof i&&null!=a[e]){const{mode:n,cbk:o}=a[e],c=i(n,t);"function"==typeof o&&o({mode:n,value:c,portId:e})}};const U={};function w(t,n){let e;switch(t){case N.ABSOLUTE:e=n.getInt16(4,!0);break;case N.ROTATION:e=n.getInt32(4,!0);break;case N.SPEED:e=n.getInt8(4)}return e}function C(t){const n=new Uint8Array(t);let e="";for(let t=0;t<n.byteLength&&0!=n[t];t++)e+=String.fromCharCode(n[t]);return e}function m(t){for(const[n,e]of Object.entries(S))if(e==t)return n;return-1}function L(t,...n){const e=n.flat(2),o=e.length+3,a=new ArrayBuffer(o),i=new Uint8Array(a);return i[0]=o,i[1]=0,i[2]=t,i.set(e,3),a}function D(n){return t.writeValueWithoutResponse(n)}function P(t,...n){return D(L(t,n))}function h(t,n,e=1,o=null){return a[t]={mode:n,cbk:o},P(d.PORT_INPUT_FORMAT_SETUP_SINGLE,t,n,function(t){const n=new Uint8Array(4);return new DataView(n.buffer).setUint32(0,t,!0),Array.from(n)}(e),1)}function g(t,n){return P(d.VIRTUAL_PORT_SETUP,1,t,n)}function v(t,n,e){return new Promise(async a=>{await P(d.PORT_MODE_INFORMATION_REQUEST,t,n,e),o[t]=a})}async function y(t,...n){return r("writePortCommand",{portId:t}),new Promise(async e=>{const o=L(d.PORT_OUTPUT_COMMAND,t,17,n);null==i[t]&&(i[t]=[]),0==i[t].length?(i[t].push({buffer:o,cbk:e}),await D(o)):(r("Cmd mise en attente"),i[t].push({buffer:o,cbk:e}))})}async function B(t,n,e){return new Promise(async o=>{await h(t,n,1,n=>{r("waitTestValue",n),e(n.value)&&(delete a[t],o())})})}U[T.TECHNIC_LARGE_LINEAR_MOTOR]=w,U[T.TECHNIC_LARGE_ANGULAR_MOTOR_GREY]=w,U[T.TECHNIC_MEDIUM_HUB_TILT_SENSOR]=function(t,n){let e;switch(t){case N.TILT_POS:e={yaw:n.getInt16(4,!0),pitch:n.getInt16(6,!0),roll:n.getInt16(8,!0)}}return e};const $=100;function H(t){const n=new Uint8Array(4);return new DataView(n.buffer).setInt32(0,t,!0),Array.from(n)}function G(t,n,...e){return y(t,81,n,e)}function x(t){!function(t){t.byteLength,t.getUint8(0);const n=t.getUint8(2),e=M[n];"function"==typeof e&&e(t)}(t.target.value)}function F(){r("onGattServerDisconnected"),e.emit("disconnected")}return{connect:async function(){r("connect"),n={};const e=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:[c]});e.addEventListener("gattserverdisconnected",F);const o=await e.gatt.connect();r("Connected");const a=await o.getPrimaryService(c);(t=await a.getCharacteristic(s)).addEventListener("characteristicvaluechanged",x),await t.startNotifications(),await P(d.HUB_PROPERTIES,R.BUTTON_STATE,2)},getHubDevices:function(){const t={};for(const[e,o]of Object.entries(n))t[e]=_[o];return t},shutdown:function(){return P(d.HUB_ACTIONS,1)},getDeviceType:function(t){return _[n[t]]},subscribe:h,waitTestValue:B,createVirtualPort:g,getPortInformation:async function(t){const n=await function(t){return new Promise(async n=>{await P(d.PORT_INFORMATION_REQUEST,t,1),o[t]=n})}(t),{capabilities:e,count:a,output:i,input:c}=n,s=Math.max(c,i),r=[];for(let n=0;n<a;n++){const e={};if(s>>n){let o;o=await v(t,n,I.NAME),e.name=o.name,e[(o=await v(t,n,I.RAW)).type]={min:o.min,max:o.max},e[(o=await v(t,n,I.PCT)).type]={min:o.min,max:o.max},e[(o=await v(t,n,I.SI)).type]={min:o.min,max:o.max},o=await v(t,n,I.SYMBOL),e.unit=o.symbol,o=await v(t,n,I.VALUE_FORMAT);const{numValues:a,dataType:i,totalFigures:c,decimals:s}=o;e[o.type]={numValues:a,dataType:i,totalFigures:c,decimals:s}}r.push(e)}return{modes:r,capabilities:e}},getPortIdFromName:m,on:e.on.bind(e),Motor:function(t){return{setPower:function(n){return G(t,N.POWER,n)},setSpeed:function(n){return y(t,7,n,$,0)},rotateDegrees:function(n,e,o=f.BRAKE){return y(t,11,H(n),e,$,o)},gotoAngle:function(n,e,o=f.BRAKE){return y(t,13,H(n),e,$,o)},setSpeedForTime:function(n,e,o=f.BRAKE){return y(t,9,function(t){const n=new Uint8Array(2);return new DataView(n.buffer).setInt16(0,t,!0),Array.from(n)}(e),n,$,o)},resetZero:function(){return G(t,N.ROTATION,0,0,0,0)},waitSpeed:function(n){return B(t,N.SPEED,n)}}},DoubleMotor:async function(t,n){try{await g(t,n)}catch(t){return console.log("Error",t),null}const e=`${S[t]}_${S[n]}`;return{setSpeed:function(t,n){return y(m(e),8,t,n,$,0)}}},Led:function(t){return{setColor:async function(n){return await h(t,N.COLOR),G(t,N.COLOR,n)},setRGBColor:async function(n,e,o){return await h(t,N.RGB),G(t,N.RGB,n,e,o)}}},Color:{BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,CYAN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:255},PortMap:A,PortMapNames:S,DeviceMode:N,BrakingStyle:f}}}),$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <div class="left">\n        <button class="w3-blue w3-btn" \n            bn-event="click: onConnect"\n            bn-show="!connected"\n        >Connect to HUB</button>\n    \n        <button class="w3-blue w3-btn" \n            bn-event="click: onShutdown"\n            bn-show="connected"\n        >Shutdown</button>\n    \n        <button class="w3-blue w3-btn" \n            bn-event="click: onCalibrate"\n            bn-show="connected"\n        >Calibrate</button>\n\n        <button class="w3-blue w3-btn" \n            bn-event="click: onChangeMode"\n            bn-show="isInit"\n        >Change Mode</button>\n        \n        <button class="w3-blue w3-btn" \n            bn-event="click: onHubInfo"\n            bn-show="connected"\n        >Info</button>\n\n    </div>\n    <div bn-show="connected" class="mode">\n        <div>Max Speed:<span bn-text="fmtMaxSpeed"></span></div>\n        <div>Mode: <span bn-text="mode"></span></div>\n    </div>\n</div>\n\n<div class="controlBar" bn-event="mousedown.w3-btn: onButtonDown, mouseup.w3-btn: onButtonUp, touchstart.w3-btn: onButtonDown, touchend.w3-btn: onButtonUp"\n    bn-show="isInit">\n    <div class="controlBarItem1">\n        <div class="top">\n            <button class="w3-blue w3-btn" bn-icon="fas fa-angle-up" data-cmd="2"></button>\n        </div>\n        <div class="middle">\n            <button class="w3-blue w3-btn" bn-icon="fas fa-angle-left" data-cmd="3"></button>\n            <button class="w3-blue w3-btn" bn-icon="fas fa-angle-right" data-cmd="4"></button>\n        </div>\n        <div class="bottom">\n            <button class="w3-blue w3-btn" bn-icon="fas fa-angle-down" data-cmd="1"></button>\n        </div>\n    \n    </div>\n    <div class="controlBarItem2">\n        <div class="top">\n            <button class="w3-blue w3-btn" bn-icon="fas fa-angle-up" data-cmd="5"></button>\n        </div>\n        <div class="bottom">\n            <button class="w3-blue w3-btn" bn-icon="fas fa-angle-down" data-cmd="6"></button>\n        </div>\n    \n    </div>\n    \n</div>\n\n\n',deps:["breizbot.pager","hub","breizbot.gamepad"],props:{},init:async function(t,n,e,o){let a=0,i=0,c=null,s=0;const r=$$.util.mapRange(-1,1,100,0);let u={};const l=e.Motor(e.PortMap.A),E=e.Motor(e.PortMap.B),d=e.Motor(e.PortMap.C),T=e.Motor(e.PortMap.D);let _=null;const O=e.Led(e.PortMap.HUB_LED);function R(){const{maxSpeed:t}=N.model;return _.setSpeed(-a*t,-i*t)}function b(t){N.setData({maxSpeed:Math.ceil(r(t))}),0==a&&0==i||R()}async function I(t){const{id:n}=t;if(0==n)await A();else if(5==n)await E.setSpeed(100);else if(6==n)await E.setSpeed(-100);else if("RUNNING"==N.model.mode){switch(n){case 2:a=1,i=1;break;case 1:a=-1,i=-1;break;case 3:a=1,i=-1;break;case 4:a=-1,i=1}0!=a&&0!=i&&await R()}else if("MANIPULATOR"==N.model.mode){switch(n){case 2:c=d,s=-100;break;case 1:c=d,s=100;break;case 3:c=T,s=-100;break;case 4:c=T,s=100}0!=s&&await c.setSpeed(s)}}async function p(t){const{id:n}=t;5==n||6==n?await E.setPower(0):0!=a||0!=i?(a=0,i=0,await _.setSpeed(0,0)):[1,2,3,4].includes(n)&&0!=s&&(s=0,await c.setPower(0))}async function A(){const{mode:t}=N.model;await _.setSpeed(0,0),a=0,i=0,"RUNNING"==t?(await O.setColor(e.Color.YELLOW),await l.rotateDegrees(180,50),await O.setColor(e.Color.GREEN),N.setData({mode:"MANIPULATOR"})):"MANIPULATOR"==t&&(await O.setColor(e.Color.YELLOW),await l.rotateDegrees(180,-50),await O.setColor(e.Color.BLUE),N.setData({mode:"RUNNING"}))}o.on("axe",t=>{const{id:n,value:e}=t;2==n&&b(e)}),o.on("buttonDown",I),o.on("buttonUp",p),e.on("disconnected",()=>{N.setData({connected:!1,mode:"UNKNOWN"})}),e.on("error",t=>{console.log(t)}),e.on("batteryLevel",t=>{const{batteryLevel:n}=t;N.setData({batteryLevel:n})});const N=$$.viewController(t,{data:{connected:!1,batteryLevel:0,mode:"UNKNOWN",maxSpeed:100,fmtMaxSpeed:function(){return this.maxSpeed.toLocaleString().padStart(4)},isInit:function(){return this.connected&&["RUNNING","MANIPULATOR"].includes(this.mode)}},events:{onButtonDown:function(){I({id:$(this).data("cmd")})},onButtonUp:function(){p({id:$(this).data("cmd")})},onConnect:async function(){await e.connect(),N.setData({connected:!0}),_=await e.DoubleMotor(e.PortMap.C,e.PortMap.D)},onCalibrate:async function(){console.log("onCalibrate"),N.setData({mode:"CALIBRATING"}),console.log("step 1"),await O.setColor(e.Color.RED),await l.setSpeed(-20),await $$.util.wait(200),await l.setSpeed(20),await l.waitSpeed(t=>t>5),console.log("step 2"),await l.waitSpeed(t=>t<6),console.log("step 3"),await l.setPower(0),await $$.util.wait(300),await l.rotateDegrees(-220,-20),await O.setColor(e.Color.BLUE),N.setData({mode:"RUNNING"})},onChangeMode:A,onHubInfo:async function(){console.log("onHubInfo"),n.pushPage("hubinfo",{title:"Hub Info",props:{devices:u}})},onShutdown:async function(){await e.shutdown()}}});o.on("connected",t=>{console.log("gamepad connnected",t),o.checkGamePadStatus(),null!=t.axes[2]&&b(t.axes[2])})}}),$$.control.registerControl("hubinfo",{template:'<div class="scrollBar">\n    <h1>External Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Port</th>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="externalDevices" bn-event="mousedown.action: onMouseUp, mouseup.action:onMouseDown, click.portInfo: onInfo2">\n            <tr>\n                <td bn-text="$scope.$i.portName"></td>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-btn w3-green action" data-action="forward">FWD</button>\n                    <button class="w3-btn w3-green action" data-action="backward">BKWD</button>\n                    <button class="w3-btn w3-blue portInfo">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table>\n    <h1>Internal Devices</h1>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>Device Type</th>\n                <th>Action</th>\n            </tr>\n        </thead>\n        <tbody bn-each="internalDevices" bn-event="click.w3-btn: onInfo">\n            <tr>\n                <td bn-text="$scope.$i.deviceTypeName"></td>\n                <td>\n                    <button class="w3-btn w3-blue">MODE</button>\n                </td>\n            </tr>\n\n        </tbody>\n    </table></div>',deps:["breizbot.pager","hub"],props:{},init:function(t,n,e){const o=e.getHubDevices();console.log("devices",o);const a=[],i=[];for(const[t,n]of Object.entries(o)){const o=parseInt(t);o<50?i.push({portName:e.PortMapNames[o],portId:o,deviceTypeName:n}):a.push({portId:o,deviceTypeName:n})}function c(t,e){n.pushPage("info",{title:e,props:{portId:t}})}function s(t){const n=t.closest("tr").index();return r.model.externalDevices[n].portId}e.on("attach",t=>{console.log("attach",t);const{portId:n,deviceTypeName:e}=t;o[n]=e}),e.on("detach",t=>{console.log("detach",t),delete o[t.portId]});const r=$$.viewController(t,{data:{internalDevices:a,externalDevices:i},events:{onMouseUp:function(){const t=$(this).data("action"),n=s($(this));switch(t){case"forward":e.Motor(n).setPower(100);break;case"backward":e.Motor(n).setPower(-100)}},onMouseDown:function(){const t=s($(this));e.Motor(t).setPower(0)},onInfo:function(){const t=$(this).closest("tr").index(),{portId:n,deviceTypeName:e}=r.model.internalDevices[t];c(n,e)},onInfo2:function(){const t=$(this).closest("tr").index(),{portId:n,deviceTypeName:e}=r.model.externalDevices[t];c(n,e)}}})}}),$$.control.registerControl("info",{template:'<div>\n    <div>\n        Capabilities: <span bn-text="capabilities"></span>\n    </div>\n    <table class="w3-table-all">\n        <thead>\n            <tr>\n                <th>MODE</th>\n                <th>UNIT</th>\n                <th>RAW</th>\n                <th>PCT</th>\n                <th>SI</th>\n                <th>VALUE FORMAT</th>\n            </tr>\n        </thead>\n        <tbody bn-each="modes">\n            <tr>\n                <td bn-text="$scope.$i.name"></td>\n                <td bn-text="$scope.$i.unit"></td>\n                <td>\n                    <span bn-text="$scope.$i.RAW.min"></span><br>\n                    <span bn-text="$scope.$i.RAW.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.PCT.min"></span><br>\n                    <span bn-text="$scope.$i.PCT.max"></span>\n                </td>\n                <td>\n                    <span bn-text="$scope.$i.SI.min"></span><br>\n                    <span bn-text="$scope.$i.SI.max"></span>\n                </td>\n                <td>\n                    dataType: <span bn-text="$scope.$i.VALUE_FORMAT.dataType"></span><br>\n                    numValues: <span bn-text="$scope.$i.VALUE_FORMAT.numValues"></span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>',deps:["breizbot.pager","hub"],props:{},init:function(t,n,e){const{portId:o}=this.props,a=$$.viewController(t,{data:{modes:[],capabilities:""},events:{}});!async function(){const t=await e.getPortInformation(o);console.log("portInfo",t);const{modes:n,capabilities:i}=t;a.setData({modes:n,capabilities:i})}()}});