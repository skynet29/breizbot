!function(){return function e(t,o,s){function i(n,r){if(!o[n]){if(!t[n]){var c="function"==typeof require&&require;if(!r&&c)return c(n,!0);if(a)return a(n,!0);var l=new Error("Cannot find module '"+n+"'");throw l.code="MODULE_NOT_FOUND",l}var E=o[n]={exports:{}};t[n][0].call(E.exports,function(e){return i(t[n][1][e]||e)},E,E.exports,e,t,o,s)}return o[n].exports}for(var a="function"==typeof require&&require,n=0;n<s.length;n++)i(s[n]);return i}}()({1:[function(e,t,o){t.exports=class{constructor(){this.callbacks=[]}on(e){this.callbacks.push(e)}emit(e){console.log("emit",e);let t=this.callbacks.length;for(;t--;)(0,this.callbacks[t])(e)&&this.callbacks.splice(t,1)}}},{}],2:[function(e,t,o){const{getEnumName:s}=$$.util,i={DETACHED_IO:0,ATTACHED_IO:1,ATTACHED_VIRTUAL_IO:2},a=s(i),n={HUB_PROPERTIES:1,HUB_ACTIONS:2,HUB_ALERTS:3,HUB_ATTACHED_IO:4,GENERIC_ERROR_MESSAGES:5,HW_NETWORK_COMMANDS:8,FW_UPDATE_GO_INTO_BOOT_MODE:16,FW_UPDATE_LOCK_MEMORY:17,FW_UPDATE_LOCK_STATUS_REQUEST:18,FW_LOCK_STATUS:19,PORT_INFORMATION_REQUEST:33,PORT_MODE_INFORMATION_REQUEST:34,PORT_INPUT_FORMAT_SETUP_SINGLE:65,PORT_INPUT_FORMAT_SETUP_COMBINEDMODE:66,PORT_INFORMATION:67,PORT_MODE_INFORMATION:68,PORT_VALUE_SINGLE:69,PORT_VALUE_COMBINEDMODE:70,PORT_INPUT_FORMAT_SINGLE:71,PORT_INPUT_FORMAT_COMBINEDMODE:72,VIRTUAL_PORT_SETUP:97,PORT_OUTPUT_COMMAND:129,PORT_OUTPUT_COMMAND_FEEDBACK:130},r=s(n),c={UNKNOWN:0,SIMPLE_MEDIUM_LINEAR_MOTOR:1,TRAIN_MOTOR:2,LIGHT:8,VOLTAGE_SENSOR:20,CURRENT_SENSOR:21,PIEZO_BUZZER:22,HUB_LED:23,TILT_SENSOR:34,MOTION_SENSOR:35,COLOR_DISTANCE_SENSOR:37,MEDIUM_LINEAR_MOTOR:38,MOVE_HUB_MEDIUM_LINEAR_MOTOR:39,MOVE_HUB_TILT_SENSOR:40,DUPLO_TRAIN_BASE_MOTOR:41,DUPLO_TRAIN_BASE_SPEAKER:42,DUPLO_TRAIN_BASE_COLOR_SENSOR:43,DUPLO_TRAIN_BASE_SPEEDOMETER:44,TECHNIC_LARGE_LINEAR_MOTOR:46,TECHNIC_XLARGE_LINEAR_MOTOR:47,TECHNIC_MEDIUM_ANGULAR_MOTOR:48,TECHNIC_LARGE_ANGULAR_MOTOR:49,TECHNIC_MEDIUM_HUB_GEST_SENSOR:54,REMOTE_CONTROL_BUTTON:55,REMOTE_CONTROL_RSSI:56,TECHNIC_MEDIUM_HUB_ACCELEROMETER:57,TECHNIC_MEDIUM_HUB_GYRO_SENSOR:58,TECHNIC_MEDIUM_HUB_TILT_SENSOR:59,TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR:60,TECHNIC_COLOR_SENSOR:61,TECHNIC_DISTANCE_SENSOR:62,TECHNIC_FORCE_SENSOR:63,TECHNIC_3X3_COLOR_LIGHT_MATRIX:64,TECHNIC_SMALL_ANGULAR_MOTOR:65,MARIO_ACCELEROMETER:71,MARIO_BARCODE_SENSOR:73,MARIO_PANTS_SENSOR:74,TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY:75,TECHNIC_LARGE_ANGULAR_MOTOR_GREY:76,VIRTUAL_DEVICE:100},l=s(c),E=s({ACK:1,MACK:2,BUFFER_OVERFLOW:3,TIMEOUT:4,COMMAND_NOT_RECOGNIZED:5,INVALID_USE:6,OVERCURRENT:7,INTERNAL_ERROR:8}),d={ADVERTISING_NAME:1,BUTTON_STATE:2,FW_VERSION:3,HW_VERSION:4,RSSI:5,BATTERY_VOLTAGE:6,BATTERY_TYPE:7,MANUFACTURER_NAME:8,RADIO_FIRMWARE_VERSION:9,LWP_PROTOCOL_VERSION:10,SYSTEM_TYPE_ID:11,HW_NETWORK_ID:12,PRIMARY_MAC_ADDRESS:13,SECONDARY_MAC_ADDRESS:14,HW_NETWORK_FAMILY:15},T=s(d),h={NAME:0,RAW:1,PCT:2,SI:3,SYMBOL:4,MAPPING:5,USED_INTERNALLY:6,MOTOR_BIAS:7,CAPABILITY_BITS:8,VALUE_FORMAT:128},u=s(h),_={A:0,B:1,C:2,D:3,HUB_LED:50,CURRENT_SENSOR:59,VOLTAGE_SENSOR:60,ACCELEROMETER:97,GYRO_SENSOR:98,TILT_SENSOR:99},R=s(_);t.exports={MessageType:n,MessageTypeNames:r,Event:i,EventNames:a,BrakingStyle:{FLOAT:0,HOLD:126,BRAKE:127},DeviceMode:{POWER:0,SPEED:1,ROTATION:2,ABSOLUTE:3,COLOR:0,RGB:1,TILT_POS:0},DeviceType:c,DeviceTypeNames:l,ModeInformationType:h,ModeInformationTypeNames:u,PortMap:_,PortMapNames:R,HubPropertyPayload:d,HubPropertyPayloadNames:T,ErrorCodeNames:E}},{}],3:[function(e,t,o){e("./CallbackEmitter");const{MessageType:s,PortMapNames:i}=e("./Const"),{log:a,toUint32:n}=e("./Util"),r={};t.exports=class{constructor(e,t,o){this.hubDevice=e,this.portId=t,this.type=o,this.name=i[t],this.feedbackCallback=null,this.valueCallback=void 0,this.mode=void 0}async writePortCommand(e,...t){return a("writePortCommand",this.portId,{waitFeedback:e,data:t}),e?new Promise(async e=>{await this.hubDevice.sendMsg(s.PORT_OUTPUT_COMMAND,this.portId,17,t),this.feedbackCallback=e}):this.hubDevice.sendMsg(s.PORT_OUTPUT_COMMAND,this.portId,16,t)}writeDirectMode(e,t,...o){return a("writeDirectMode",this.portId,{mode:e,waitFeedback:t}),this.writePortCommand(t,81,e,o)}setMode(e,t,o=1){return console.log("setMode",this.portId,{mode:e,notificationEnabled:t}),this.mode=e,this.hubDevice.sendMsg(s.PORT_INPUT_FORMAT_SETUP_SINGLE,this.portId,e,n(o),t?1:0)}async readInfo(){let e=r[this.type];return null==e&&(e=await this.hubDevice.getPortInformation(this.portId),r[this.type]=e),e}decodeValue(e){const t=r[this.type];if(null!=t){const{VALUE_FORMAT:o,RAW:s,SI:i}=t.modes[this.mode],n=$$.util.mapRange(s.min,s.max,i.min,i.max),{dataType:r,numValues:c}=o,l=[];let E,d=4;for(let t=0;t<c;t++){switch(r){case"16bit":E=e.getInt16(d,!0),d+=2;break;case"8bit":E=e.getInt8(d),d+=1;break;case"32bit":E=e.getInt32(d,!0),d+=4;break;case"float":E=e.getFloat32(d,!0),d+=4}a("val",E),l.push(Math.trunc(n(E)))}return l}}handleValue(e){a("handleValue",this.portId,e);let t=this.decodeValue(e);null!=t&&"function"==typeof this.valueCallback&&this.valueCallback(t)}handleFeedback(){"function"==typeof this.feedbackCallback&&this.feedbackCallback()}async getValue(e){return console.log("getValue",this.portId,{mode:e}),await this.setMode(e,!1),new Promise(async e=>{this.valueCallback=(t=>(console.log("value",t),e(t),!0)),await this.hubDevice.sendMsg(s.PORT_INFORMATION_REQUEST,this.portId,0)})}async waitTestValue(e,t){return await this.setMode(e,!0),await new Promise(async e=>{this.valueCallback=(async o=>{a("waitTestValue",o),await t(o)&&(a("waitTestValue OK"),e())})}),this.setMode(e,!1)}async subscribe(e,t,o=1){await this.setMode(e,!0,o),this.valueCallback=(async e=>{await t(e)})}}},{"./CallbackEmitter":1,"./Const":2,"./Util":10}],4:[function(e,t,o){const s=e("./Motor"),{BrakingStyle:i}=e("./Const"),{toInt16:a,toInt32:n}=e("./Util"),r=100;t.exports=class extends s{constructor(e,t,o){super(e,t,"Virtual Device"),this.name=o}setSpeed(e,t){return this.writePortCommand(!1,8,e,t,r,0)}setSpeedForTime(e,t,o,s=!1,n=i.BRAKE){return console.log("setSpeedForTime",this.portId,{speed1:e,speed2:t,time:o,waitFeedback:s,brakingStyle:n}),this.writePortCommand(this.portId,s,10,a(o),e,t,r,n)}rotateDegrees(e,t,o,s,a=i.BRAKE){return console.log("rotateDegrees",this.portId,{degrees:e,speed1:t,speed2:o,waitFeedback:s,brakingStyle:a}),this.writePortCommand(s,12,n(e),t,o,r,a)}gotoAngle(e,t,o,s,a=i.BRAKE){return console.log("gotoAngle",this.portId,{angle1:e,angle2:t,speed:o,waitFeedback:s,brakingStyle:a}),this.writePortCommand(s,14,n(e),n(t),o,r,a)}}},{"./Const":2,"./Motor":6,"./Util":10}],5:[function(e,t,o){const s=e("./Device"),{PortMapNames:i,DeviceMode:a}=e("./Const");t.exports=class extends s{constructor(e,t,o){super(e,t,o)}setBrightness(e){return console.log("setBrightness",this.portId,{brightness:e}),this.writeDirectMode(a.POWER,!1,e)}}},{"./Const":2,"./Device":3}],6:[function(e,t,o){const s=e("./Device"),{PortMapNames:i,DeviceMode:a}=e("./Const");t.exports=class extends s{constructor(e,t,o){super(e,t,o)}setPower(e){return console.log("setPower",this.portId,{power:e}),this.writeDirectMode(a.POWER,!1,e)}}},{"./Const":2,"./Device":3}],7:[function(e,t,o){const s=e("./Device"),{PortMapNames:i,DeviceMode:a}=e("./Const");t.exports=class extends s{constructor(e,t,o){super(e,t,o)}async setColor(e){return console.log("setColor",this.portId,{color:e}),await this.setMode(a.COLOR,!1),this.writeDirectMode(a.COLOR,!1,e)}async setRGBColor(e,t,o){return console.log("setColor",this.portId,{r:e,g:t,b:o}),await this.setMode(a.RGB,!1),this.writeDirectMode(a.RGB,!1,e,t,o)}}},{"./Const":2,"./Device":3}],8:[function(e,t,o){const s=e("./Motor"),{PortMapNames:i,DeviceMode:a,BrakingStyle:n}=e("./Const"),{toInt32:r,toInt16:c}=e("./Util"),l=100;t.exports=class extends s{constructor(e,t,o){super(e,t,o)}setSpeed(e){return console.log("setSpeed",this.portId,{speed:e}),0==e?this.setPower(0):this.writePortCommand(!1,7,e,l,0)}rotateDegrees(e,t,o,s=n.BRAKE){return console.log("rotateDegrees",this.portId,{degrees:e,speed:t,waitFeedback:o,brakingStyle:s}),this.writePortCommand(o,11,r(e),t,l,s)}gotoAngle(e,t,o,s=n.BRAKE){return console.log("gotoAngle",this.portId,{angle:e,speed:t,waitFeedback:o,brakingStyle:s}),this.calibrationValue&&(e*=this.calibrationValue),this.writePortCommand(o,13,r(e),t,l,s)}setSpeedForTime(e,t,o=!1,s=n.BRAKE){return console.log("setSpeedForTime",this.portId,{speed:e,time:t,waitFeedback:o,brakingStyle:s}),this.writePortCommand(o,9,c(t),e,l,s)}resetZero(){return console.log("resetZero",this.portId),this.writeDirectMode(a.ROTATION,!0,0,0,0,0)}getSpeed(){return this.getValue(a.SPEED)}getPosition(){return this.getValue(a.ROTATION)}getAbsolutePosition(){return this.getValue(a.ABSOLUTE)}async calibrate(){console.log("calibrate",this.portId),this.setPower(50),await this.waitTestValue(a.SPEED,e=>e>10),await this.waitTestValue(a.SPEED,e=>0==e),this.setPower(0),await $$.util.wait(1e3),await this.resetZero(),this.setPower(-50),await this.waitTestValue(a.SPEED,e=>Math.abs(e)>10),await this.waitTestValue(a.SPEED,e=>0==e),this.setPower(0);const e=await this.getValue(a.ROTATION);console.log(e);const t=Math.floor(e/2);console.log({offset:t}),await this.gotoAngle(t,10,!0),await this.resetZero(),this.calibrationValue=Math.abs(t)}decodeValue(e){let t;switch(this.mode){case a.ABSOLUTE:t=e.getInt16(4,!0);break;case a.ROTATION:t=e.getInt32(4,!0);break;case a.SPEED:t=e.getInt8(4)}return t}}},{"./Const":2,"./Motor":6,"./Util":10}],9:[function(e,t,o){const s=e("./Device"),{PortMapNames:i,DeviceMode:a}=e("./Const");t.exports=class extends s{constructor(e,t,o){super(e,t,o)}decodeValue(e){let t;switch(this.mode){case a.TILT_POS:t={yaw:e.getInt16(4,!0),pitch:e.getInt16(6,!0),roll:e.getInt16(8,!0)};break;default:t=super.decodeValue(e)}return t}}},{"./Const":2,"./Device":3}],10:[function(e,t,o){t.exports={toInt16:function(e){const t=new Uint8Array(2);return new DataView(t.buffer).setInt16(0,e,!0),Array.from(t)},toInt32:function(e){const t=new Uint8Array(4);return new DataView(t.buffer).setInt32(0,e,!0),Array.from(t)},toUint32:function(e){const t=new Uint8Array(4);return new DataView(t.buffer).setUint32(0,e,!0),Array.from(t)},log:function(...e){}}},{}],11:[function(e,t,o){!function(){const t=e("./CallbackEmitter"),{EventNames:o,DeviceMode:s,DeviceTypeNames:i,BrakingStyle:a,PortMap:n,HubPropertyPayloadNames:r,ModeInformationTypeNames:c,Event:l,DeviceType:E,PortMapNames:d,MessageType:T,HubPropertyPayload:h,ModeInformationType:u,ErrorCodeNames:_,MessageTypeNames:R}=e("./Const"),O=e("./Motor"),I=e("./DoubleMotor"),M=e("./TachoMotor"),A=e("./Device"),g=e("./RgbLed"),C=e("./Led"),p=e("./TiltSensor"),{log:m}=e("./Util"),N={BLACK:0,PINK:1,PURPLE:2,BLUE:3,LIGHT_BLUE:4,CYAN:5,GREEN:6,YELLOW:7,ORANGE:8,RED:9,WHITE:10,NONE:255},S="00001623-1212-efde-1623-785feabcd123",P="00001624-1212-efde-1623-785feabcd123";function b(e){const t=new Uint8Array(e);let o="";for(let e=0;e<t.byteLength&&0!=t[e];e++)o+=String.fromCharCode(t[e]);return o}function U(e,t){return`${d[e]}_${d[t]}`}const D={[E.TECHNIC_LARGE_LINEAR_MOTOR]:M,[E.TECHNIC_LARGE_ANGULAR_MOTOR_GREY]:M,[E.TECHNIC_XLARGE_LINEAR_MOTOR]:M,[E.TECHNIC_MEDIUM_HUB_TILT_SENSOR]:p,[E.HUB_LED]:g,[E.LIGHT]:C};class f extends EventEmitter2{constructor(){super(),this.charac=null,this.portCmdQueue={},this.portCmdCallback={},this.hubDevices={},this.busy=!1,this.cmdQueue=[],this.attachCallbacks=new t}async init(e){const t=await e.gatt.connect();m("Connected");const o=await t.getPrimaryService(S);this.charac=await o.getCharacteristic(P);const s=e=>{this.decodeMsg(e.target.value)};e.addEventListener("gattserverdisconnected",()=>{console.log("onGattServerDisconnected",this),this.charac.removeEventListener("characteristicvaluechanged",s),this.charac=null,this.emit("disconnected")}),this.charac.addEventListener("characteristicvaluechanged",s),await this.charac.startNotifications(),await $$.util.wait(100)}async startNotification(){await this.sendMsg(T.HUB_PROPERTIES,h.BATTERY_VOLTAGE,2),await this.sendMsg(T.HUB_PROPERTIES,h.SYSTEM_TYPE_ID,5),await this.sendMsg(T.HUB_PROPERTIES,h.PRIMARY_MAC_ADDRESS,5),await this.sendMsg(T.HUB_ALERTS,1,1)}getMotor(e){return new Promise((t,o)=>{const s=this.hubDevices[e];s?s instanceof O?t(s):o():this.attachCallbacks.on(o=>o.portId==e&&(m(`device on portId ${e} is ready`),t(o),!0))})}getTachoMotor(e){return new Promise((t,o)=>{const s=this.hubDevices[e];s?s instanceof M?t(s):o():this.attachCallbacks.on(o=>o.portId==e&&(m(`device on portId ${e} is ready`),t(o),!0))})}getTiltSensor(e){return new Promise((t,o)=>{const s=this.hubDevices[e];s?s instanceof p?t(s):o():this.attachCallbacks.on(o=>o.portId==e&&(m(`device on portId ${e} is ready`),t(o),!0))})}getRgbLed(e){return new Promise((t,o)=>{const s=this.hubDevices[e];s?s instanceof g?t(s):o():this.attachCallbacks.on(o=>o.portId==e&&(m(`device on portId ${e} is ready`),t(o),!0))})}getLed(e){return new Promise((t,o)=>{const s=this.hubDevices[e];s?s instanceof C?t(s):o():this.attachCallbacks.on(o=>o.portId==e&&(m(`device on portId ${e} is ready`),t(o),!0))})}async getDblMotor(e,t){return new Promise(async o=>{const s=U(e,t),i=Object.values(this.hubDevices).find(e=>e.name==s);i?o(i):(this.attachCallbacks.on(e=>e.name==s&&(console.log(`device on portId ${e.portId} is ready`),o(e),!0)),await this.createVirtualPort(e,t))})}async sendBuffer(e){console.log("sendBuffer",e),await this.charac.writeValueWithoutResponse(e),console.log("OK")}sendMsg(e,...t){return m("sendMsg",R[e],t),this.sendBuffer(function(e,...t){const o=t.flat(3),s=o.length+3,i=new ArrayBuffer(s),a=new Uint8Array(i);return a[0]=s,a[1]=0,a[2]=e,a.set(o,3),i}(e,t))}getPortIdFromName(e){for(const t of Object.values(this.hubDevices))if(t.name==e)return t.portId}createVirtualPort(e,t){return this.sendMsg(T.VIRTUAL_PORT_SETUP,1,e,t)}shutdown(){return this.sendMsg(T.HUB_ACTIONS,1)}getHubDevices(){return Object.values(this.hubDevices)}async readDeviceInfo(){for(const e of this.getHubDevices())await e.readInfo()}getDevice(e){return this.hubDevices[e]}async getPortInformation(e){const t=await this.getPortInformationRequest(e),{count:o,output:s,input:i,capabilities:a}=t,n=[];for(let t=0;t<o;t++){const o={};let a;o.mode=0,a=await this.getPortModeInformationRequest(e,t,u.NAME),o.name=a.name,o[(a=await this.getPortModeInformationRequest(e,t,u.RAW)).type]={min:a.min,max:a.max},o[(a=await this.getPortModeInformationRequest(e,t,u.SI)).type]={min:a.min,max:a.max},a=await this.getPortModeInformationRequest(e,t,u.SYMBOL),o.unit=a.symbol,a=await this.getPortModeInformationRequest(e,t,u.VALUE_FORMAT);const{numValues:r,dataType:c,totalFigures:l,decimals:E}=a;o[a.type]={numValues:r,dataType:c,totalFigures:l,decimals:E},i>>t&1&&(o.mode|=1),s>>t&1&&(o.mode|=2),n.push(o)}return{modes:n,capabilities:a}}getPortInformationRequest(e){return new Promise(async t=>{await this.sendMsg(T.PORT_INFORMATION_REQUEST,e,1),this.portCmdCallback[e]=t})}getPortModeInformationRequest(e,t,o){return new Promise(async s=>{await this.sendMsg(T.PORT_MODE_INFORMATION_REQUEST,e,t,o),this.portCmdCallback[e]=s})}decodeMsg(e){e.byteLength,e.getUint8(0);const t=e.getUint8(2);switch(m("decodeMsg",{msgType:R[t]}),t){case T.HUB_ATTACHED_IO:this.handlePortMsg(e);break;case T.GENERIC_ERROR_MESSAGES:this.handleGenericErrorMsg(e);break;case T.HUB_PROPERTIES:this.handleHubPropertyResponse(e);break;case T.HUB_ALERTS:this.handleHubAlerts(e);break;case T.PORT_OUTPUT_COMMAND_FEEDBACK:this.handlePortCommandFeedback(e);break;case T.PORT_MODE_INFORMATION:this.handlePortModeInformation(e);break;case T.PORT_INFORMATION:this.handlePortInformation(e);break;case T.PORT_VALUE_SINGLE:this.handlePortValueSingle(e)}}handlePortValueSingle(e){const t=e.getUint8(3),o=e.getUint8(0),s=this.hubDevices[t];m("handlePortValueSingle",{msgLen:o,portId:t}),s.handleValue(e)}handlePortModeInformation(e){const t=e.getUint8(3),o=e.getUint8(4),s=e.getUint8(5),i={portId:t,mode:o,type:c[s]};switch(s){case u.NAME:i.name=b(e.buffer.slice(6,e.byteLength));break;case u.RAW:case u.PCT:case u.SI:i.min=e.getFloat32(6,!0),i.max=e.getFloat32(10,!0);break;case u.SYMBOL:i.symbol=b(e.buffer.slice(6,e.byteLength));break;case u.VALUE_FORMAT:i.numValues=e.getUint8(6),i.dataType=["8bit","16bit","32bit","float"][e.getUint8(7)],i.totalFigures=e.getUint8(8),i.decimals=e.getUint8(9)}m("portModeInformation",i);const a=this.portCmdCallback[t];"function"==typeof a&&(a(i),delete this.portCmdCallback[t])}handlePortInformation(e){const t=e.getUint8(3);let o=e.getUint8(5);const s=e.getUint8(6),i=e.getUint16(7,!0),a=e.getUint16(9,!0);m(`Port ${t}, capabilities ${o}, total modes ${s}, \n                    input modes ${i}, output modes ${a}`);const n="output,input,logical combinable, logical synchronisable".split(",");let r=[];for(let e=0;e<4;e++)o>>e&1&&r.push(n[e]);const c={portId:t,capabilities:r.join(", "),count:s,input:i,output:a},l=this.portCmdCallback[t];"function"==typeof l&&l(c)}handleHubPropertyResponse(e){const t=e.getUint8(3);if(m({property:r[t]}),t==h.BATTERY_VOLTAGE){const t=e.getUint8(5);m({batteryLevel:t}),this.emit("batteryLevel",{batteryLevel:t})}else if(t==h.BUTTON_STATE){const t=e.getUint8(5);m({buttonState:t}),this.emit("buttonState",{buttonState:t})}else if(t==h.SYSTEM_TYPE_ID){const t=e.getUint8(5);m({systemType:t})}else if(t==h.PRIMARY_MAC_ADDRESS){const t=[];for(let o=0;o<6;o++)t.push(e.getUint8(5+o).toString(16).toLocaleUpperCase().padStart(2,"0"));m({bytes:t}),this.emit("address",{address:t.join(":")})}}handleGenericErrorMsg(e){const t=e.getUint8(3),o=e.getUint8(4);m({cmdType:t,errorCode:_[o]}),this.emit("error",{cmdType:t,errorCode:_[o]})}handleHubAlerts(e){const t=e.byteLength,o=e.getUint8(0),s=e.getUint8(3),i=e.getUint8(4),a=e.getUint8(5);m("handleHubAlerts",{bufferLen:t,msgLen:o,type:s,operation:i,payload:a}),this.emit("hubAlerts",{type:s,payload:a})}handlePortCommandFeedback(e){for(let t=3;t<e.byteLength;t+=2){const o=e.getUint8(t),s=e.getUint8(t+1),i=this.hubDevices[o];m("handlePortCommandFeedback",{portId:o,feedback:s}),10==s&&null!=i&&i.handleFeedback()}}handlePortMsg(e){const t=e.getUint8(3),s=e.getUint8(4),a=s?e.getUint16(5,!0):0,n=i[a]||"Unknown",r=o[s];if(console.log("handlePortMsg",{portId:t,eventName:r,deviceTypeName:n}),s==l.ATTACHED_IO){let e=D[a];e||(e=A);const o=new e(this,t,n);this.hubDevices[t]=o,this.attachCallbacks.emit(o),this.emit("attach",o)}else if(s==l.DETACHED_IO)delete this.hubDevices[t],this.emit("detach",{portId:t});else if(s==l.ATTACHED_VIRTUAL_IO){const o=e.getUint8(7),s=e.getUint8(8),i=new I(this,t,U(o,s));this.hubDevices[t]=i,this.attachCallbacks.emit(i),this.emit("attach",i)}}}$$.service.registerService("hub",{init:function(){return{connect:async function(){m("connect");const e=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:[S]}),t=new f;return await t.init(e),t},Color:N,PortMap:n,PortMapNames:d,DeviceMode:s,BrakingStyle:a,DeviceTypeNames:i,isMotor:function(e){return e instanceof O},isTachoMotor:function(e){return e instanceof M},isLed:function(e){return e instanceof C},isDoubleMotor:function(e){return e instanceof I}}}})}()},{"./CallbackEmitter":1,"./Const":2,"./Device":3,"./DoubleMotor":4,"./Led":5,"./Motor":6,"./RgbLed":7,"./TachoMotor":8,"./TiltSensor":9,"./Util":10}]},{},[11]);
//# sourceMappingURL=hub.js.map
