{"version":3,"sources":["../../../../node_modules/browser-pack/_prelude.js","lib/CallbackEmitter.js","lib/Const.js","lib/Device.js","lib/DoubleMotor.js","lib/Led.js","lib/Motor.js","lib/RgbLed.js","lib/TachoMotor.js","lib/TiltSensor.js","lib/Util.js","lib/hub.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","[object Object]","this","callbacks","callback","push","data","console","log","splice","getEnumName","$$","util","Event","DETACHED_IO","ATTACHED_IO","ATTACHED_VIRTUAL_IO","EventNames","MessageType","HUB_PROPERTIES","HUB_ACTIONS","HUB_ALERTS","HUB_ATTACHED_IO","GENERIC_ERROR_MESSAGES","HW_NETWORK_COMMANDS","FW_UPDATE_GO_INTO_BOOT_MODE","FW_UPDATE_LOCK_MEMORY","FW_UPDATE_LOCK_STATUS_REQUEST","FW_LOCK_STATUS","PORT_INFORMATION_REQUEST","PORT_MODE_INFORMATION_REQUEST","PORT_INPUT_FORMAT_SETUP_SINGLE","PORT_INPUT_FORMAT_SETUP_COMBINEDMODE","PORT_INFORMATION","PORT_MODE_INFORMATION","PORT_VALUE_SINGLE","PORT_VALUE_COMBINEDMODE","PORT_INPUT_FORMAT_SINGLE","PORT_INPUT_FORMAT_COMBINEDMODE","VIRTUAL_PORT_SETUP","PORT_OUTPUT_COMMAND","PORT_OUTPUT_COMMAND_FEEDBACK","MessageTypeNames","DeviceType","UNKNOWN","SIMPLE_MEDIUM_LINEAR_MOTOR","TRAIN_MOTOR","LIGHT","VOLTAGE_SENSOR","CURRENT_SENSOR","PIEZO_BUZZER","HUB_LED","TILT_SENSOR","MOTION_SENSOR","COLOR_DISTANCE_SENSOR","MEDIUM_LINEAR_MOTOR","MOVE_HUB_MEDIUM_LINEAR_MOTOR","MOVE_HUB_TILT_SENSOR","DUPLO_TRAIN_BASE_MOTOR","DUPLO_TRAIN_BASE_SPEAKER","DUPLO_TRAIN_BASE_COLOR_SENSOR","DUPLO_TRAIN_BASE_SPEEDOMETER","TECHNIC_LARGE_LINEAR_MOTOR","TECHNIC_XLARGE_LINEAR_MOTOR","TECHNIC_MEDIUM_ANGULAR_MOTOR","TECHNIC_LARGE_ANGULAR_MOTOR","TECHNIC_MEDIUM_HUB_GEST_SENSOR","REMOTE_CONTROL_BUTTON","REMOTE_CONTROL_RSSI","TECHNIC_MEDIUM_HUB_ACCELEROMETER","TECHNIC_MEDIUM_HUB_GYRO_SENSOR","TECHNIC_MEDIUM_HUB_TILT_SENSOR","TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR","TECHNIC_COLOR_SENSOR","TECHNIC_DISTANCE_SENSOR","TECHNIC_FORCE_SENSOR","TECHNIC_3X3_COLOR_LIGHT_MATRIX","TECHNIC_SMALL_ANGULAR_MOTOR","MARIO_ACCELEROMETER","MARIO_BARCODE_SENSOR","MARIO_PANTS_SENSOR","TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY","TECHNIC_LARGE_ANGULAR_MOTOR_GREY","VIRTUAL_DEVICE","DeviceTypeNames","ErrorCodeNames","ACK","MACK","BUFFER_OVERFLOW","TIMEOUT","COMMAND_NOT_RECOGNIZED","INVALID_USE","OVERCURRENT","INTERNAL_ERROR","HubPropertyPayload","ADVERTISING_NAME","BUTTON_STATE","FW_VERSION","HW_VERSION","RSSI","BATTERY_VOLTAGE","BATTERY_TYPE","MANUFACTURER_NAME","RADIO_FIRMWARE_VERSION","LWP_PROTOCOL_VERSION","SYSTEM_TYPE_ID","HW_NETWORK_ID","PRIMARY_MAC_ADDRESS","SECONDARY_MAC_ADDRESS","HW_NETWORK_FAMILY","HubPropertyPayloadNames","ModeInformationType","NAME","RAW","PCT","SI","SYMBOL","MAPPING","USED_INTERNALLY","MOTOR_BIAS","CAPABILITY_BITS","VALUE_FORMAT","ModeInformationTypeNames","PortMap","A","B","C","D","ACCELEROMETER","GYRO_SENSOR","PortMapNames","BrakingStyle","FLOAT","HOLD","BRAKE","DeviceMode","POWER","SPEED","ROTATION","ABSOLUTE","COLOR","RGB","TILT_POS","toUint32","deviceInfo","hubDevice","portId","type","name","feedbackCallback","valueCallback","undefined","mode","waitEnd","Promise","async","resolve","writePortCommand","feedback","notificationEnabled","deltaInterval","sendMsg","info","getPortInformation","msg","modes","range","mapRange","min","max","dataType","numValues","ret","val","offset","idx","getInt16","getInt8","getInt32","getFloat32","Math","trunc","value","decodeValue","setMode","testFn","cbk","Motor","toInt16","toInt32","maxPower","super","speed1","speed2","time","waitFeedback","brakingStyle","degrees","angle1","angle2","speed","Device","brightness","writeDirectMode","power","color","g","b","setPower","angle","calibrationValue","getValue","waitTestValue","wait","resetZero","abs","floor","gotoAngle","yaw","pitch","roll","buff","Uint8Array","DataView","buffer","setInt16","Array","from","setInt32","setUint32","CallbackEmitter","DoubleMotor","TachoMotor","RgbLed","Led","TiltSensor","Color","BLACK","PINK","PURPLE","BLUE","LIGHT_BLUE","CYAN","GREEN","YELLOW","ORANGE","RED","WHITE","NONE","LPF2_SERVICE_UUID","LPF2_CHARAC_UUID","abToString","buf","uint8buff","byteLength","String","fromCharCode","formatMsg","msgType","flat","msgLen","ArrayBuffer","uint8Buffer","set","getVirtualPortName","portId1","portId2","constructorMap","HubDevice","EventEmitter2","charac","portCmdQueue","portCmdCallback","hubDevices","busy","attachCallbacks","sendBuffer","device","server","gatt","connect","service","getPrimaryService","getCharacteristic","onCharacteristicvaluechanged","event","decodeMsg","target","addEventListener","removeEventListener","emit","startNotifications","reject","on","Object","values","find","d","createVirtualPort","writeValueWithoutResponse","getHubDevices","readInfo","portInfo","getPortInformationRequest","count","output","input","capabilities","getPortModeInformationRequest","unit","symbol","totalFigures","decimals","getUint8","handlePortMsg","handleGenericErrorMsg","handleHubPropertyResponse","handleHubAlerts","handlePortCommandFeedback","handlePortModeInformation","handlePortInformation","handlePortValueSingle","handleValue","slice","cb","getUint16","availableCaps","split","cap","join","property","batteryLevel","buttonState","systemType","bytes","toString","toLocaleUpperCase","padStart","address","cmdType","errorCode","bufferLen","operation","payload","handleFeedback","shift","eventType","deviceTypeName","eventName","constructor","registerService","init","navigator","bluetooth","requestDevice","acceptAllDevices","optionalServices","isMotor","isTachoMotor","isLed","isDoubleMotor"],"mappings":"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","file":"hub.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","class CallbackEmitter {\n    constructor() {\n        this.callbacks = []\n    }\n\n    /**\n     * \n     * @param {(data) => boolean} callback \n     */\n    on(callback) {\n        this.callbacks.push(callback)\n    }\n\n    emit(data) {\n        console.log('emit', data)\n        let i = this.callbacks.length\n\n        while (i--) {\n            const callback = this.callbacks[i]\n            if (callback(data)) {\n                this.callbacks.splice(i, 1)\n            }\n        }\n    }\n}\n\nmodule.exports = CallbackEmitter","//@ts-check\n\nconst { getEnumName } = $$.util\n\nconst Event = {\n    DETACHED_IO: 0x00,\n    ATTACHED_IO: 0x01,\n    ATTACHED_VIRTUAL_IO: 0x02,\n}\nconst EventNames = getEnumName(Event)\n\nconst HubAlertType = {\n    LOW_VOLTAGE: 0x01,\n    HIGH_CURRENT: 0x02,\n    LOW_SIGNAL_STRENGTH: 0x03,\n    OVER_POWER_CONDITION: 0x04\n}\n\nconst MessageType = {\n    HUB_PROPERTIES: 0x01,\n    HUB_ACTIONS: 0x02,\n    HUB_ALERTS: 0x03,\n    HUB_ATTACHED_IO: 0x04,\n    GENERIC_ERROR_MESSAGES: 0x05,\n    HW_NETWORK_COMMANDS: 0x08,\n    FW_UPDATE_GO_INTO_BOOT_MODE: 0x10,\n    FW_UPDATE_LOCK_MEMORY: 0x11,\n    FW_UPDATE_LOCK_STATUS_REQUEST: 0x12,\n    FW_LOCK_STATUS: 0x13,\n    PORT_INFORMATION_REQUEST: 0x21,\n    PORT_MODE_INFORMATION_REQUEST: 0x22,\n    PORT_INPUT_FORMAT_SETUP_SINGLE: 0x41,\n    PORT_INPUT_FORMAT_SETUP_COMBINEDMODE: 0x42,\n    PORT_INFORMATION: 0x43,\n    PORT_MODE_INFORMATION: 0x44,\n    PORT_VALUE_SINGLE: 0x45,\n    PORT_VALUE_COMBINEDMODE: 0x46,\n    PORT_INPUT_FORMAT_SINGLE: 0x47,\n    PORT_INPUT_FORMAT_COMBINEDMODE: 0x48,\n    VIRTUAL_PORT_SETUP: 0x61,\n    PORT_OUTPUT_COMMAND: 0x81,\n    PORT_OUTPUT_COMMAND_FEEDBACK: 0x82,\n}\n\n\n\nconst MessageTypeNames = getEnumName(MessageType)\n\nconst DeviceType = {\n    UNKNOWN: 0,\n    SIMPLE_MEDIUM_LINEAR_MOTOR: 1,\n    TRAIN_MOTOR: 2,\n    LIGHT: 8,\n    VOLTAGE_SENSOR: 20,\n    CURRENT_SENSOR: 21,\n    PIEZO_BUZZER: 22,\n    HUB_LED: 23,\n    TILT_SENSOR: 34,\n    MOTION_SENSOR: 35,\n    COLOR_DISTANCE_SENSOR: 37,\n    MEDIUM_LINEAR_MOTOR: 38,\n    MOVE_HUB_MEDIUM_LINEAR_MOTOR: 39,\n    MOVE_HUB_TILT_SENSOR: 40,\n    DUPLO_TRAIN_BASE_MOTOR: 41,\n    DUPLO_TRAIN_BASE_SPEAKER: 42,\n    DUPLO_TRAIN_BASE_COLOR_SENSOR: 43,\n    DUPLO_TRAIN_BASE_SPEEDOMETER: 44,\n    TECHNIC_LARGE_LINEAR_MOTOR: 46, // Technic Control+\n    TECHNIC_XLARGE_LINEAR_MOTOR: 47, // Technic Control+\n    TECHNIC_MEDIUM_ANGULAR_MOTOR: 48, // Spike Prime\n    TECHNIC_LARGE_ANGULAR_MOTOR: 49, // Spike Prime\n    TECHNIC_MEDIUM_HUB_GEST_SENSOR: 54,\n    REMOTE_CONTROL_BUTTON: 55,\n    REMOTE_CONTROL_RSSI: 56,\n    TECHNIC_MEDIUM_HUB_ACCELEROMETER: 57,\n    TECHNIC_MEDIUM_HUB_GYRO_SENSOR: 58,\n    TECHNIC_MEDIUM_HUB_TILT_SENSOR: 59,\n    TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR: 60,\n    TECHNIC_COLOR_SENSOR: 61, // Spike Prime\n    TECHNIC_DISTANCE_SENSOR: 62, // Spike Prime\n    TECHNIC_FORCE_SENSOR: 63, // Spike Prime\n    TECHNIC_3X3_COLOR_LIGHT_MATRIX: 64, // Spike Essential\n    TECHNIC_SMALL_ANGULAR_MOTOR: 65, // Spike Essential\n    MARIO_ACCELEROMETER: 71,\n    MARIO_BARCODE_SENSOR: 73,\n    MARIO_PANTS_SENSOR: 74,\n    TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY: 75, // Mindstorms\n    TECHNIC_LARGE_ANGULAR_MOTOR_GREY: 76, // Technic Control+\n    VIRTUAL_DEVICE: 100\n}\n\nconst DeviceTypeNames = getEnumName(DeviceType)\n\nconst ErrorCode = {\n    ACK: 0x01,\n    MACK: 0x02,\n    BUFFER_OVERFLOW: 0x03,\n    TIMEOUT: 0x04,\n    COMMAND_NOT_RECOGNIZED: 0x05,\n    INVALID_USE: 0x06,\n    OVERCURRENT: 0x07,\n    INTERNAL_ERROR: 0x08,\n}\n\nconst ErrorCodeNames = getEnumName(ErrorCode)\n\n\nconst HubPropertyPayload = {\n    ADVERTISING_NAME: 0x01,\n    BUTTON_STATE: 0x02,\n    FW_VERSION: 0x03,\n    HW_VERSION: 0x04,\n    RSSI: 0x05,\n    BATTERY_VOLTAGE: 0x06,\n    BATTERY_TYPE: 0x07,\n    MANUFACTURER_NAME: 0x08,\n    RADIO_FIRMWARE_VERSION: 0x09,\n    LWP_PROTOCOL_VERSION: 0x0A,\n    SYSTEM_TYPE_ID: 0x0B,\n    HW_NETWORK_ID: 0x0C,\n    PRIMARY_MAC_ADDRESS: 0x0D,\n    SECONDARY_MAC_ADDRESS: 0x0E,\n    HW_NETWORK_FAMILY: 0x0F\n}\n\nconst HubPropertyPayloadNames = getEnumName(HubPropertyPayload)\n\nconst ModeInformationType = {\n    NAME: 0x00,\n    RAW: 0x01,\n    PCT: 0x02,\n    SI: 0x03,\n    SYMBOL: 0x04,\n    MAPPING: 0x05,\n    USED_INTERNALLY: 0x06,\n    MOTOR_BIAS: 0x07,\n    CAPABILITY_BITS: 0x08,\n    VALUE_FORMAT: 0x80,\n}\n\nconst ModeInformationTypeNames = getEnumName(ModeInformationType)\n\nconst PortMap = {\n    \"A\": 0,\n    \"B\": 1,\n    \"C\": 2,\n    \"D\": 3,\n    \"HUB_LED\": 50,\n    \"CURRENT_SENSOR\": 59,\n    \"VOLTAGE_SENSOR\": 60,\n    \"ACCELEROMETER\": 97,\n    \"GYRO_SENSOR\": 98,\n    \"TILT_SENSOR\": 99\n}\n\nconst DeviceMode = {\n    POWER: 0x00,\n    SPEED: 0x01,\n    ROTATION: 0x02,\n    ABSOLUTE: 0x03,\n    COLOR: 0x00,\n    RGB: 0x01,\n    TILT_POS: 0x00\n}\n\nconst BrakingStyle = {\n    FLOAT: 0,\n    HOLD: 126,\n    BRAKE: 127\n}\n\nconst PortMapNames = getEnumName(PortMap)\n\nmodule.exports = {\n    MessageType,\n    MessageTypeNames,\n    Event,\n    EventNames,\n    BrakingStyle,\n    DeviceMode,\n    DeviceType,\n    DeviceTypeNames,\n    ModeInformationType,\n    ModeInformationTypeNames,\n    PortMap,\n    PortMapNames,\n    HubPropertyPayload,\n    HubPropertyPayloadNames,\n    ErrorCodeNames\n}","//@ts-check\n\nconst CallbackEmitter = require('./CallbackEmitter')\nconst { MessageType, PortMapNames } = require('./Const')\nconst { log, toUint32 } = require('./Util')\n\nconst deviceInfo = {}\n\nclass Device {\n    /**\n     * \n     * @param {HUB.HubDevice} hubDevice \n     * @param {number} portId \n     * @param {string} type \n     */\n    constructor(hubDevice, portId, type) {\n        this.hubDevice = hubDevice\n        this.portId = portId\n        this.type = type\n        this.name = PortMapNames[portId]\n        this.feedbackCallback = null\n        this.valueCallback = undefined\n        this.mode = undefined\n        this.waitEnd = false\n\n    }\n\n    /**\n     * \n     * @param {boolean} waitEnd \n     * @param  {...any} data \n     * @returns \n     */\n    async writePortCommand(waitEnd, ...data) {\n        this.waitEnd = waitEnd\n        return new Promise(async (resolve) => {\n            this.feedbackCallback = resolve\n            await this.hubDevice.writePortCommand(this.portId, data)\n        })  \n\n    }\n\n    handleFeedback(feedback) {\n        if (typeof this.feedbackCallback == 'function') {\n            if (feedback == 1 && !this.waitEnd) {\n                this.feedbackCallback()\n            }\n            else if (feedback == 10 && this.waitEnd) {\n                this.feedbackCallback()\n            }\n            \n        }\n    }\n\n    /**\n     * \n     * @param {number} mode\n     * @param  {...any} data \n     * @returns \n     */\n    writeDirectMode(mode, ...data) {\n        log('writeDirectMode', this.portId, { mode })\n        return this.writePortCommand(true, 0x51, mode, data)\n    }\n\n    /**\n     * \n     * @param {number} mode \n     * @param {boolean} notificationEnabled \n     * @param {number} deltaInterval \n     * @returns \n     */\n    setMode(mode, notificationEnabled, deltaInterval = 1) {\n        console.log('setMode', this.portId, { mode, notificationEnabled })\n\n        this.mode = mode\n\n        return this.hubDevice.sendMsg(MessageType.PORT_INPUT_FORMAT_SETUP_SINGLE,\n            this.portId, mode, toUint32(deltaInterval), notificationEnabled ? 0x01 : 0)\n    }\n\n    async readInfo() {\n        let info = deviceInfo[this.type]\n        if (info == undefined) {\n            info = await this.hubDevice.getPortInformation(this.portId)\n            deviceInfo[this.type] = info\n        }\n        return info\n    }\n\n    /**\n     * \n     * @param {DataView} msg \n     */\n    decodeValue(msg) {\n        const info = deviceInfo[this.type]\n        if (info != undefined) {\n            const { VALUE_FORMAT, RAW, SI } = info.modes[this.mode]\n            const range = $$.util.mapRange(RAW.min, RAW.max, SI.min, SI.max)\n            const { dataType, numValues } = VALUE_FORMAT\n            const ret = []\n            let offset = 4\n            let val\n            for (let idx = 0; idx < numValues; idx++) {\n                switch (dataType) {\n                    case '16bit':\n                        val = msg.getInt16(offset, true)\n                        offset += 2\n                        break;\n                    case '8bit':\n                        val = msg.getInt8(offset)\n                        offset += 1\n                        break;\n                    case '32bit':\n                        val = msg.getInt32(offset, true)\n                        offset += 4\n                        break;\n                    case 'float':\n                        val = msg.getFloat32(offset, true)\n                        offset += 4\n                        break;\n\n                }\n                log('val', val)\n                ret.push(Math.trunc(range(val)))\n            }\n            return ret\n\n        }\n    }\n    /**\n     * \n     * @param {DataView} msg \n     */\n    handleValue(msg) {\n        log('handleValue', this.portId, msg)\n        let value = this.decodeValue(msg)\n\n        if (value != undefined && typeof this.valueCallback == 'function') {\n            this.valueCallback(value)\n        }\n    }\n\n\n    /**\n     * \n     * @param {number} mode \n     * @returns \n    */\n    async getValue(mode) {\n        console.log('getValue', this.portId, { mode })\n\n        await this.setMode(mode, false)\n        return new Promise(async (resolve) => {\n            this.valueCallback = (data) => {\n                console.log('value', data)\n                resolve(data)\n                return true\n            }\n            await this.hubDevice.sendMsg(MessageType.PORT_INFORMATION_REQUEST, this.portId, 0x00)\n\n        })\n    }\n\n    /**\n     * \n     * @param {number} mode \n     * @param {(data) => Promise<boolean>} testFn \n     * @returns \n     */\n    async waitTestValue(mode, testFn) {\n        await this.setMode(mode, true)\n\n        await new Promise(async (resolve) => {\n            this.valueCallback = async (value) => {\n                log('waitTestValue', value)\n                const ret = await testFn(value)\n                if (ret) {\n                    log('waitTestValue OK')\n                    //await this.setMode(mode, false)\n                    resolve()\n                }\n            }\n\n        })\n        return this.setMode(mode, false)\n    }\n\n    async subscribe(mode, cbk, deltaInterval = 1) {\n        await this.setMode(mode, true, deltaInterval)\n        this.valueCallback = async (data) => {\n            await cbk(data)\n        }\n    }\n\n}\n\nmodule.exports = Device","//@ts-check\n\nconst Motor = require('./Motor')\nconst {BrakingStyle} = require('./Const')\nconst {toInt16, toInt32} = require('./Util')\n\nconst maxPower = 100\n\nclass DoubleMotor extends Motor {\n\n\n    constructor(hubDevice, portId, name) {\n        super(hubDevice, portId, 'Virtual Device')\n        this.name = name\n\n    }\n\n    /**\n     * \n     * @param {number} speed1 \n     * @param {number} speed2 \n     * @returns \n     */\n    setSpeed(speed1, speed2) {\n        return this.writePortCommand(false, 0x08, speed1, speed2, maxPower, 0)\n    }\n\n    setSpeedForTime(speed1, speed2, time, waitFeedback = false, brakingStyle = BrakingStyle.BRAKE) {\n\n        console.log('setSpeedForTime', this.portId, { speed1, speed2, time, waitFeedback, brakingStyle })\n        return this.writePortCommand(this.portId, waitFeedback, 0x0A, toInt16(time), speed1, speed2, maxPower, brakingStyle)\n    }\n\n    rotateDegrees(degrees, speed1, speed2, waitFeedback, brakingStyle = BrakingStyle.BRAKE) {\n        console.log('rotateDegrees', this.portId, { degrees, speed1, speed2, waitFeedback, brakingStyle })\n        return this.writePortCommand(waitFeedback, 0x0C, toInt32(degrees), speed1, speed2, maxPower, brakingStyle)\n    }\n\n    gotoAngle(angle1, angle2, speed, waitFeedback, brakingStyle = BrakingStyle.BRAKE) {\n        console.log('gotoAngle', this.portId, { angle1, angle2, speed, waitFeedback, brakingStyle })\n\n        return this.writePortCommand(waitFeedback, 0x0E, toInt32(angle1), toInt32(angle2), speed, maxPower, brakingStyle)\n    }\n}\n\nmodule.exports = DoubleMotor","//@ts-check\n\nconst Device = require('./Device')\nconst {PortMapNames, DeviceMode} = require('./Const')\n\nclass Led extends Device {\n\n    /**\n    * \n    * @param {HubDevice} hubDevice \n    * @param {number} portId \n    */\n    constructor(hubDevice, portId, type) {\n        super(hubDevice, portId, type)\n\n    }\n\n    setBrightness(brightness) {\n        console.log('setBrightness', this.portId, { brightness })\n        return this.writeDirectMode(DeviceMode.POWER, false, brightness)\n    }\n\n\n}\n\nmodule.exports = Led","//@ts-check\n\nconst Device = require('./Device')\nconst {PortMapNames, DeviceMode} = require('./Const')\n\nconst maxPower = 100\n\nclass Motor extends Device {\n\n    /**\n     * \n     * @param {HubDevice} hubDevice \n     * @param {number} portId \n     */\n    constructor(hubDevice, portId, type) {\n        super(hubDevice, portId, type)\n    }\n\n    setPower(power) {\n        console.log('setPower', this.portId, { power })\n        return this.writeDirectMode(DeviceMode.POWER, power)\n    }\n\n\n}\n\nmodule.exports = Motor","//@ts-check\n\nconst Device = require('./Device')\nconst {PortMapNames, DeviceMode} = require('./Const')\n\nclass RgbLed extends Device {\n\n    /**\n    * \n    * @param {HubDevice} hubDevice \n    * @param {number} portId \n    */\n    constructor(hubDevice, portId, type) {\n        super(hubDevice, portId, type)\n\n    }\n\n    async setColor(color) {\n        console.log('setColor', this.portId, { color })\n        await this.setMode(DeviceMode.COLOR, false)\n        return this.writeDirectMode(DeviceMode.COLOR, false, color)\n    }\n\n    async setRGBColor(r, g, b) {\n        console.log('setColor', this.portId, { r, g, b })\n        await this.setMode(DeviceMode.RGB, false)\n        return this.writeDirectMode(DeviceMode.RGB, false, r, g, b)\n    }\n}\n\nmodule.exports = RgbLed","//@ts-check\n\nconst Motor = require('./Motor')\nconst {PortMapNames, DeviceMode, BrakingStyle} = require('./Const')\nconst {toInt32, toInt16} = require('./Util')\n\nconst maxPower = 100\n\nclass TachoMotor extends Motor {\n\n    /**\n     * \n     * @param {HubDevice} hubDevice \n     * @param {number} portId \n     */\n    constructor(hubDevice, portId, type) {\n        super(hubDevice, portId, type)\n    }\n\n    setSpeed(speed) {\n        console.log('#setSpeed', this.portId, { speed })\n        if (speed == 0) {\n            return this.setPower(0)\n        }\n        return this.writePortCommand(true, 0x07, speed, maxPower, 0)\n    }\n\n    rotateDegrees(degrees, speed, waitEnd, brakingStyle = BrakingStyle.BRAKE) {\n        console.log('rotateDegrees', this.portId, { degrees, speed, waitEnd, brakingStyle })\n        return this.writePortCommand(waitEnd, 0x0B, toInt32(degrees), speed, maxPower, brakingStyle)\n    }\n\n    /**\n     * \n     * @param {number} angle \n     * @param {number} speed \n     * @param {boolean} waitEnd \n     * @param {number} brakingStyle \n     * @returns \n     */\n    gotoAngle(angle, speed, waitEnd, brakingStyle = BrakingStyle.BRAKE) {\n        console.log('gotoAngle', this.portId, { angle, speed, waitEnd, brakingStyle })\n\n        if (this.calibrationValue) {\n            angle *= this.calibrationValue\n        }\n\n        return this.writePortCommand(waitEnd, 0x0D, toInt32(angle), speed, maxPower, brakingStyle)\n    }\n\n    setSpeedForTime(speed, time, waitEnd = false, brakingStyle = BrakingStyle.BRAKE) {\n\n        console.log('setSpeedForTime', this.portId, { speed, time, waitEnd, brakingStyle })\n        return this.writePortCommand(waitEnd, 0x09, toInt16(time), speed, maxPower, brakingStyle)\n    }\n\n    resetZero() {\n        console.log('resetZero', this.portId)\n        return this.writeDirectMode(DeviceMode.ROTATION, true, 0x00, 0x00, 0x00, 0x00)\n    }\n\n    getSpeed() {\n        return this.getValue(DeviceMode.SPEED)\n    }\n\n    getPosition() {\n        return this.getValue(DeviceMode.ROTATION)\n    }\n\n    getAbsolutePosition() {\n        return this.getValue(DeviceMode.ABSOLUTE)\n    }\n\n    async calibrate() {\n\n        console.log('calibrate', this.portId)\n        this.setPower(50)\n        await this.waitTestValue(DeviceMode.SPEED, (value) => value > 10)\n        await this.waitTestValue(DeviceMode.SPEED, (value) => value == 0)\n\n\n        this.setPower(0)\n\n        await $$.util.wait(1000)\n\n        // await this.hubDevice.setPortFormat(this.portId, DeviceMode.ROTATION)\n        // let value = await this.hubDevice.getPortValue(this.portId)\n        // console.log(value)\t\n\n        await this.resetZero()\n\n\n        this.setPower(-50)\n        await this.waitTestValue(DeviceMode.SPEED, (value) => Math.abs(value) > 10)\n        await this.waitTestValue(DeviceMode.SPEED, (value) => value == 0)\n\n        this.setPower(0)\n        const value = await this.getValue(DeviceMode.ROTATION)\n        console.log(value)\n        const offset = Math.floor(value / 2)\n        console.log({ offset })\n        await this.gotoAngle(offset, 10, true)\n        await this.resetZero()\n        this.calibrationValue = Math.abs(offset)\n    }\n\n    /**\n     * \n     * @param {DataView} msg \n     */\n    decodeValue(msg) {\n        let value\n        switch (this.mode) {\n            case DeviceMode.ABSOLUTE:\n                value = msg.getInt16(4, true)\n                break\n            case DeviceMode.ROTATION:\n                value = msg.getInt32(4, true)\n                break\n            case DeviceMode.SPEED:\n                value = msg.getInt8(4)\n                break\n\n        }\n        return value\n    }\n\n}\n\nmodule.exports = TachoMotor","//@ts-check\n\nconst Device = require('./Device')\nconst {PortMapNames, DeviceMode} = require('./Const')\n\nclass TiltSensor extends Device {\n    constructor(hubDevice, portId, type) {\n        super(hubDevice, portId, type)\n    }\n\n    /**\n     * \n     * @param {DataView} msg \n     */\n    decodeValue(msg) {\n        let value\n        switch (this.mode) {\n            case DeviceMode.TILT_POS:\n                value = {\n                    yaw: msg.getInt16(4, true),\n                    pitch: msg.getInt16(6, true),\n                    roll: msg.getInt16(8, true)\n                }\n                break\n            default:\n                value = super.decodeValue(msg)\n                break\n        }\n        return value\n    }\n}\n\nmodule.exports = TiltSensor\n","//@ts-check\n\n/**\n  * \n  * @param {number} val \n  * @returns {Array}\n  */\nfunction toInt16(val) {\n    const buff = new Uint8Array(2)\n    const view = new DataView(buff.buffer)\n    view.setInt16(0, val, true)\n    return Array.from(buff)\n}\n\n/**\n * \n * @param {number} val \n * @returns {Array}\n */\nfunction toInt32(val) {\n    const buff = new Uint8Array(4)\n    const view = new DataView(buff.buffer)\n    view.setInt32(0, val, true)\n    return Array.from(buff)\n}\n\nfunction toUint32(val) {\n    const buff = new Uint8Array(4)\n    const view = new DataView(buff.buffer)\n    view.setUint32(0, val, true)\n    return Array.from(buff)\n}\n\nconst debug = false\n\nconst log = function (...data) {\n    if (debug) {\n        console.log.apply(console, data)\n    }\n}\n\nmodule.exports = {\n    toInt16,\n    toInt32,\n    toUint32,\n    log\n}","//@ts-check\n\n\n(function () {\n\n    const CallbackEmitter = require('./CallbackEmitter')\n    const { EventNames, DeviceMode, DeviceTypeNames, BrakingStyle, PortMap, HubPropertyPayloadNames, ModeInformationTypeNames, Event, DeviceType, PortMapNames, MessageType, HubPropertyPayload, ModeInformationType, ErrorCodeNames, MessageTypeNames } = require('./Const')\n    const Motor = require('./Motor')\n    const DoubleMotor = require('./DoubleMotor')\n    const TachoMotor = require('./TachoMotor');\n    const Device = require('./Device')\n    const RgbLed = require('./RgbLed')\n    const Led = require('./Led')\n    const TiltSensor = require('./TiltSensor')\n    const { log } = require('./Util')\n\n    const Color = {\n        BLACK: 0,\n        PINK: 1,\n        PURPLE: 2,\n        BLUE: 3,\n        LIGHT_BLUE: 4,\n        CYAN: 5,\n        GREEN: 6,\n        YELLOW: 7,\n        ORANGE: 8,\n        RED: 9,\n        WHITE: 10,\n        NONE: 255\n    }\n\n    const LPF2_SERVICE_UUID = '00001623-1212-efde-1623-785feabcd123'\n    const LPF2_CHARAC_UUID = '00001624-1212-efde-1623-785feabcd123'\n\n\n    /**\n     * \n     * @param {ArrayBuffer} buf \n     */\n    function abToString(buf) {\n        const uint8buff = new Uint8Array(buf)\n        let ret = \"\"\n        for (let i = 0; i < uint8buff.byteLength && uint8buff[i] != 0; i++) {\n            ret += String.fromCharCode(uint8buff[i])\n        }\n        return ret\n    }\n\n\n    /**\n     * \n     * @param  {...any} data \n     * @returns {ArrayBuffer}\n     */\n    function formatMsg(msgType, ...data) {\n        const buff = data.flat(4)\n        const msgLen = buff.length + 3\n        const buffer = new ArrayBuffer(msgLen)\n        const uint8Buffer = new Uint8Array(buffer)\n        uint8Buffer[0] = msgLen\n        uint8Buffer[1] = 0\n        uint8Buffer[2] = msgType\n        uint8Buffer.set(buff, 3)\n        return buffer\n    }\n\n\n    function getVirtualPortName(portId1, portId2) {\n        const portIdA = PortMapNames[portId1]\n        const portIdB = PortMapNames[portId2]\n        return `${portIdA}_${portIdB}`\n    }\n\n    const constructorMap = {\n        [DeviceType.TECHNIC_LARGE_LINEAR_MOTOR]: TachoMotor,\n        [DeviceType.TECHNIC_LARGE_ANGULAR_MOTOR_GREY]: TachoMotor,\n        [DeviceType.TECHNIC_XLARGE_LINEAR_MOTOR]: TachoMotor,\n        [DeviceType.TECHNIC_MEDIUM_HUB_TILT_SENSOR]: TiltSensor,\n        [DeviceType.HUB_LED]: RgbLed,\n        [DeviceType.LIGHT]: Led\n    }\n\n    /**@implements HUB.HubDevice */\n    class HubDevice extends EventEmitter2 {\n\n        constructor() {\n            super()\n            this.charac = null\n            this.portCmdQueue = {}\n            this.portCmdCallback = {}\n            /**@type {{[portId: string]: Device}} */\n            this.hubDevices = {}\n            this.busy = false\n            this.attachCallbacks = new CallbackEmitter()\n            this.portCmdQueue = []\n\n        }\n\n        async writePortCommand(portId, ...data) {\n\n            console.log('#writePortCommand', { portId, data })\n\n            const buffer = formatMsg(MessageType.PORT_OUTPUT_COMMAND, portId, 0x11, data)\n\n            if (!this.busy)  {\n                this.busy = true\n                await this.sendBuffer(buffer)\n            }\n            else {\n                this.portCmdQueue.push(buffer)\n                console.log('# Busy ! wait feedback')\n                \n            }\n\n        }\n\n\n\n        /**\n         * \n         * @param {BluetoothDevice} device \n         */\n        async init(device) {\n\n            const server = await device.gatt.connect()\n            log('Connected')\n            const service = await server.getPrimaryService(LPF2_SERVICE_UUID)\n            this.charac = await service.getCharacteristic(LPF2_CHARAC_UUID)\n\n            const onCharacteristicvaluechanged = (event) => {\n                this.decodeMsg(event.target.value)\n            }\n\n            device.addEventListener('gattserverdisconnected', () => {\n                console.log('onGattServerDisconnected', this)\n                this.charac.removeEventListener('characteristicvaluechanged', onCharacteristicvaluechanged)\n\n                this.charac = null\n                this.emit('disconnected')\n            })\n\n            this.charac.addEventListener('characteristicvaluechanged', onCharacteristicvaluechanged)\n            await this.charac.startNotifications()\n            await $$.util.wait(100)\n        }\n\n        async startNotification() {\n            await this.sendMsg(MessageType.HUB_PROPERTIES, HubPropertyPayload.BATTERY_VOLTAGE, 0x02)\n            await this.sendMsg(MessageType.HUB_PROPERTIES, HubPropertyPayload.SYSTEM_TYPE_ID, 0x05)\n            await this.sendMsg(MessageType.HUB_PROPERTIES, HubPropertyPayload.PRIMARY_MAC_ADDRESS, 0x05)\n            await this.sendMsg(MessageType.HUB_ALERTS, 0x01, 0x01)\n            // await this.sendMsg(MessageType.HUB_ALERTS, 0x02, 0x01)\n            // await this.sendMsg(MessageType.HUB_ALERTS, 0x03, 0x01)\n            // await this.sendMsg(MessageType.HUB_ALERTS, 0x04, 0x01)\n\n        }\n\n\n        /**\n         * \n         * @param {number} portId \n         * @returns {Promise<Motor>}\n         */\n        getMotor(portId) {\n            return new Promise((resolve, reject) => {\n                const device = this.hubDevices[portId]\n                if (device) {\n                    if (device instanceof Motor) {\n                        resolve(device)\n                    }\n                    else {\n                        reject()\n                    }\n                }\n                else {\n                    this.attachCallbacks.on((device) => {\n                        if (device.portId == portId) {\n                            log(`device on portId ${portId} is ready`)\n                            resolve(device)\n                            return true\n                        }\n                        return false\n                    })\n                }\n            })\n        }\n\n\n        /**\n         * \n         * @param {number} portId \n         * @returns {Promise<Motor>}\n         */\n        getTachoMotor(portId) {\n            return new Promise((resolve, reject) => {\n                const device = this.hubDevices[portId]\n                if (device) {\n                    if (device instanceof TachoMotor) {\n                        resolve(device)\n                    }\n                    else {\n                        reject()\n                    }\n                }\n                else {\n                    this.attachCallbacks.on((device) => {\n                        if (device.portId == portId) {\n                            log(`device on portId ${portId} is ready`)\n                            resolve(device)\n                            return true\n                        }\n                        return false\n                    })\n                }\n            })\n        }\n\n\n\n        /**\n         * \n         * @param {number} portId \n         * @returns {Promise<TiltSensor>}\n         */\n        getTiltSensor(portId) {\n            return new Promise((resolve, reject) => {\n                const device = this.hubDevices[portId]\n                if (device) {\n                    if (device instanceof TiltSensor) {\n                        resolve(device)\n                    }\n                    else {\n                        reject()\n                    }\n                }\n                else {\n                    this.attachCallbacks.on((device) => {\n                        if (device.portId == portId) {\n                            log(`device on portId ${portId} is ready`)\n                            resolve(device)\n                            return true\n                        }\n                        return false\n                    })\n                }\n            })\n\n        }\n\n        getRgbLed(portId) {\n            return new Promise((resolve, reject) => {\n                const device = this.hubDevices[portId]\n                if (device) {\n                    if (device instanceof RgbLed) {\n                        resolve(device)\n                    }\n                    else {\n                        reject()\n                    }\n                }\n                else {\n                    this.attachCallbacks.on((device) => {\n                        if (device.portId == portId) {\n                            log(`device on portId ${portId} is ready`)\n                            resolve(device)\n                            return true\n                        }\n                        return false\n                    })\n                }\n            })\n        }\n\n        getLed(portId) {\n            return new Promise((resolve, reject) => {\n                const device = this.hubDevices[portId]\n                if (device) {\n                    if (device instanceof Led) {\n                        resolve(device)\n                    }\n                    else {\n                        reject()\n                    }\n                }\n                else {\n                    this.attachCallbacks.on((device) => {\n                        if (device.portId == portId) {\n                            log(`device on portId ${portId} is ready`)\n                            resolve(device)\n                            return true\n                        }\n                        return false\n                    })\n                }\n            })\n        }\n        async getDblMotor(portId1, portId2) {\n            return new Promise(async (resolve) => {\n                const name = getVirtualPortName(portId1, portId2)\n                const device = Object.values(this.hubDevices).find((d) => d.name == name)\n                if (device) {\n                    resolve(device)\n\n                }\n                else {\n                    this.attachCallbacks.on((device) => {\n                        if (device.name == name) {\n                            console.log(`device on portId ${device.portId} is ready`)\n                            resolve(device)\n                            return true\n                        }\n                        return false\n                    })\n\n                    await this.createVirtualPort(portId1, portId2)\n                }\n            })\n        }\n\n        /**\n         * \n         * @param  {ArrayBuffer} buffer \n         */\n        async sendBuffer(buffer) {\n            console.log('# sendBuffer', buffer)\n            await this.charac.writeValueWithoutResponse(buffer)\n            // console.log('OK')\n            // if (!this.busy) {\n            //     this.busy = true\n            //     await this.charac.writeValueWithoutResponse(buffer)\n            //     this.busy = false\n            //     if (this.cmdQueue.length > 0) {\n            //         console.log('process queued cmd')\n            //         await this.charac.writeValueWithoutResponse(this.cmdQueue.shift())\n            //     }\n\n            // }\n            // else {\n            //     console.log('busy! push in queue')\n            //     this.cmdQueue.push(buffer)\n            // }\n\n        }\n\n        /**\n         * \n         * @param {number} msgType\n         * @param  {...any} data \n         */\n        sendMsg(msgType, ...data) {\n            log('sendMsg', MessageTypeNames[msgType], data)\n            return this.sendBuffer(formatMsg(msgType, data))\n        }\n\n        /**\n         * \n         * @param {string} name \n         * @returns {number}\n         */\n        getPortIdFromName(name) {\n            for (const info of Object.values(this.hubDevices)) {\n                if (info.name == name) {\n                    return info.portId\n                }\n            }\n        }\n\n        /**\n         * @param {number} portId1\n         * @param {number} portId2\n         */\n        createVirtualPort(portId1, portId2) {\n\n            return this.sendMsg(MessageType.VIRTUAL_PORT_SETUP, 0x01, portId1, portId2)\n        }\n\n        shutdown() {\n            return this.sendMsg(MessageType.HUB_ACTIONS, 0x01)\n        }\n\n\n        getHubDevices() {\n            return Object.values(this.hubDevices)\n        }\n\n        async readDeviceInfo() {\n            for (const device of this.getHubDevices()) {\n                await device.readInfo()\n            }\n        }\n\n        getDevice(portId) {\n            return this.hubDevices[portId]\n        }\n\n        /**\n         * \n         * @param {number} portId \n         * @returns {Promise<HUB.PortInformation>}\n         */\n        async getPortInformation(portId) {\n\n            const portInfo = await this.getPortInformationRequest(portId)\n            const { count, output, input, capabilities } = portInfo\n            const modes = []\n            for (let mode = 0; mode < count; mode++) {\n                const data = {}\n                let ret\n                data.mode = 0\n                ret = await this.getPortModeInformationRequest(portId, mode, ModeInformationType.NAME)\n                data.name = ret.name\n                ret = await this.getPortModeInformationRequest(portId, mode, ModeInformationType.RAW)\n                data[ret.type] = { min: ret.min, max: ret.max }\n                ret = await this.getPortModeInformationRequest(portId, mode, ModeInformationType.SI)\n                data[ret.type] = { min: ret.min, max: ret.max }\n                ret = await this.getPortModeInformationRequest(portId, mode, ModeInformationType.SYMBOL)\n                data.unit = ret.symbol\n                ret = await this.getPortModeInformationRequest(portId, mode, ModeInformationType.VALUE_FORMAT)\n                const { numValues, dataType, totalFigures, decimals } = ret\n                data[ret.type] = { numValues, dataType, totalFigures, decimals }\n                if ((input >> mode) & 0x1) {\n                    data.mode |= 1\n                }\n                if ((output >> mode) & 0x1) {\n                    data.mode |= 2\n                }\n                modes.push(data)\n            }\n\n            return { modes, capabilities }\n        }\n\n\n        getPortInformationRequest(portId) {\n            return new Promise(async (resolve) => {\n                await this.sendMsg(MessageType.PORT_INFORMATION_REQUEST, portId, 0x01)\n                this.portCmdCallback[portId] = resolve\n            })\n        }\n\n\n\n        getPortModeInformationRequest(portId, mode, type) {\n            return new Promise(async (resolve) => {\n                await this.sendMsg(MessageType.PORT_MODE_INFORMATION_REQUEST, portId, mode, type)\n                this.portCmdCallback[portId] = resolve\n            })\n        }\n\n        /**\n         * \n         * @param {DataView} msg \n         */\n        decodeMsg(msg) {\n            const bufferLen = msg.byteLength\n            const msgLen = msg.getUint8(0)\n            const msgType = msg.getUint8(2)\n            log('decodeMsg', { msgType: MessageTypeNames[msgType] })\n            switch (msgType) {\n                case MessageType.HUB_ATTACHED_IO:\n                    this.handlePortMsg(msg)\n                    break;\n                case MessageType.GENERIC_ERROR_MESSAGES:\n                    this.handleGenericErrorMsg(msg)\n                    break;\n                case MessageType.HUB_PROPERTIES:\n                    this.handleHubPropertyResponse(msg)\n                    break\n                case MessageType.HUB_ALERTS:\n                    this.handleHubAlerts(msg);\n                    break\n                case MessageType.PORT_OUTPUT_COMMAND_FEEDBACK:\n                    this.handlePortCommandFeedback(msg)\n                    break;\n                case MessageType.PORT_MODE_INFORMATION:\n                    this.handlePortModeInformation(msg)\n                    break;\n                case MessageType.PORT_INFORMATION:\n                    this.handlePortInformation(msg)\n                    break;\n                case MessageType.PORT_VALUE_SINGLE:\n                    this.handlePortValueSingle(msg)\n                    break;\n            }\n        }\n\n\n        /**\n          * \n          * @param {DataView} msg \n          */\n        handlePortValueSingle(msg) {\n            //log('msg', msg)\n            const portId = msg.getUint8(3)\n            const msgLen = msg.getUint8(0)\n            const device = this.hubDevices[portId]\n            log('handlePortValueSingle', { msgLen, portId })\n            device.handleValue(msg)\n        }\n\n\n        /**\n         * \n         * @param {DataView} msg \n         */\n        handlePortModeInformation(msg) {\n            const portId = msg.getUint8(3)\n            const mode = msg.getUint8(4)\n            const type = msg.getUint8(5)\n            const data = { portId, mode, type: ModeInformationTypeNames[type] }\n            switch (type) {\n                case ModeInformationType.NAME:\n                    data.name = abToString(msg.buffer.slice(6, msg.byteLength))\n                    break\n                case ModeInformationType.RAW:\n                case ModeInformationType.PCT:\n                case ModeInformationType.SI:\n                    data.min = msg.getFloat32(6, true)\n                    data.max = msg.getFloat32(10, true)\n                    break\n                case ModeInformationType.SYMBOL:\n                    data.symbol = abToString(msg.buffer.slice(6, msg.byteLength))\n                    break\n                case ModeInformationType.VALUE_FORMAT:\n                    data.numValues = msg.getUint8(6)\n                    data.dataType = [\"8bit\", \"16bit\", \"32bit\", \"float\"][msg.getUint8(7)]\n                    data.totalFigures = msg.getUint8(8)\n                    data.decimals = msg.getUint8(9)\n                    break\n            }\n            log('portModeInformation', data)\n            const cb = this.portCmdCallback[portId]\n            if (typeof cb == 'function') {\n                cb(data)\n                delete this.portCmdCallback[portId]\n            }\n        }\n        /**\n         * \n         * @param {DataView} msg \n         */\n        handlePortInformation(msg) {\n            const portId = msg.getUint8(3)\n            let capabilities = msg.getUint8(5)\n            const count = msg.getUint8(6)\n            const input = msg.getUint16(7, true)\n            const output = msg.getUint16(9, true)\n            log(`Port ${portId}, capabilities ${capabilities}, total modes ${count}, \n                    input modes ${input}, output modes ${output}`)\n            const availableCaps = 'output,input,logical combinable, logical synchronisable'.split(',')\n            let cap = []\n            for (let i = 0; i < 4; i++) {\n                if ((capabilities >> i) & 1) {\n                    cap.push(availableCaps[i])\n                }\n            }\n            const data = { portId, capabilities: cap.join(', '), count, input, output }\n            const cb = this.portCmdCallback[portId]\n            if (typeof cb == 'function') {\n                cb(data)\n            }\n        }\n\n\n        /**\n         * \n         * @param {DataView} msg \n         * @returns \n         */\n        handleHubPropertyResponse(msg) {\n            const property = msg.getUint8(3)\n            log({ property: HubPropertyPayloadNames[property] })\n            if (property == HubPropertyPayload.BATTERY_VOLTAGE) {\n                const batteryLevel = msg.getUint8(5)\n                log({ batteryLevel })\n                this.emit('batteryLevel', { batteryLevel })\n            }\n            else if (property == HubPropertyPayload.BUTTON_STATE) {\n                const buttonState = msg.getUint8(5)\n                log({ buttonState })\n                this.emit('buttonState', { buttonState })\n            }\n            else if (property == HubPropertyPayload.SYSTEM_TYPE_ID) {\n                const systemType = msg.getUint8(5)\n                log({ systemType })\n                //this.emit('buttonState', { buttonState })\n            }\n            else if (property == HubPropertyPayload.PRIMARY_MAC_ADDRESS) {\n                const bytes = []\n                for (let i = 0; i < 6; i++) {\n                    bytes.push(msg.getUint8(5 + i).toString(16).toLocaleUpperCase().padStart(2, '0'))\n                }\n                log({ bytes })\n                this.emit('address', { address: bytes.join(':') })\n            }\n        }\n        /**\n         * \n         * @param {DataView} msg \n         */\n        handleGenericErrorMsg(msg) {\n            const cmdType = msg.getUint8(3)\n            const errorCode = msg.getUint8(4)\n            log({ cmdType, errorCode: ErrorCodeNames[errorCode] })\n            this.emit('error', { cmdType, errorCode: ErrorCodeNames[errorCode] })\n        }\n\n        /**\n         * \n         * @param {DataView} msg \n         */\n        handleHubAlerts(msg) {\n            const bufferLen = msg.byteLength\n            const msgLen = msg.getUint8(0)\n            const type = msg.getUint8(3)\n            const operation = msg.getUint8(4)\n            const payload = msg.getUint8(5)\n\n            log('handleHubAlerts', { bufferLen, msgLen, type, operation, payload })\n            this.emit('hubAlerts', { type, payload })\n        }\n\n        /**\n         * \n         * @param {DataView} msg \n         */\n        handlePortCommandFeedback(msg) {\n            for (let offset = 3; offset < msg.byteLength; offset += 2) {\n                const portId = msg.getUint8(offset)\n                const feedback = msg.getUint8(offset + 1)\n                const device = this.hubDevices[portId]\n                console.log('#handlePortCommandFeedback', { portId, feedback })\n                this.busy = false\n                if (device != undefined) {\n                    device.handleFeedback(feedback)\n                }\n                \n                const buffer = this.portCmdQueue.shift()\n                if (buffer) {\n                    console.log('# process queued cmd')\n                    this.busy = true\n                    this.sendBuffer(buffer)\n                }\n\n            }\n        }\n        /**\n         * \n         * @param {DataView} msg \n         */\n        handlePortMsg(msg) {\n\n            const portId = msg.getUint8(3)\n            const eventType = msg.getUint8(4)\n            const type = eventType ? msg.getUint16(5, true) : 0\n            const deviceTypeName = DeviceTypeNames[type] || \"Unknown\"\n            const eventName = EventNames[eventType]\n\n            console.log('handlePortMsg', { portId, eventName, deviceTypeName })\n            if (eventType == Event.ATTACHED_IO) {\n\n                let constructor = constructorMap[type]\n                if (!constructor) {\n                    constructor = Device\n                }\n                const device = new constructor(this, portId, deviceTypeName)\n                this.hubDevices[portId] = device\n                this.attachCallbacks.emit(device)\n\n                this.emit('attach', device)\n            }\n            else if (eventType == Event.DETACHED_IO) {\n                delete this.hubDevices[portId]\n                this.emit('detach', { portId })\n            }\n            else if (eventType == Event.ATTACHED_VIRTUAL_IO) {\n                const portId1 = msg.getUint8(7)\n                const portId2 = msg.getUint8(8)\n\n                const device = new DoubleMotor(this, portId, getVirtualPortName(portId1, portId2))\n                this.hubDevices[portId] = device\n                this.attachCallbacks.emit(device)\n\n                this.emit('attach', device)\n            }\n        }\n    }\n\n    $$.service.registerService('hub', {\n\n        init: function () {\n\n            /**\n             * \n             * @param {Device} device \n             * @returns {boolean}\n             */\n            function isMotor(device) {\n                return device instanceof Motor\n            }\n\n            /**\n             * \n             * @param {Device} device \n             * @returns {boolean}\n             */\n            function isDoubleMotor(device) {\n                return device instanceof DoubleMotor\n            }\n\n            /**\n             * \n             * @param {Device} device \n             * @returns {boolean}\n             */\n            function isLed(device) {\n                return device instanceof Led\n            }\n\n            /**\n             * \n             * @param {Device} device \n             * @returns {boolean}\n             */\n            function isTachoMotor(device) {\n                return device instanceof TachoMotor\n            }\n\n\n            /**\n             * \n             * @returns {Promise<HubDevice>}\n             */\n            async function connect() {\n                log('connect')\n\n                const device = await navigator.bluetooth.requestDevice({\n                    acceptAllDevices: true,\n                    optionalServices: [LPF2_SERVICE_UUID]\n                })\n\n                const hubDevice = new HubDevice()\n                await hubDevice.init(device)\n\n                return hubDevice\n\n                //await sendMsg(MessageType.HUB_PROPERTIES, HubPropertyPayload.BATTERY_TYPE, 0x05)\n                //await sendMsg(formatMsg(MessageType.HUB_PROPERTIES, HubPropertyPayload.BATTERY_VOLTAGE, 0x02))\n                //await sendMsg(MessageType.HUB_PROPERTIES, HubPropertyPayload.BUTTON_STATE, 0x02)\n            }\n\n            return {\n                connect,\n                Color,\n                PortMap,\n                PortMapNames,\n                DeviceMode,\n                BrakingStyle,\n                DeviceTypeNames,\n                isMotor,\n                isTachoMotor,\n                isLed,\n                isDoubleMotor\n            }\n        }\n    });\n\n})();\n\n\n"]}