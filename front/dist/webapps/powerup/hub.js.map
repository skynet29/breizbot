{"version":3,"sources":["../../../../node_modules/browser-pack/_prelude.js","lib/CallbackEmitter.js","lib/Const.js","lib/Device.js","lib/DoubleMotor.js","lib/Led.js","lib/Motor.js","lib/TiltSensor.js","lib/Util.js","lib/hub.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","[object Object]","this","callbacks","callback","push","data","splice","getEnumName","$$","util","Event","DETACHED_IO","ATTACHED_IO","ATTACHED_VIRTUAL_IO","EventNames","MessageType","HUB_PROPERTIES","HUB_ACTIONS","HUB_ALERTS","HUB_ATTACHED_IO","GENERIC_ERROR_MESSAGES","HW_NETWORK_COMMANDS","FW_UPDATE_GO_INTO_BOOT_MODE","FW_UPDATE_LOCK_MEMORY","FW_UPDATE_LOCK_STATUS_REQUEST","FW_LOCK_STATUS","PORT_INFORMATION_REQUEST","PORT_MODE_INFORMATION_REQUEST","PORT_INPUT_FORMAT_SETUP_SINGLE","PORT_INPUT_FORMAT_SETUP_COMBINEDMODE","PORT_INFORMATION","PORT_MODE_INFORMATION","PORT_VALUE_SINGLE","PORT_VALUE_COMBINEDMODE","PORT_INPUT_FORMAT_SINGLE","PORT_INPUT_FORMAT_COMBINEDMODE","VIRTUAL_PORT_SETUP","PORT_OUTPUT_COMMAND","PORT_OUTPUT_COMMAND_FEEDBACK","MessageTypeNames","DeviceType","UNKNOWN","SIMPLE_MEDIUM_LINEAR_MOTOR","TRAIN_MOTOR","LIGHT","VOLTAGE_SENSOR","CURRENT_SENSOR","PIEZO_BUZZER","HUB_LED","TILT_SENSOR","MOTION_SENSOR","COLOR_DISTANCE_SENSOR","MEDIUM_LINEAR_MOTOR","MOVE_HUB_MEDIUM_LINEAR_MOTOR","MOVE_HUB_TILT_SENSOR","DUPLO_TRAIN_BASE_MOTOR","DUPLO_TRAIN_BASE_SPEAKER","DUPLO_TRAIN_BASE_COLOR_SENSOR","DUPLO_TRAIN_BASE_SPEEDOMETER","TECHNIC_LARGE_LINEAR_MOTOR","TECHNIC_XLARGE_LINEAR_MOTOR","TECHNIC_MEDIUM_ANGULAR_MOTOR","TECHNIC_LARGE_ANGULAR_MOTOR","TECHNIC_MEDIUM_HUB_GEST_SENSOR","REMOTE_CONTROL_BUTTON","REMOTE_CONTROL_RSSI","TECHNIC_MEDIUM_HUB_ACCELEROMETER","TECHNIC_MEDIUM_HUB_GYRO_SENSOR","TECHNIC_MEDIUM_HUB_TILT_SENSOR","TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR","TECHNIC_COLOR_SENSOR","TECHNIC_DISTANCE_SENSOR","TECHNIC_FORCE_SENSOR","TECHNIC_3X3_COLOR_LIGHT_MATRIX","TECHNIC_SMALL_ANGULAR_MOTOR","MARIO_ACCELEROMETER","MARIO_BARCODE_SENSOR","MARIO_PANTS_SENSOR","TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY","TECHNIC_LARGE_ANGULAR_MOTOR_GREY","VIRTUAL_DEVICE","DeviceTypeNames","ErrorCodeNames","ACK","MACK","BUFFER_OVERFLOW","TIMEOUT","COMMAND_NOT_RECOGNIZED","INVALID_USE","OVERCURRENT","INTERNAL_ERROR","HubPropertyPayload","ADVERTISING_NAME","BUTTON_STATE","FW_VERSION","HW_VERSION","RSSI","BATTERY_VOLTAGE","BATTERY_TYPE","MANUFACTURER_NAME","RADIO_FIRMWARE_VERSION","LWP_PROTOCOL_VERSION","SYSTEM_TYPE_ID","HW_NETWORK_ID","PRIMARY_MAC_ADDRESS","SECONDARY_MAC_ADDRESS","HW_NETWORK_FAMILY","HubPropertyPayloadNames","ModeInformationType","NAME","RAW","PCT","SI","SYMBOL","MAPPING","USED_INTERNALLY","MOTOR_BIAS","CAPABILITY_BITS","VALUE_FORMAT","ModeInformationTypeNames","PortMap","A","B","C","D","ACCELEROMETER","GYRO_SENSOR","PortMapNames","BrakingStyle","FLOAT","HOLD","BRAKE","DeviceMode","POWER","SPEED","ROTATION","ABSOLUTE","COLOR","RGB","TILT_POS","CallbackEmitter","log","toUint32","hubDevice","portId","type","name","feedbackCallback","valueCallbacks","mode","undefined","waitFeedback","Promise","async","resolve","sendMsg","writePortCommand","notificationEnabled","deltaInterval","msg","value","decodeValue","emit","console","setMode","on","testFn","cbk","Device","toInt16","toInt32","maxPower","super","speed1","speed2","time","brakingStyle","degrees","angle1","angle2","speed","color","writeDirectMode","g","b","power","angle","calibrationValue","setPower","waitTestValue","wait","resetZero","Math","abs","getValue","offset","floor","gotoAngle","getInt16","getInt32","getInt8","yaw","pitch","roll","val","buff","Uint8Array","DataView","buffer","setInt16","Array","from","setInt32","setUint32","Motor","DoubleMotor","Led","TiltSensor","Color","BLACK","PINK","PURPLE","BLUE","LIGHT_BLUE","CYAN","GREEN","YELLOW","ORANGE","RED","WHITE","NONE","LPF2_SERVICE_UUID","LPF2_CHARAC_UUID","abToString","buf","uint8buff","ret","byteLength","String","fromCharCode","getVirtualPortName","portId1","portId2","constructorMap","HubDevice","EventEmitter2","charac","portCmdQueue","portCmdCallback","hubDevices","busy","cmdQueue","attachCallbacks","device","server","gatt","connect","service","getPrimaryService","getCharacteristic","onCharacteristicvaluechanged","event","decodeMsg","target","addEventListener","removeEventListener","startNotifications","reject","Object","values","find","d","createVirtualPort","writeValueWithoutResponse","sendBuffer","shift","msgType","flat","msgLen","ArrayBuffer","uint8Buffer","set","formatMsg","info","portInfo","getPortInformationRequest","capabilities","count","output","input","bitSet","max","modes","getPortModeInformationRequest","min","unit","symbol","numValues","dataType","totalFigures","decimals","getUint8","handlePortMsg","handleGenericErrorMsg","handleHubPropertyResponse","handleHubAlerts","handlePortCommandFeedback","handlePortModeInformation","handlePortInformation","handlePortValueSingle","handleValue","slice","getFloat32","cb","getUint16","availableCaps","split","cap","join","property","batteryLevel","buttonState","systemType","bytes","toString","toLocaleUpperCase","padStart","address","cmdType","errorCode","bufferLen","operation","payload","feedback","handleFeedback","eventType","deviceTypeName","eventName","constructor","registerService","init","navigator","bluetooth","requestDevice","acceptAllDevices","optionalServices"],"mappings":"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","file":"hub.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","class CallbackEmitter {\n    constructor() {\n        this.callbacks = []\n    }\n\n    /**\n     * \n     * @param {(data) => boolean} callback \n     */\n    on(callback) {\n        this.callbacks.push(callback)\n    }\n\n    emit(data) {\n        let i = this.callbacks.length\n\n        while (i--) {\n            const callback = this.callbacks[i]\n            if (callback(data)) {\n                this.callbacks.splice(i, 1)\n            }\n        }\n    }\n}\n\nmodule.exports = CallbackEmitter","//@ts-check\n\nconst { getEnumName } = $$.util\n\nconst Event = {\n    DETACHED_IO: 0x00,\n    ATTACHED_IO: 0x01,\n    ATTACHED_VIRTUAL_IO: 0x02,\n}\nconst EventNames = getEnumName(Event)\n\nconst HubAlertType = {\n    LOW_VOLTAGE: 0x01,\n    HIGH_CURRENT: 0x02,\n    LOW_SIGNAL_STRENGTH: 0x03,\n    OVER_POWER_CONDITION: 0x04\n}\n\nconst MessageType = {\n    HUB_PROPERTIES: 0x01,\n    HUB_ACTIONS: 0x02,\n    HUB_ALERTS: 0x03,\n    HUB_ATTACHED_IO: 0x04,\n    GENERIC_ERROR_MESSAGES: 0x05,\n    HW_NETWORK_COMMANDS: 0x08,\n    FW_UPDATE_GO_INTO_BOOT_MODE: 0x10,\n    FW_UPDATE_LOCK_MEMORY: 0x11,\n    FW_UPDATE_LOCK_STATUS_REQUEST: 0x12,\n    FW_LOCK_STATUS: 0x13,\n    PORT_INFORMATION_REQUEST: 0x21,\n    PORT_MODE_INFORMATION_REQUEST: 0x22,\n    PORT_INPUT_FORMAT_SETUP_SINGLE: 0x41,\n    PORT_INPUT_FORMAT_SETUP_COMBINEDMODE: 0x42,\n    PORT_INFORMATION: 0x43,\n    PORT_MODE_INFORMATION: 0x44,\n    PORT_VALUE_SINGLE: 0x45,\n    PORT_VALUE_COMBINEDMODE: 0x46,\n    PORT_INPUT_FORMAT_SINGLE: 0x47,\n    PORT_INPUT_FORMAT_COMBINEDMODE: 0x48,\n    VIRTUAL_PORT_SETUP: 0x61,\n    PORT_OUTPUT_COMMAND: 0x81,\n    PORT_OUTPUT_COMMAND_FEEDBACK: 0x82,\n}\n\n\n\nconst MessageTypeNames = getEnumName(MessageType)\n\nconst DeviceType = {\n    UNKNOWN: 0,\n    SIMPLE_MEDIUM_LINEAR_MOTOR: 1,\n    TRAIN_MOTOR: 2,\n    LIGHT: 8,\n    VOLTAGE_SENSOR: 20,\n    CURRENT_SENSOR: 21,\n    PIEZO_BUZZER: 22,\n    HUB_LED: 23,\n    TILT_SENSOR: 34,\n    MOTION_SENSOR: 35,\n    COLOR_DISTANCE_SENSOR: 37,\n    MEDIUM_LINEAR_MOTOR: 38,\n    MOVE_HUB_MEDIUM_LINEAR_MOTOR: 39,\n    MOVE_HUB_TILT_SENSOR: 40,\n    DUPLO_TRAIN_BASE_MOTOR: 41,\n    DUPLO_TRAIN_BASE_SPEAKER: 42,\n    DUPLO_TRAIN_BASE_COLOR_SENSOR: 43,\n    DUPLO_TRAIN_BASE_SPEEDOMETER: 44,\n    TECHNIC_LARGE_LINEAR_MOTOR: 46, // Technic Control+\n    TECHNIC_XLARGE_LINEAR_MOTOR: 47, // Technic Control+\n    TECHNIC_MEDIUM_ANGULAR_MOTOR: 48, // Spike Prime\n    TECHNIC_LARGE_ANGULAR_MOTOR: 49, // Spike Prime\n    TECHNIC_MEDIUM_HUB_GEST_SENSOR: 54,\n    REMOTE_CONTROL_BUTTON: 55,\n    REMOTE_CONTROL_RSSI: 56,\n    TECHNIC_MEDIUM_HUB_ACCELEROMETER: 57,\n    TECHNIC_MEDIUM_HUB_GYRO_SENSOR: 58,\n    TECHNIC_MEDIUM_HUB_TILT_SENSOR: 59,\n    TECHNIC_MEDIUM_HUB_TEMPERATURE_SENSOR: 60,\n    TECHNIC_COLOR_SENSOR: 61, // Spike Prime\n    TECHNIC_DISTANCE_SENSOR: 62, // Spike Prime\n    TECHNIC_FORCE_SENSOR: 63, // Spike Prime\n    TECHNIC_3X3_COLOR_LIGHT_MATRIX: 64, // Spike Essential\n    TECHNIC_SMALL_ANGULAR_MOTOR: 65, // Spike Essential\n    MARIO_ACCELEROMETER: 71,\n    MARIO_BARCODE_SENSOR: 73,\n    MARIO_PANTS_SENSOR: 74,\n    TECHNIC_MEDIUM_ANGULAR_MOTOR_GREY: 75, // Mindstorms\n    TECHNIC_LARGE_ANGULAR_MOTOR_GREY: 76, // Technic Control+\n    VIRTUAL_DEVICE: 100\n}\n\nconst DeviceTypeNames = getEnumName(DeviceType)\n\nconst ErrorCode = {\n    ACK: 0x01,\n    MACK: 0x02,\n    BUFFER_OVERFLOW: 0x03,\n    TIMEOUT: 0x04,\n    COMMAND_NOT_RECOGNIZED: 0x05,\n    INVALID_USE: 0x06,\n    OVERCURRENT: 0x07,\n    INTERNAL_ERROR: 0x08,\n}\n\nconst ErrorCodeNames = getEnumName(ErrorCode)\n\n\nconst HubPropertyPayload = {\n    ADVERTISING_NAME: 0x01,\n    BUTTON_STATE: 0x02,\n    FW_VERSION: 0x03,\n    HW_VERSION: 0x04,\n    RSSI: 0x05,\n    BATTERY_VOLTAGE: 0x06,\n    BATTERY_TYPE: 0x07,\n    MANUFACTURER_NAME: 0x08,\n    RADIO_FIRMWARE_VERSION: 0x09,\n    LWP_PROTOCOL_VERSION: 0x0A,\n    SYSTEM_TYPE_ID: 0x0B,\n    HW_NETWORK_ID: 0x0C,\n    PRIMARY_MAC_ADDRESS: 0x0D,\n    SECONDARY_MAC_ADDRESS: 0x0E,\n    HW_NETWORK_FAMILY: 0x0F\n}\n\nconst HubPropertyPayloadNames = getEnumName(HubPropertyPayload)\n\nconst ModeInformationType = {\n    NAME: 0x00,\n    RAW: 0x01,\n    PCT: 0x02,\n    SI: 0x03,\n    SYMBOL: 0x04,\n    MAPPING: 0x05,\n    USED_INTERNALLY: 0x06,\n    MOTOR_BIAS: 0x07,\n    CAPABILITY_BITS: 0x08,\n    VALUE_FORMAT: 0x80,\n}\n\nconst ModeInformationTypeNames = getEnumName(ModeInformationType)\n\nconst PortMap = {\n    \"A\": 0,\n    \"B\": 1,\n    \"C\": 2,\n    \"D\": 3,\n    \"HUB_LED\": 50,\n    \"CURRENT_SENSOR\": 59,\n    \"VOLTAGE_SENSOR\": 60,\n    \"ACCELEROMETER\": 97,\n    \"GYRO_SENSOR\": 98,\n    \"TILT_SENSOR\": 99\n}\n\nconst DeviceMode = {\n    POWER: 0x00,\n    SPEED: 0x01,\n    ROTATION: 0x02,\n    ABSOLUTE: 0x03,\n    COLOR: 0x00,\n    RGB: 0x01,\n    TILT_POS: 0x00\n}\n\nconst BrakingStyle = {\n    FLOAT: 0,\n    HOLD: 126,\n    BRAKE: 127\n}\n\nconst PortMapNames = getEnumName(PortMap)\n\nmodule.exports = {\n    MessageType,\n    MessageTypeNames,\n    Event,\n    EventNames,\n    BrakingStyle,\n    DeviceMode,\n    DeviceType,\n    DeviceTypeNames,\n    ModeInformationType,\n    ModeInformationTypeNames,\n    PortMap,\n    PortMapNames,\n    HubPropertyPayload,\n    HubPropertyPayloadNames,\n    ErrorCodeNames\n}","//@ts-check\n\nconst CallbackEmitter = require('./CallbackEmitter')\nconst {MessageType} = require('./Const')\nconst {log, toUint32} = require('./Util')\n\nclass Device {\n    /**\n     * \n     * @param {HUB.HubDevice} hubDevice \n     * @param {number} portId \n     * @param {string} type \n     * @param {string} [name] \n     */\n    constructor(hubDevice, portId, type, name) {\n        this.hubDevice = hubDevice\n        this.portId = portId\n        this.type = type\n        this.name = name\n        this.feedbackCallback = null\n        this.valueCallbacks = new CallbackEmitter()\n        this.mode = undefined\n    }\n\n    async writePortCommand(waitFeedback, ...data) {\n\n        log('writePortCommand', this.portId, { waitFeedback, data })\n\n        if (waitFeedback) {\n\n            return new Promise(async (resolve) => {\n\n                await this.hubDevice.sendMsg(MessageType.PORT_OUTPUT_COMMAND, this.portId, 0x11, data)\n\n                this.feedbackCallback = resolve\n            })\n        }\n        else {\n            return this.hubDevice.sendMsg(MessageType.PORT_OUTPUT_COMMAND, this.portId, 0x10, data)\n        }\n\n    }\n\n    /**\n     * \n     * @param {number} mode\n     * @param {boolean} waitFeedback \n     * @param  {...any} data \n     * @returns \n     */\n    writeDirectMode(mode, waitFeedback, ...data) {\n        log('writeDirectMode', this.portId, {mode, waitFeedback })\n        return this.writePortCommand(waitFeedback, 0x51, mode, data)\n    }\n\n    /**\n     * \n     * @param {number} mode \n     * @param {boolean} notificationEnabled \n     * @param {number} deltaInterval \n     * @returns \n     */\n    setMode(mode, notificationEnabled, deltaInterval = 1) {\n        log('setMode', this.portId, { mode, notificationEnabled })\n\n        this.mode = mode\n\n        return this.hubDevice.sendMsg(MessageType.PORT_INPUT_FORMAT_SETUP_SINGLE,\n            this.portId, mode, toUint32(deltaInterval), notificationEnabled ? 0x01 : 0)\n    }\n\n    /**\n     * \n     * @param {DataView} msg \n     */\n    decodeValue(msg) {\n\n    }\n    /**\n     * \n     * @param {DataView} msg \n     */\n    handleValue(msg) {\n        let value = this.decodeValue(msg)\n\n        if (value != undefined) {\n            this.valueCallbacks.emit(value)\n        }\n    }\n\n    handleFeedback() {\n        if (typeof this.feedbackCallback == 'function') {\n            this.feedbackCallback()\n        }\n    }\n\n    /**\n     * \n     * @param {number} mode \n     * @returns \n    */\n    async getValue(mode) {\n        console.log('getValue', this.portId, { mode })\n        await this.setMode(mode, false)\n        return new Promise(async (resolve) => {\n            this.valueCallbacks.on((data) => {\n                resolve(data)\n                return true\n            })\n            await this.hubDevice.sendMsg(MessageType.PORT_INFORMATION_REQUEST, this.portId, 0x00)\n\n        })\n    }\n\n    /**\n     * \n     * @param {number} mode \n     * @param {(data) => boolean} testFn \n     * @returns \n     */\n    async waitTestValue(mode, testFn) {\n        return new Promise(async (resolve) => {\n            await this.setMode(mode, true)\n            this.valueCallbacks.on(async (value) => {\n                log('waitTestValue', value)\n                if (testFn(value)) {\n                    log('waitTestValue OK')\n                    await this.setMode(mode, false)\n                    resolve()\n                    return true\n                }\n                return false\n            })\n                \n        })\n    }\n\n    async subscribe(mode, cbk, deltaInterval = 1) {\n        await this.setMode(mode, true, deltaInterval)\n        this.valueCallbacks.on((data) => {\n            cbk(data)\n            return false\n        })\n    }\n}\n\nmodule.exports = Device","//@ts-check\n\nconst Device = require('./Device')\nconst {BrakingStyle} = require('./Const')\nconst {toInt16, toInt32} = require('./Util')\n\nconst maxPower = 100\n\nclass DoubleMotor extends Device {\n\n\n    constructor(hubDevice, portId, name) {\n        super(hubDevice, portId, 'Virtual Device', name)\n\n    }\n\n    /**\n     * \n     * @param {number} speed1 \n     * @param {number} speed2 \n     * @returns \n     */\n    setSpeed(speed1, speed2) {\n        return this.writePortCommand(false, 0x08, speed1, speed2, maxPower, 0)\n    }\n\n    setSpeedForTime(speed1, speed2, time, waitFeedback = false, brakingStyle = BrakingStyle.BRAKE) {\n\n        console.log('setSpeedForTime', this.portId, { speed1, speed2, time, waitFeedback, brakingStyle })\n        return this.writePortCommand(this.portId, waitFeedback, 0x0A, toInt16(time), speed1, speed2, maxPower, brakingStyle)\n    }\n\n    rotateDegrees(degrees, speed1, speed2, waitFeedback, brakingStyle = BrakingStyle.BRAKE) {\n        console.log('rotateDegrees', this.portId, { degrees, speed1, speed2, waitFeedback, brakingStyle })\n        return this.writePortCommand(waitFeedback, 0x0C, toInt32(degrees), speed1, speed2, maxPower, brakingStyle)\n    }\n\n    gotoAngle(angle1, angle2, speed, waitFeedback, brakingStyle = BrakingStyle.BRAKE) {\n        console.log('gotoAngle', this.portId, { angle1, angle2, speed, waitFeedback, brakingStyle })\n\n        return this.writePortCommand(waitFeedback, 0x0E, toInt32(angle1), toInt32(angle2), speed, maxPower, brakingStyle)\n    }\n}\n\nmodule.exports = DoubleMotor","//@ts-check\n\nconst Device = require('./Device')\nconst {PortMapNames, DeviceMode} = require('./Const')\n\nclass Led extends Device {\n\n    /**\n    * \n    * @param {HubDevice} hubDevice \n    * @param {number} portId \n    */\n    constructor(hubDevice, portId, type) {\n        super(hubDevice, portId, type, PortMapNames[portId])\n\n    }\n\n    async setColor(color) {\n        console.log('setColor', this.portId, { color })\n        await this.setMode(DeviceMode.COLOR, false)\n        return this.writeDirectMode(DeviceMode.COLOR, false, color)\n    }\n\n    async setRGBColor(r, g, b) {\n        console.log('setColor', this.portId, { r, g, b })\n        await this.setMode(DeviceMode.RGB, false)\n        return this.writeDirectMode(DeviceMode.RGB, false, r, g, b)\n    }\n}\n\nmodule.exports = Led","//@ts-check\n\nconst Device = require('./Device')\nconst {PortMapNames, DeviceMode, BrakingStyle} = require('./Const')\nconst {toInt32, toInt16} = require('./Util')\n\nconst maxPower = 100\n\nclass Motor extends Device {\n\n    /**\n     * \n     * @param {HubDevice} hubDevice \n     * @param {number} portId \n     */\n    constructor(hubDevice, portId, type) {\n        super(hubDevice, portId, type, PortMapNames[portId])\n    }\n\n    setPower(power) {\n        console.log('setPower', this.portId, { power })\n        return this.writeDirectMode(DeviceMode.POWER, false, power)\n    }\n\n    setSpeed(speed) {\n        console.log('setSpeed', this.portId, { speed })\n        return this.writePortCommand(false, 0x07, speed, maxPower, 0)\n    }\n\n    rotateDegrees(degrees, speed, waitFeedback, brakingStyle = BrakingStyle.BRAKE) {\n        console.log('rotateDegrees', this.portId, { degrees, speed, waitFeedback, brakingStyle })\n        return this.writePortCommand(waitFeedback, 0x0B, toInt32(degrees), speed, maxPower, brakingStyle)\n    }\n\n    /**\n     * \n     * @param {number} angle \n     * @param {number} speed \n     * @param {boolean} waitFeedback \n     * @param {number} brakingStyle \n     * @returns \n     */\n    gotoAngle(angle, speed, waitFeedback, brakingStyle = BrakingStyle.BRAKE) {\n        console.log('gotoAngle', this.portId, { angle, speed, waitFeedback, brakingStyle })\n\n        if (this.calibrationValue) {\n            angle *= this.calibrationValue\n        }\n\n        return this.writePortCommand(waitFeedback, 0x0D, toInt32(angle), speed, maxPower, brakingStyle)\n    }\n\n    setSpeedForTime(speed, time, waitFeedback = false, brakingStyle = BrakingStyle.BRAKE) {\n\n        console.log('setSpeedForTime', this.portId, { speed, time, waitFeedback, brakingStyle })\n        return this.writePortCommand(waitFeedback, 0x09, toInt16(time), speed, maxPower, brakingStyle)\n    }\n\n    resetZero() {\n        console.log('resetZero', this.portId)\n        return this.writeDirectMode(DeviceMode.ROTATION, true, 0x00, 0x00, 0x00, 0x00)\n    }\n\n\n    async calibrate() {\n\n        console.log('calibrate', this.portId)\n        this.setPower(50)\n        await this.waitTestValue(DeviceMode.SPEED, (value) => value > 10)\n        await this.waitTestValue(DeviceMode.SPEED, (value) => value == 0)\n\n\n        this.setPower(0)\n\n        await $$.util.wait(1000)\n\n        // await this.hubDevice.setPortFormat(this.portId, DeviceMode.ROTATION)\n        // let value = await this.hubDevice.getPortValue(this.portId)\n        // console.log(value)\t\n\n        await this.resetZero()\n\n\n        this.setPower(-50)\n        await this.waitTestValue(DeviceMode.SPEED, (value) => Math.abs(value) > 10)\n        await this.waitTestValue(DeviceMode.SPEED, (value) => value == 0)\n\n        this.setPower(0)\n        const value = await this.getValue(DeviceMode.ROTATION)\n        console.log(value)\n        const offset = Math.floor(value / 2)\n        console.log({ offset })\n        await this.gotoAngle(offset, 10, true)\n        await this.resetZero()\n        this.calibrationValue = Math.abs(offset)\n    }\n\n    /**\n     * \n     * @param {DataView} msg \n     */\n    decodeValue(msg) {\n        let value\n        switch (this.mode) {\n            case DeviceMode.ABSOLUTE:\n                value = msg.getInt16(4, true)\n                break\n            case DeviceMode.ROTATION:\n                value = msg.getInt32(4, true)\n                break\n            case DeviceMode.SPEED:\n                value = msg.getInt8(4)\n                break\n\n        }\n        return value\n    }\n\n}\n\nmodule.exports = Motor","//@ts-check\n\nconst Device = require('./Device')\nconst {PortMapNames, DeviceMode} = require('./Const')\n\nclass TiltSensor extends Device {\n    constructor(hubDevice, portId, type) {\n        super(hubDevice, portId, type, PortMapNames[portId])\n    }\n\n    /**\n     * \n     * @param {DataView} msg \n     */\n    decodeValue(msg) {\n        let value\n        switch (this.mode) {\n            case DeviceMode.TILT_POS:\n                value = {\n                    yaw: msg.getInt16(4, true),\n                    pitch: msg.getInt16(6, true),\n                    roll: msg.getInt16(8, true)\n                }\n                break\n        }\n        return value\n    }\n}\n\nmodule.exports = TiltSensor\n","//@ts-check\n\n/**\n  * \n  * @param {number} val \n  * @returns {Array}\n  */\nfunction toInt16(val) {\n    const buff = new Uint8Array(2)\n    const view = new DataView(buff.buffer)\n    view.setInt16(0, val, true)\n    return Array.from(buff)\n}\n\n/**\n * \n * @param {number} val \n * @returns {Array}\n */\nfunction toInt32(val) {\n    const buff = new Uint8Array(4)\n    const view = new DataView(buff.buffer)\n    view.setInt32(0, val, true)\n    return Array.from(buff)\n}\n\nfunction toUint32(val) {\n    const buff = new Uint8Array(4)\n    const view = new DataView(buff.buffer)\n    view.setUint32(0, val, true)\n    return Array.from(buff)\n}\n\nconst debug = false\n\nconst log = function (...data) {\n    if (debug) {\n        console.log.apply(console, data)\n    }\n}\n\nmodule.exports = {\n    toInt16,\n    toInt32,\n    toUint32,\n    log\n}","//@ts-check\n\n(function () {\n\n    const CallbackEmitter = require('./CallbackEmitter')\n    const {EventNames, DeviceMode, DeviceTypeNames, BrakingStyle, PortMap, HubPropertyPayloadNames, ModeInformationTypeNames, Event, DeviceType, PortMapNames, MessageType, HubPropertyPayload, ModeInformationType, ErrorCodeNames, MessageTypeNames} = require('./Const')\n    const Motor = require('./Motor')\n    const DoubleMotor = require('./DoubleMotor')\n    const Device = require('./Device')\n    const Led = require('./Led')\n    const TiltSensor = require('./TiltSensor')\n    const {log} = require('./Util')\n\n    const Color = {\n        BLACK: 0,\n        PINK: 1,\n        PURPLE: 2,\n        BLUE: 3,\n        LIGHT_BLUE: 4,\n        CYAN: 5,\n        GREEN: 6,\n        YELLOW: 7,\n        ORANGE: 8,\n        RED: 9,\n        WHITE: 10,\n        NONE: 255\n    }\n\n    const LPF2_SERVICE_UUID = '00001623-1212-efde-1623-785feabcd123'\n    const LPF2_CHARAC_UUID = '00001624-1212-efde-1623-785feabcd123'\n\n \n    /**\n     * \n     * @param {ArrayBuffer} buf \n     */\n    function abToString(buf) {\n        const uint8buff = new Uint8Array(buf)\n        let ret = \"\"\n        for (let i = 0; i < uint8buff.byteLength && uint8buff[i] != 0; i++) {\n            ret += String.fromCharCode(uint8buff[i])\n        }\n        return ret\n    }\n\n\n \n\n    /**\n     * \n     * @param  {...any} data \n     * @returns {ArrayBuffer}\n     */\n    function formatMsg(msgType, ...data) {\n        const buff = data.flat(3)\n        const msgLen = buff.length + 3\n        const buffer = new ArrayBuffer(msgLen)\n        const uint8Buffer = new Uint8Array(buffer)\n        uint8Buffer[0] = msgLen\n        uint8Buffer[1] = 0\n        uint8Buffer[2] = msgType\n        uint8Buffer.set(buff, 3)\n        return buffer\n    }\n\n\n    function getVirtualPortName(portId1, portId2) {\n        const portIdA = PortMapNames[portId1]\n        const portIdB = PortMapNames[portId2]\n        return `${portIdA}_${portIdB}`\n    }\n\n    const constructorMap = {\n        [DeviceType.TECHNIC_LARGE_LINEAR_MOTOR]: Motor,\n        [DeviceType.TECHNIC_LARGE_ANGULAR_MOTOR_GREY]: Motor,\n        [DeviceType.TECHNIC_XLARGE_LINEAR_MOTOR]: Motor,\n        [DeviceType.TECHNIC_MEDIUM_HUB_TILT_SENSOR]: TiltSensor,\n        [DeviceType.HUB_LED]: Led\n    }\n\n    /**@implements HUB.HubDevice */\n    class HubDevice extends EventEmitter2 {\n\n        constructor() {\n            super()\n            this.charac = null\n            this.portCmdQueue = {}\n            this.portCmdCallback = {}\n            /**@type {{[portId: string]: Device}} */\n            this.hubDevices = {}\n            this.busy = false\n            this.cmdQueue = []\n            this.attachCallbacks = new CallbackEmitter()\n        }\n\n        /**\n         * \n         * @param {BluetoothDevice} device \n         */\n        async init(device) {\n\n            const server = await device.gatt.connect()\n            log('Connected')\n            const service = await server.getPrimaryService(LPF2_SERVICE_UUID)\n            this.charac = await service.getCharacteristic(LPF2_CHARAC_UUID)\n\n            const onCharacteristicvaluechanged = (event) => {\n                this.decodeMsg(event.target.value)\n            }\n\n            device.addEventListener('gattserverdisconnected', () => {\n                console.log('onGattServerDisconnected', this)\n                this.charac.removeEventListener('characteristicvaluechanged', onCharacteristicvaluechanged)\n\n                this.charac = null\n                this.emit('disconnected')\n            })\n\n            this.charac.addEventListener('characteristicvaluechanged', onCharacteristicvaluechanged)\n            await this.charac.startNotifications()\n            await $$.util.wait(100)\n        }\n\n        async startNotification() {\n            await this.sendMsg(MessageType.HUB_PROPERTIES, HubPropertyPayload.BATTERY_VOLTAGE, 0x02)\n            await this.sendMsg(MessageType.HUB_PROPERTIES, HubPropertyPayload.SYSTEM_TYPE_ID, 0x05)\n            await this.sendMsg(MessageType.HUB_PROPERTIES, HubPropertyPayload.PRIMARY_MAC_ADDRESS, 0x05)\n            await this.sendMsg(MessageType.HUB_ALERTS, 0x01, 0x01)\n            // await this.sendMsg(MessageType.HUB_ALERTS, 0x02, 0x01)\n            // await this.sendMsg(MessageType.HUB_ALERTS, 0x03, 0x01)\n            // await this.sendMsg(MessageType.HUB_ALERTS, 0x04, 0x01)\n\n        }\n\n\n        /**\n         * \n         * @param {number} portId \n         * @returns {Promise<Motor>}\n         */\n        getMotor(portId) {\n            return new Promise((resolve, reject) => {\n                const device = this.hubDevices[portId]\n                if (device) {\n                    if (device instanceof Motor) {\n                        resolve(device)\n                    }\n                    else {\n                        reject()\n                    }\n                }\n                else {\n                    this.attachCallbacks.on((device) => {\n                        if (device.portId == portId) {\n                            log(`device on portId ${portId} is ready`)\n                            resolve(device)\n                            return true\n                        }\n                        return false\n                    })\n                }\n            })\n        }\n\n        /**\n         * \n         * @param {number} portId \n         * @returns {Promise<TiltSensor>}\n         */\n        getTiltSensor(portId) {\n            return new Promise((resolve, reject) => {\n                const device = this.hubDevices[portId]\n                if (device) {\n                    if (device instanceof TiltSensor) {\n                        resolve(device)\n                    }\n                    else {\n                        reject()\n                    }\n                }\n                else {\n                    this.attachCallbacks.on((device) => {\n                        if (device.portId == portId) {\n                            log(`device on portId ${portId} is ready`)\n                            resolve(device)\n                            return true\n                        }\n                        return false\n                    })\n                }\n            })\n\n        }\n\n        getLed(portId) {\n            return new Promise((resolve, reject) => {\n                const device = this.hubDevices[portId]\n                if (device) {\n                    if (device instanceof Led) {\n                        resolve(device)\n                    }\n                    else {\n                        reject()\n                    }\n                }\n                else {\n                    this.attachCallbacks.on((device) => {\n                        if (device.portId == portId) {\n                            log(`device on portId ${portId} is ready`)\n                            resolve(device)\n                            return true\n                        }\n                        return false\n                    })\n                }\n            })    \n        }\n\n        async getDblMotor(portId1, portId2) {\n            return new Promise(async (resolve) => {\n                const name = getVirtualPortName(portId1, portId2)\n                const device = Object.values(this.hubDevices).find((d) => d.name == name)\n                if (device) {\n                    resolve(device)\n\n                }\n                else {\n                    this.attachCallbacks.on((device) => {\n                        if (device.name == name) {\n                            console.log(`device on portId ${device.portId} is ready`)\n                            resolve(device)\n                            return true\n                        }\n                        return false\n                    })\n\n                    await this.createVirtualPort(portId1, portId2)\n                }\n            })\n        }\n\n        /**\n         * \n         * @param  {ArrayBuffer} buffer \n         */\n        async sendBuffer(buffer) {\n            log('sendBuffer', buffer)\n            if (!this.busy) {\n                this.busy = true\n                await this.charac.writeValueWithoutResponse(buffer)\n                this.busy = false\n                if (this.cmdQueue.length > 0) {\n                    await this.sendBuffer(this.cmdQueue.shift())\n                }\n\n            }\n            else {\n                log('busy push in queue')\n                this.cmdQueue.push(buffer)\n            }\n\n        }\n\n        /**\n         * \n         * @param {number} msgType\n         * @param  {...any} data \n         */\n        sendMsg(msgType, ...data) {\n            log('sendMsg', MessageTypeNames[msgType], data)\n            return this.sendBuffer(formatMsg(msgType, data))\n        }\n\n        /**\n         * \n         * @param {string} name \n         * @returns {number}\n         */\n        getPortIdFromName(name) {\n            for (const info of Object.values(this.hubDevices)) {\n                if (info.name == name) {\n                    return info.portId\n                }\n            }\n        }\n\n        /**\n         * @param {number} portId1\n         * @param {number} portId2\n         */\n        createVirtualPort(portId1, portId2) {\n\n            return this.sendMsg(MessageType.VIRTUAL_PORT_SETUP, 0x01, portId1, portId2)\n        }\n\n        shutdown() {\n            return this.sendMsg(MessageType.HUB_ACTIONS, 0x01)\n        }\n\n\n        getHubDevices() {\n            return Object.values(this.hubDevices)\n        }\n\n        getDeviceType(portId) {\n            return this.hubDevices[portId].type\n        }\n\n        /**\n         * \n         * @param {number} portId \n         * @returns {Promise<HUB.PortInformation>}\n         */\n        async getPortInformation(portId) {\n            const portInfo = await this.getPortInformationRequest(portId)\n            const { capabilities, count, output, input } = portInfo\n            const bitSet = Math.max(input, output)\n            const modes = []\n            for (let mode = 0; mode < count; mode++) {\n                const data = {}\n                if (bitSet >> mode) {\n                    let ret\n                    ret = await this.getPortModeInformationRequest(portId, mode, ModeInformationType.NAME)\n                    data.name = ret.name\n                    ret = await this.getPortModeInformationRequest(portId, mode, ModeInformationType.RAW)\n                    data[ret.type] = { min: ret.min, max: ret.max }\n                    ret = await this.getPortModeInformationRequest(portId, mode, ModeInformationType.PCT)\n                    data[ret.type] = { min: ret.min, max: ret.max }\n                    ret = await this.getPortModeInformationRequest(portId, mode, ModeInformationType.SI)\n                    data[ret.type] = { min: ret.min, max: ret.max }\n                    ret = await this.getPortModeInformationRequest(portId, mode, ModeInformationType.SYMBOL)\n                    data.unit = ret.symbol\n                    ret = await this.getPortModeInformationRequest(portId, mode, ModeInformationType.VALUE_FORMAT)\n                    const { numValues, dataType, totalFigures, decimals } = ret\n                    data[ret.type] = { numValues, dataType, totalFigures, decimals }\n                }\n                modes.push(data)\n            }\n            return { modes, capabilities }\n        }\n\n\n        getPortInformationRequest(portId) {\n            return new Promise(async (resolve) => {\n                await this.sendMsg(MessageType.PORT_INFORMATION_REQUEST, portId, 0x01)\n                this.portCmdCallback[portId] = resolve\n            })\n        }\n\n\n\n        getPortModeInformationRequest(portId, mode, type) {\n            return new Promise(async (resolve) => {\n                await this.sendMsg(MessageType.PORT_MODE_INFORMATION_REQUEST, portId, mode, type)\n                this.portCmdCallback[portId] = resolve\n            })\n        }\n\n        /**\n         * \n         * @param {DataView} msg \n         */\n        decodeMsg(msg) {\n            const bufferLen = msg.byteLength\n            const msgLen = msg.getUint8(0)\n            const msgType = msg.getUint8(2)\n            log('decodeMsg', { msgType: MessageTypeNames[msgType] })\n            switch (msgType) {\n                case MessageType.HUB_ATTACHED_IO:\n                    this.handlePortMsg(msg)\n                    break;\n                case MessageType.GENERIC_ERROR_MESSAGES:\n                    this.handleGenericErrorMsg(msg)\n                    break;\n                case MessageType.HUB_PROPERTIES:\n                    this.handleHubPropertyResponse(msg)\n                    break\n                case MessageType.HUB_ALERTS:\n                    this.handleHubAlerts(msg);\n                    break\n                case MessageType.PORT_OUTPUT_COMMAND_FEEDBACK:\n                    this.handlePortCommandFeedback(msg)\n                    break;\n                case MessageType.PORT_MODE_INFORMATION:\n                    this.handlePortModeInformation(msg)\n                    break;\n                case MessageType.PORT_INFORMATION:\n                    this.handlePortInformation(msg)\n                    break;\n                case MessageType.PORT_VALUE_SINGLE:\n                    this.handlePortValueSingle(msg)\n                    break;\n            }\n        }\n\n\n        /**\n          * \n          * @param {DataView} msg \n          */\n        handlePortValueSingle(msg) {\n            //log('msg', msg)\n            const portId = msg.getUint8(3)\n            const msgLen = msg.getUint8(0)\n            const device = this.hubDevices[portId]\n            log('handlePortValueSingle', { msgLen, portId })\n            device.handleValue(msg)\n        }\n\n\n        /**\n         * \n         * @param {DataView} msg \n         */\n        handlePortModeInformation(msg) {\n            const portId = msg.getUint8(3)\n            const mode = msg.getUint8(4)\n            const type = msg.getUint8(5)\n            const data = { portId, mode, type: ModeInformationTypeNames[type] }\n            switch (type) {\n                case ModeInformationType.NAME:\n                    data.name = abToString(msg.buffer.slice(6, msg.byteLength))\n                    break\n                case ModeInformationType.RAW:\n                case ModeInformationType.PCT:\n                case ModeInformationType.SI:\n                    data.min = msg.getFloat32(6, true)\n                    data.max = msg.getFloat32(10, true)\n                    break\n                case ModeInformationType.SYMBOL:\n                    data.symbol = abToString(msg.buffer.slice(6, msg.byteLength))\n                    break\n                case ModeInformationType.VALUE_FORMAT:\n                    data.numValues = msg.getUint8(6)\n                    data.dataType = [\"8bit\", \"16bit\", \"32bit\", \"float\"][msg.getUint8(7)]\n                    data.totalFigures = msg.getUint8(8)\n                    data.decimals = msg.getUint8(9)\n                    break\n            }\n            log('portModeInformation', data)\n            const cb = this.portCmdCallback[portId]\n            if (typeof cb == 'function') {\n                cb(data)\n                delete this.portCmdCallback[portId]\n            }\n        }\n        /**\n         * \n         * @param {DataView} msg \n         */\n        handlePortInformation(msg) {\n            const portId = msg.getUint8(3)\n            let capabilities = msg.getUint8(5)\n            const count = msg.getUint8(6)\n            const input = msg.getUint16(7, true)\n            const output = msg.getUint16(9, true)\n            log(`Port ${portId}, capabilities ${capabilities}, total modes ${count}, \n                    input modes ${input}, output modes ${output}`)\n            const availableCaps = 'output,input,logical combinable, logical synchronisable'.split(',')\n            let cap = []\n            for (let i = 0; i < 4; i++) {\n                if ((capabilities >> i) & 1) {\n                    cap.push(availableCaps[i])\n                }\n            }\n            const data = { portId, capabilities: cap.join(', '), count, input, output }\n            const cb = this.portCmdCallback[portId]\n            if (typeof cb == 'function') {\n                cb(data)\n            }\n        }\n\n\n        /**\n         * \n         * @param {DataView} msg \n         * @returns \n         */\n        handleHubPropertyResponse(msg) {\n            const property = msg.getUint8(3)\n            log({ property: HubPropertyPayloadNames[property] })\n            if (property == HubPropertyPayload.BATTERY_VOLTAGE) {\n                const batteryLevel = msg.getUint8(5)\n                log({ batteryLevel })\n                this.emit('batteryLevel', { batteryLevel })\n            }\n            else if (property == HubPropertyPayload.BUTTON_STATE) {\n                const buttonState = msg.getUint8(5)\n                log({ buttonState })\n                this.emit('buttonState', { buttonState })\n            }\n            else if (property == HubPropertyPayload.SYSTEM_TYPE_ID) {\n                const systemType = msg.getUint8(5)\n                log({ systemType })\n                //this.emit('buttonState', { buttonState })\n            }\n            else if (property == HubPropertyPayload.PRIMARY_MAC_ADDRESS) {\n                const bytes = []\n                for (let i = 0; i < 6; i++) {\n                    bytes.push(msg.getUint8(5 + i).toString(16).toLocaleUpperCase().padStart(2, '0'))\n                }\n                log({ bytes })\n                this.emit('address', { address: bytes.join(':') })\n            }\n        }\n        /**\n         * \n         * @param {DataView} msg \n         */\n        handleGenericErrorMsg(msg) {\n            const cmdType = msg.getUint8(3)\n            const errorCode = msg.getUint8(4)\n            log({ cmdType, errorCode: ErrorCodeNames[errorCode] })\n            this.emit('error', { cmdType, errorCode: ErrorCodeNames[errorCode] })\n        }\n\n        /**\n         * \n         * @param {DataView} msg \n         */\n        handleHubAlerts(msg) {\n            const bufferLen = msg.byteLength\n            const msgLen = msg.getUint8(0)\n            const type = msg.getUint8(3)\n            const operation = msg.getUint8(4)\n            const payload = msg.getUint8(5)\n\n            log('handleHubAlerts', { bufferLen, msgLen, type, operation, payload })\n            this.emit('hubAlerts', { type, payload })\n        }\n\n        /**\n         * \n         * @param {DataView} msg \n         */\n        handlePortCommandFeedback(msg) {\n            for (let offset = 3; offset < msg.byteLength; offset += 2) {\n                const portId = msg.getUint8(offset)\n                const feedback = msg.getUint8(offset + 1)\n                const device = this.hubDevices[portId]\n                log('handlePortCommandFeedback', { portId, feedback })\n                if (feedback == 10 && device != undefined) {\n                    device.handleFeedback()\n                }\n\n            }\n        }\n        /**\n         * \n         * @param {DataView} msg \n         */\n        handlePortMsg(msg) {\n\n            const portId = msg.getUint8(3)\n            const eventType = msg.getUint8(4)\n            const type = eventType ? msg.getUint16(5, true) : 0\n            const deviceTypeName = DeviceTypeNames[type] || \"Unknown\"\n            const eventName = EventNames[eventType]\n\n            log('handlePortMsg', { portId, eventName, deviceTypeName })\n            if (eventType == Event.ATTACHED_IO) {\n\n                let constructor = constructorMap[type]\n                if (!constructor) {\n                    constructor = Device\n                }\n                const device = new constructor(this, portId, deviceTypeName)\n                this.hubDevices[portId] = device\n                this.attachCallbacks.emit(device)\n\n                this.emit('attach', device)\n            }\n            else if (eventType == Event.DETACHED_IO) {\n                delete this.hubDevices[portId]\n                this.emit('detach', { portId })\n            }\n            else if (eventType == Event.ATTACHED_VIRTUAL_IO) {\n                const portId1 = msg.getUint8(7)\n                const portId2 = msg.getUint8(8)\n\n                const device = new DoubleMotor(this, portId, getVirtualPortName(portId1, portId2))\n                this.hubDevices[portId] = device\n                this.attachCallbacks.emit(device)\n\n                this.emit('attach', device)\n            }\n        }\n    }\n\n    $$.service.registerService('hub', {\n\n        init: function () {\n\n            /**\n             * \n             * @returns {Promise<HubDevice>}\n             */\n            async function connect() {\n                log('connect')\n\n                const device = await navigator.bluetooth.requestDevice({\n                    acceptAllDevices: true,\n                    optionalServices: [LPF2_SERVICE_UUID]\n                })\n\n                const hubDevice = new HubDevice()\n                await hubDevice.init(device)\n\n                return hubDevice\n\n                //await sendMsg(MessageType.HUB_PROPERTIES, HubPropertyPayload.BATTERY_TYPE, 0x05)\n                //await sendMsg(formatMsg(MessageType.HUB_PROPERTIES, HubPropertyPayload.BATTERY_VOLTAGE, 0x02))\n                //await sendMsg(MessageType.HUB_PROPERTIES, HubPropertyPayload.BUTTON_STATE, 0x02)\n            }\n\n            return {\n                connect,\n                Color,\n                PortMap,\n                PortMapNames,\n                DeviceMode,\n                BrakingStyle,\n                DeviceTypeNames\n            }\n        }\n    });\n\n})();\n\n\n"]}