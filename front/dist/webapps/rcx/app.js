$$.control.registerControl("rootPage",{template:'<div>\n    <div bn-show="notSupported" class="notSupported">\n        Sorry, <b>Web Serial</b> is not supported on this device, make sure you\'re\n        running Chrome 78 or later and have enabled the\n        <code>#enable-experimental-web-platform-features</code> flag in\n        <code>chrome://flags</code>\n    </div>\n\n    <button class="w3-button w3-blue" \n        bn-event="click: onConnect"\n        bn-show="showConnect"\n        >Connect</button>\n\n    <div bn-show="connected">\n\n        <div>\n            <button class="w3-button w3-blue" bn-event="click: onDownloadFirmware">Download Firmware</button>\n        </div>\n\n        <div class="beep">\n            <button class="w3-button w3-blue" bn-event="click: onBeep">Beep</button>\n\n            <div bn-control="brainjs.combobox", \n            bn-data="{items: [\n                {value: 0, label: \'Beep\'},\n                {value: 1, label: \'Beep beep\'},\n                {value: 2, label: \'Downward tones\'},\n                {value: 3, label: \'Upward tones\'},\n                {value: 4, label: \'Low buzz\'},\n                {value: 5, label: \'Fast upward tones\'}\n            ]}" \n            bn-val="beep" bn-iface="beepType"></div>\n    \n        </div>\n        <button class="w3-button w3-blue" bn-event="click: onVersion">Version</button>\n        <button class="w3-button w3-blue" bn-event="click: onPing">Ping</button>\n        <button class="w3-button w3-blue" bn-event="click: onBattery">Battery</button>\n        <button class="w3-button w3-blue" bn-event="click: onMotorStatus">Motor Status</button>\n        <button class="w3-button w3-blue" bn-event="click: onPowerOff">Power Off</button>\n\n        <fieldset bn-control="brainjs.checkgroup" bn-iface="motorList">\n            <legend>Motor List</legend>\n            <input type="checkbox" value="A" class="w3-check"><label>A</label>\n            <input type="checkbox" value="B" class="w3-check"><label>B</label>\n            <input type="checkbox" value="C" class="w3-check"><label>C</label>\n\n        </fieldset>\n\n        <fieldset bn-control="brainjs.radiogroup" bn-iface="motorDir">\n            <legend>Motor Direction</legend>\n            <input type="radio" value="Fwd" class="w3-radio"><label>Forward</label>\n            <input type="radio" value="Bkd" class="w3-radio"><label>Backward</label>\n\n        </fieldset>\n\n        <button class="w3-button w3-blue" bn-event="click: onMotorOn">Motor On</button>\n        <button class="w3-button w3-blue" bn-event="click: onMotorOff">Motor Off</button>\n\n        <fieldset>\n            <legend>Sensor</legend>\n            <div class="vert_container">\n                <label>Index</label>\n                <div bn-control="brainjs.combobox", \n                    bn-val="sensorIndex"\n                    bn-update="comboboxchange"\n                    bn-data="{items: [\n                        \'SENSOR_1\',\n                        \'SENSOR_2\',\n                        \'SENSOR_3\'\n                    ]}">\n                </div>     \n            </div>\n            <div class="vert_container">\n                <label>Type</label>\n                <div bn-control="brainjs.combobox", \n                    bn-val="sensorType"\n                    bn-update="comboboxchange"\n                    bn-data="{items: [\n                        \'RAW\',\n                        \'TOUCH\',\n                        \'TEMPERATURE\',\n                        \'LIGHT\',\n                        \'ROTATION\'\n                    ]}">\n                </div>     \n            </div>\n\n            <div class="container">\n                <button class="w3-button w3-blue" bn-event="click: onSensorType">Set Type</button>\n                <button class="w3-button w3-blue" bn-event="click: onSensorClearValue">Clear Value</button>\n            </div>\n\n        </fieldset>\n\n    </div>\n\n\n</div>',deps:["app.rcx","breizbot.pager","breizbot.files"],init:function(n,e,t,o){const a=$$.viewController(n,{data:{notSupported:!("serial"in navigator),connected:!1,beep:0,showConnect:function(){return!this.notSupported&&!this.connected},sensorType:"TOUCH",sensorIndex:"SENSOR_1"},events:{onDownloadFirmware:function(){t.pushPage("breizbot.files",{title:"Open File",props:{filterExtension:"lgo"},events:{fileclick:function(n,e){t.popPage(e)}},onReturn:async function(n){const{fileName:t,rootDir:a}=n,r=o.fileUrl(a+t),s=await fetch(r),c=await s.text();await e.downloadFirmware(c,200)}})},onConnect:async function(){await e.connect(),a.setData({connected:!0})},onBeep:async function(){const n=parseInt(a.scope.beepType.getValue());console.log("beepType",n),await e.beep(n)},onPing:async function(){await e.isAlive()},onSensorType:async function(){const{sensorIndex:n,sensorType:t}=a.model;await e.setSensorType(n,t)},onSensorClearValue:async function(){await e.clearSensorValue(a.model.sensorIndex)},onBattery:async function(){const n=await e.getBatteryLevel();console.log("level",n),$$.ui.showAlert({title:"Battery Level",content:`${n} mV`})},onVersion:async function(){const n=await e.getVersion();console.log("version",n),$$.ui.showAlert({title:"Firmware version",content:n})},onPowerOff:async function(){await e.powerOff()},onMotorOn:async function(){const n=a.scope.motorList.getValue(),t=a.scope.motorDir.getValue();console.log("motorList",n),console.log("motorDir",t),"Fwd"==t?await e.motorFwd(n):await e.motorBkd(n),await e.motorOn(n)},onMotorOff:async function(){const n=a.scope.motorList.getValue();console.log("motorList",n),await e.motorOff(n)},onMotorStatus:async function(){let n={A:await e.motorStatus("A"),B:await e.motorStatus("B"),C:await e.motorStatus("C")};n=JSON.stringify(n,null,4),console.log("status",n),$$.ui.showAlert({title:"Motor Status",height:400,content:`<pre>${n}</pre>`})}}})}}),$$.service.registerService("app.rcx",{deps:["app.srecord"],init:function(n,e){let t,o=!0,a=0,r=0,s=[],c=null,l=null;const i=2e3,u={RAW:0,TOUCH:1,TEMPERATURE:2,LIGHT:3,ROTATION:4},b={SENSOR_1:0,SENSOR_2:1,SENSOR_3:2};function w(n){return 255&n}function f(n){return n>>8&255}function d(n){const e=[];n=n.slice(3);for(let t=0;t<n.length-2;t+=2)e.push(n[t]);return e}function p(n,...e){return s=[],null!=l?Promise.reject("Busy"):new Promise((s,i)=>{c=s;const u=function(n){switch(n){case 69:case 117:return 2;case 18:case 48:return 3;case 21:return 9;case 165:return 26;default:return 1}}(e[0]),b=t.writable.getWriter(),w=function(n){r=2*n.length+5;const e=new ArrayBuffer(r),t=new Uint8Array(e);t[0]=85,t[1]=255,t[2]=0,o&&(n[0]|=8),o=!o;let a=3,s=0;return n.forEach(n=>{t[a++]=n,t[a++]=255&~n,s=s+n&255}),t[a++]=s,t[a++]=255&~s,e}(e);b.write(w),a=2*(e.length+u)+10,console.log("respExpectedBytes",a),b.releaseLock(),0!=n&&(l=setTimeout(()=>{l=null,i("Timeout, check your RCX is switched on")},n))})}async function g(){return console.log("deleteFirmware"),await p(i,101,1,3,5,7,11)}async function m(){return console.log("unlockFirmware"),await p(0,165,76,69,71,79,174)}async function v(n,e){return console.log("startDownloadFirmware",n,"0x",e.toString(16)),(await p(i,117,w(n),f(n),w(e),f(e),0))[1]}async function y(n,e){let t=0;e.forEach(n=>{t=(t+n)%256});let o=e.length;return console.log("transferData data length=",o,"checksum=",t),(await p(10*i,69,w(n),f(n),w(o),f(o),...e,t))[1]}function h(n){let e=0;return n.forEach(n=>{switch(n){case"A":e|=1;break;case"B":e|=2;break;case"C":e|=4}}),e}return{connect:async function(){t=await navigator.serial.requestPort(),await t.open({baudRate:2400,parity:"odd"}),async function(){const n=t.readable.getReader();for(;;){const{value:e,done:t}=await n.read();if(0!=a&&(s=s.concat(Array.from(e))),console.log("respBuffLength",s.length),a==s.length){const n=d(s.slice(r));console.log("resp",n),clearTimeout(l),l=null,"function"==typeof c&&c(n),s=[],a=0}if(t){n.releaseLock();break}}}()},beep:async function(n){return console.log("beep"),p(i,81,n)},getBatteryLevel:async function(){const n=await p(i,48);return n[1]+(n[2]<<8)},getVersion:async function(){const n=await p(i,21,1,3,5,7,11);return{romVersion:{major:(n[1]<<8)+n[2],minor:(n[3]<<8)+n[4]},firmwareVersion:{major:(n[5]<<8)+n[6],minor:(n[7]<<8)+n[8]}}},powerOff:async function(){return await p(i,96)},motorOn:async function(n){return p(i,33,192|h(n))},motorOff:async function(n){return p(i,33,16|h(n))},motorFwd:async function(n){return p(i,225,128|h(n))},motorBkd:async function(n){return p(i,225,0|h(n))},motorPower:async function(n,e){return p(i,19,h(n),2,e)},motorStatus:async function(n){n=n.charCodeAt(0)-65;const e=(await p(i,18,3,n))[1];return{power:7&e,dir:0!=(8&e)?"FWD":"BACK",brake:0!=(64&e),on:0!=(128&e)}},deleteFirmware:g,startDownloadFirmware:v,unlockFirmware:m,transferData:y,downloadFirmware:async function(n,t){console.log("rcx.downloadFirmware");let o=e.parse(n);console.log("parse ret",o);const a=Object.values(o.mem).flat();console.log("data",a);let r=0;if(a.forEach(n=>{r=(r+n)%65536}),console.log("checksum",r),await g(),0!=(o=await v(o.boot,r)))throw"startDownloadFirmware failed";let s=a.length,c=1,l=0;for(;s>0;){console.log("remainBytes",s);let n=t;if(s<=t&&(c=0,n=t),console.log("chunkSize",n),0!=(o=await y(c++,a.slice(l,l+n))))throw"transferData error="+o;s-=n,l+=n}o=await m(),console.log("ret",o)},isAlive:async function(){return p(i,16)},setSensorType:async function(n,e){console.log("setSensorType",n,e);const t=b[n],o=u[e];return await p(i,50,t,o)},clearSensorValue:async function(n){console.log("clearSensorValue",n);const e=b[n];return await p(i,209,e)}}}}),$$.service.registerService("app.srecord",{init:function(n){return{parse:function(n){const e=n.split("\n");console.log("nb srecs",e.length);const t={mem:{}};return e.forEach(n=>{if(0!=n.length){if("S"!=n[0])throw"Bad header "+n[0];const e=parseInt(n[1]),o=function(n){switch(n){case 0:case 1:case 9:case 5:return 2;case 2:case 6:case 8:return 3;case 3:case 7:return 4;default:throw"Bad type"}}(e),a=parseInt(n.substr(4,2*o),16),r=parseInt(n.substr(2,2),16)-1-o,s=[];for(let e=0,t=4+2*o;e<r;e++,t+=2)s.push(parseInt(n.substr(t,2),16));if(1==e)t.mem[a]=s;else if(9==e)t.boot=a;else if(0==e){let n="";s.forEach(e=>{n+=String.fromCharCode(e)}),t.info=n}}}),t}}}});