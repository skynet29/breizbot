$$.control.registerControl("rootPage",{template:'<div>\n    <div bn-show="notSupported" class="notSupported">\n        Sorry, <b>Web Serial</b> is not supported on this device, make sure you\'re\n        running Chrome 78 or later and have enabled the\n        <code>#enable-experimental-web-platform-features</code> flag in\n        <code>chrome://flags</code>\n    </div>\n\n    <button class="w3-button w3-blue" \n        bn-event="click: onConnect"\n        bn-show="showConnect"\n        >Connect</button>\n\n    <div bn-show="connected">\n\n        <div class="beep">\n            <button class="w3-button w3-blue" bn-event="click: onBeep">Beep</button>\n\n            <div bn-control="brainjs.combobox", \n            bn-data="{items: [\n                {value: 0, label: \'Beep\'},\n                {value: 1, label: \'Beep beep\'},\n                {value: 2, label: \'Downward tones\'},\n                {value: 3, label: \'Upward tones\'},\n                {value: 4, label: \'Low buzz\'},\n                {value: 5, label: \'Fast upward tones\'}\n            ]}" \n            bn-val="beep" bn-iface="beepType"></div>\n    \n        </div>\n        <button class="w3-button w3-blue" bn-event="click: onBattery">Battery</button>\n        <button class="w3-button w3-blue" bn-event="click: onVersion">Version</button>\n        <button class="w3-button w3-blue" bn-event="click: onMotorStatus">Motor Status</button>\n        <button class="w3-button w3-blue" bn-event="click: onPowerOff">Power Off</button>\n\n        <fieldset bn-control="brainjs.checkgroup" bn-iface="motorList">\n            <legend>Motor List</legend>\n            <input type="checkbox" value="A" class="w3-check"><label>A</label>\n            <input type="checkbox" value="B" class="w3-check"><label>B</label>\n            <input type="checkbox" value="C" class="w3-check"><label>C</label>\n\n        </fieldset>\n\n        <fieldset bn-control="brainjs.radiogroup" bn-iface="motorDir">\n            <legend>Motor Direction</legend>\n            <input type="radio" value="Fwd" class="w3-radio"><label>Forward</label>\n            <input type="radio" value="Bkd" class="w3-radio"><label>Backward</label>\n\n        </fieldset>\n\n        <button class="w3-button w3-blue" bn-event="click: onMotorOn">Motor On</button>\n        <button class="w3-button w3-blue" bn-event="click: onMotorOff">Motor Off</button>\n\n    </div>\n\n\n</div>',deps:["app.rcx"],init:function(n,e){const t=$$.viewController(n,{data:{notSupported:!("serial"in navigator),connected:!1,beep:0,showConnect:function(){return!this.notSupported&&!this.connected}},events:{onConnect:async function(){await e.connect(),t.setData({connected:!0})},onBeep:async function(){const n=parseInt(t.scope.beepType.getValue());console.log("beepType",n),await e.beep(n)},onBattery:async function(){const n=await e.getBatteryLevel();console.log("level",n),$$.ui.showAlert({title:"Battery Level",content:`${n} mV`})},onVersion:async function(){const n=await e.getVersion();console.log("version",n),$$.ui.showAlert({title:"Firmware version",content:n})},onPowerOff:async function(){await e.powerOff()},onMotorOn:async function(){const n=t.scope.motorList.getValue(),o=t.scope.motorDir.getValue();console.log("motorList",n),console.log("motorDir",o),"Fwd"==o?await e.motorFwd(n):await e.motorBkd(n),await e.motorOn(n)},onMotorOff:async function(){const n=t.scope.motorList.getValue();console.log("motorList",n),await e.motorOff(n)},onMotorStatus:async function(){let n={A:await e.motorStatus("A"),B:await e.motorStatus("B"),C:await e.motorStatus("C")};n=JSON.stringify(n,null,4),console.log("status",n),$$.ui.showAlert({title:"Motor Status",height:400,content:`<pre>${n}</pre>`})}}})}}),$$.service.registerService("app.rcx",{init:function(n){let e,t=!0,o=0,a=0,r=[],c=null,l=null;function s(n){const e=[];n=n.slice(3);for(let t=0;t<n.length-2;t+=2)e.push(n[t]);return e}function i(...n){return console.log("sendData",n),r=[],null!=l?Promise.reject("Busy"):new Promise((r,s)=>{c=r;const i=function(n){switch(n){case 18:case 48:return 3;case 21:return 9;default:return 1}}(n[0]),u=e.writable.getWriter();u.write(function(n){a=2*n.length+5;const e=new ArrayBuffer(a),o=new Uint8Array(e);o[0]=85,o[1]=255,o[2]=0,t&&(n[0]|=8),t=!t;let r=3,c=0;return n.forEach(n=>{o[r++]=n,o[r++]=255&~n,c=c+n&255}),o[r++]=c,o[r++]=255&~c,e}(n)),o=2*(n.length+i)+10,u.releaseLock(),l=setTimeout(()=>{l=null,s("Timeout, check your RCX is switched on")},1e3)})}function u(n){let e=0;return n.forEach(n=>{switch(n){case"A":e|=1;break;case"B":e|=2;break;case"C":e|=4}}),e}return{connect:async function(){e=await navigator.serial.requestPort(),await e.open({baudrate:2400,parity:"odd"}),async function(){const n=e.readable.getReader();for(;;){const{value:e,done:t}=await n.read();if(console.log(e,t),0!=o&&(r=r.concat(Array.from(e))),r.length>=a&&console.log("resp echo ok"),o==r.length){const n=s(r.slice(a));console.log("resp",n),clearTimeout(l),l=null,"function"==typeof c&&c(n),r=[],o=0}if(t){n.releaseLock();break}}}()},beep:async function(n){return console.log("beep"),i(81,n)},getBatteryLevel:async function(){const n=await i(48);return n[1]+(n[2]<<8)},getVersion:async function(){const n=await i(18,35,0);return n[1]+(n[2]<<8)},powerOff:async function(){return await i(96)},motorOn:async function(n){return i(33,192|u(n))},motorOff:async function(n){return i(33,16|u(n))},motorFwd:async function(n){return i(225,128|u(n))},motorBkd:async function(n){return i(225,0|u(n))},motorPower:async function(n,e){return i(19,u(n),2,e)},motorStatus:async function(n){n=n.charCodeAt(0)-65;const e=(await i(18,3,n))[1];return{power:7&e,dir:0!=(8&e)?"FWD":"BACK",brake:0!=(64&e),on:0!=(128&e)}}}}});