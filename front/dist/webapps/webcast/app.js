$$.control.registerControl("addWebcast",{template:'<div>\n    <form bn-event="submit: onSubmit" bn-form="data">\n\n        <div bn-control="brainjs.inputgroup">\n            <label>Name</label>\n            <input type="text" required name="name">\n        </div>\n\n        <input type="submit" hidden bn-bind="submit">\n    </form>\n</div>\n\n<div class="users">\n    <ul class="w3-ul w3-border w3-white" bn-each="users" \n\tbn-event="click.delete: onRemoveUser">\n    \n    <li class="w3-bar">\n\t\t\n\t\t<span class="w3-button w3-right delete w3-blue" title="Delete" bn-icon="fa fa-trash"></span>\n\n\t\t<div class="w3-bar-item">\n\t\t\t<i class="fa fa-user"></i>\n\t\t\t<span bn-text="$scope.$i"></span>\n\t\t</div>\n\t</li>\n</ul>\n</div>\n',deps:["breizbot.pager"],props:{data:null},init:function(e,t){const{data:n}=this.props,o=$$.viewController(e,{data:{users:null!=n?n.users:[],data:n},events:{onSubmit:function(e){e.preventDefault();const n=$(this).getFormData();n.users=o.model.users,t.popPage(n)},onRemoveUser:function(){const e=$(this).closest("li").index();console.log("onRemoveUser",e),o.model.users.splice(e,1),o.update()}}});this.getButtons=function(){return{addUser:{icon:"fa fa-user-plus",title:"Add User",onClick:function(){t.pushPage("breizbot.friends",{title:"Add User",props:{showConnectionState:!1,showSelection:!0},buttons:{add:{title:"Add",icon:"fa fa-plus",onClick:function(){t.popPage(this.getSelection())}}},onReturn:function(e){console.log("onReturn",e),o.model.users.push(e.friendUserName),o.update()}})}},apply:{icon:"fa fa-check",title:"Apply",onClick:function(){o.scope.submit.click()}}}}}}),$$.control.registerControl("client",{template:'<div class="content">\n    <video bn-bind="video" autoplay></video>\n</div>',props:{id:null,mimeType:""},init:function(e){const{id:t,mimeType:n}=this.props;let o=null,s=null,i=null;const c=$$.viewController(e,{});this.dispose=function(){console.log("client dispose"),o.close()},function(){console.log("try to connect...");let{host:e,protocol:a}=location;a="http:"==a?"ws:":"wss:",(o=new WebSocket(`${a}//${e}/stream/client/${t}`)).binaryType="arraybuffer",o.onopen=(async()=>{console.log("Connected to streamer");try{s=new MediaSource;const e=c.scope.video.get(0);e.src=URL.createObjectURL(s),s.addEventListener("sourceopen",()=>{console.log("source opened"),URL.revokeObjectURL(e.src),i=s.addSourceBuffer(n)})}catch(e){console.error(e)}}),o.onmessage=(e=>{i.appendBuffer(e.data)}),o.onclose=(e=>{console.log("Disconnected to streamer")})}()}}),$$.control.registerControl("rootPage",{template:'<div class="toolbar">\n    <button class="w3-button" bn-icon="fa fa-plus" bn-event="click: onAddWebcast"></button>\n</div>\n\x3c!-- <div>\n    <div bn-control="brainjs.radiogroup" bn-val="type" bn-update="change">\n        <input type="radio" value="server">Server\n        <input type="radio" value="client">Client\n    </div>\n    <div>\n        <button bn-event="click: onConnect" class="w3-btn w3-blue" bn-show="!isConnected">Connect</button>\n        <button bn-event="click: onStart" class="w3-btn w3-blue" bn-show="showStart">Start</button>\n        <button bn-event="click: onStop" class="w3-btn w3-blue" bn-show="showStop">Stop</button>\n    </div>\n</div>\n\n<div class="content">\n    <video bn-bind="video" autoplay bn-prop="{muted: isMuted}"></video>\n</div> --\x3e\n\n<div class="content">\n    <div \n    bn-control="brainjs.tree" \n    bn-data="{source: webcasts, contextMenu: getContextMenu}" \n    bn-iface="tree"\n    class="tree" \n    bn-event="treeclick: onTreeActivate, treecontextmenu: onTreeContextMenu"></div>\n</div>',deps:["breizbot.pager","breizbot.http"],init:function(e,t,n){async function o(){const e=await n.get("/");s.setData({webcasts:e}),s.scope.tree.expandAll()}const s=$$.viewController(e,{data:{webcasts:[],getContextMenu:function(){return function(e){const t={};return"server"==s.scope.tree.getActiveNode().data.type&&(t.edit={name:"Edit",icon:"fas fa-edit"},t.del={name:"Remove",icon:"fas fa-trash"}),t}}},events:{onTreeContextMenu:async function(e,s){const{action:i,node:c}=s,{id:a}=c.data;if(console.log("id",a),"del"==i&&(await n.delete(`/${a}`),o()),"edit"==i){const e=await n.get(`/${a}`);t.pushPage("addWebcast",{title:"Edit Webcast",props:{data:e},onReturn:async function(e){console.log("onReturn",e),await n.put(`/${a}`,e),o()}})}},onTreeActivate:function(){const e=$(this).iface(),n=e.getActiveNode(),{type:o,id:s}=n.data;o&&t.pushPage(o,{title:`${o} ${n.title}`,props:{id:s,mimeType:"video/webm; codecs=opus, vp8"},onBack:function(){const t=e.getActiveNode();null!=t&&t.setActive(!1)}})},onAddWebcast:function(){t.pushPage("addWebcast",{title:"Add Webcast",onReturn:async function(e){await n.post("/",e),o()}})}}});o()}}),$$.control.registerControl("server",{template:'<div class="content">\n    <video bn-bind="video" autoplay muted></video>\n</div>',deps:["breizbot.pager"],props:{id:null,mimeType:""},init:function(e,t){const{id:n,mimeType:o}=this.props,s={video:!0,audio:!0};let i=null,c=null,a=null;function r(){console.log("try to connect...");let{host:e,protocol:r}=location;r="http:"==r?"ws:":"wss:",(i=new WebSocket(`${r}//${e}/stream/server/${n}`)).binaryType="arraybuffer",i.onopen=(async()=>{console.log("Connected to streamer");try{a=await navigator.mediaDevices.getUserMedia(s),l.scope.video.get(0).srcObject=a,(c=new MediaRecorder(a,{type:o})).ondataavailable=async function(e){const t=await e.data.arrayBuffer();1==i.readyState&&i.send(t)},c.start(500),t.setButtonVisible({start:!1,stop:!0})}catch(e){console.error(e)}}),i.onclose=(e=>{console.log("Disconnected to streamer"),c.stop(),t.setButtonVisible({start:!0,stop:!1}),null!=a&&(a.getTracks().forEach(function(e){e.stop()}),a=null)})}const l=$$.viewController(e,{});function d(){null!=i&&i.close()}this.getButtons=function(){return{start:{title:"Start",icon:"far fa-play-circle",onClick:r,visible:!0},stop:{title:"Stop",icon:"far fa-stop-circle",onClick:d,visible:!1}}},this.dispose=function(){console.log("server dispose"),d()}}});